/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConvertExchangeAccountRequest;
import org.openapitools.client.model.CreateInternalTransferRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExchangeAccount;
import org.openapitools.client.model.ExchangeAsset;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExchangeAccountsApi
 */
@Ignore
public class ExchangeAccountsApiTest {

    private final ExchangeAccountsApi api = new ExchangeAccountsApi();

    /**
     * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     *
     * Convert assets within an exchange account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAssetsTest() throws ApiException {
        String exchangeAccountId = null;
        ConvertExchangeAccountRequest convertExchangeAccountRequest = null;
        api.convertAssets(exchangeAccountId, convertExchangeAccountRequest);

        // TODO: test validations
    }
    /**
     * Find an asset for an exchange account
     *
     * Returns an asset for an exchange account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeAccountAssetTest() throws ApiException {
        String exchangeAccountId = null;
        String assetId = null;
        ExchangeAsset response = api.getExchangeAccountAsset(exchangeAccountId, assetId);

        // TODO: test validations
    }
    /**
     * Find a specific exchange account
     *
     * Returns an exchange account by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeAccountByIdTest() throws ApiException {
        String exchangeAccountId = null;
        ExchangeAccount response = api.getExchangeAccountById(exchangeAccountId);

        // TODO: test validations
    }
    /**
     * List exchange accounts
     *
     * Returns all exchange accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeAccountsTest() throws ApiException {
        List<ExchangeAccount> response = api.getExchangeAccounts();

        // TODO: test validations
    }
    /**
     * Internal transfer for exchange accounts
     *
     * Transfers funds between trading accounts under the same exchange account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalTransferTest() throws ApiException {
        String exchangeAccountId = null;
        CreateInternalTransferRequest createInternalTransferRequest = null;
        api.internalTransfer(exchangeAccountId, createInternalTransferRequest);

        // TODO: test validations
    }
}
