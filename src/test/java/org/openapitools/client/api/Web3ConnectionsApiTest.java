/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateConnectionRequest;
import org.openapitools.client.model.CreateConnectionResponse;
import org.openapitools.client.model.GetConnectionsFilterParameter;
import org.openapitools.client.model.GetConnectionsResponse;
import org.openapitools.client.model.RespondToConnectionRequest;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Web3ConnectionsApi
 */
@Ignore
public class Web3ConnectionsApiTest {

    private final Web3ConnectionsApi api = new Web3ConnectionsApi();

    /**
     * Create a new Web3 connection.
     *
     * Initiate a new Web3 connection.  * Note: After this succeeds, make a request to &#x60;PUT /v1/connections/wc/{id}&#x60; (below) to approve or reject the new Web3 connection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWCConnectionTest() throws ApiException {
        CreateConnectionRequest createConnectionRequest = null;
        CreateConnectionResponse response = api.createWCConnection(createConnectionRequest);

        // TODO: test validations
    }
    /**
     * Remove an existing Web3 connection.
     *
     * Remove a Web3 connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWCConnectionTest() throws ApiException {
        String id = null;
        api.deleteWCConnection(id);

        // TODO: test validations
    }
    /**
     * List all open Web3 connections.
     *
     * Get open Web3 connections.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectionsTest() throws ApiException {
        String order = null;
        GetConnectionsFilterParameter filter = null;
        String sort = null;
        BigDecimal pageSize = null;
        String next = null;
        GetConnectionsResponse response = api.getConnections(order, filter, sort, pageSize, next);

        // TODO: test validations
    }
    /**
     * Respond to a pending Web3 connection request.
     *
     * Submit a response to *approve* or *reject* an initiated Web3 connection. * Note: This call is used to complete your &#x60;POST /v1/connections/wc/&#x60; request.  After this succeeds, your new Web3 connection is created and functioning.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWCConnectionTest() throws ApiException {
        String id = null;
        RespondToConnectionRequest respondToConnectionRequest = null;
        api.updateWCConnection(id, respondToConnectionRequest);

        // TODO: test validations
    }
}
