/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateAddressResponse;
import org.openapitools.client.model.CreateVaultAccountAssetAddressRequest;
import org.openapitools.client.model.CreateVaultAccountAssetRequest;
import org.openapitools.client.model.CreateVaultAccountRequest;
import org.openapitools.client.model.CreateVaultAssetResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedAssetWalletResponse;
import org.openapitools.client.model.PublicKeyInformation;
import org.openapitools.client.model.SetAutoFuelForVaultAccountRequest;
import org.openapitools.client.model.SetCustomerRefIdForVaultAccountRequest;
import org.openapitools.client.model.UnspentInputsResponse;
import org.openapitools.client.model.UpdateVaultAccountAssetAddressRequest;
import org.openapitools.client.model.UpdateVaultAccountRequest;
import org.openapitools.client.model.VaultAccount;
import org.openapitools.client.model.VaultAccountsPagedResponse;
import org.openapitools.client.model.VaultAsset;
import org.openapitools.client.model.VaultWalletAddress;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VaultsApi
 */
@Ignore
public class VaultsApiTest {

    private final VaultsApi api = new VaultsApi();

    /**
     * Activate a wallet in a vault account
     *
     * Initiates activation for a wallet in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateAssetForVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateVaultAssetResponse response = api.activateAssetForVaultAccount(vaultAccountId, assetId);

        // TODO: test validations
    }
    /**
     * Convert a segwit address to legacy format
     *
     * Converts an existing segwit address to the legacy format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLegacyAddressForVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        CreateAddressResponse response = api.createLegacyAddressForVaultAccountAsset(vaultAccountId, assetId, addressId);

        // TODO: test validations
    }
    /**
     * Create a new vault account
     *
     * Creates a new vault account with the requested name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVaultAccountTest() throws ApiException {
        CreateVaultAccountRequest createVaultAccountRequest = null;
        VaultAccount response = api.createVaultAccount(createVaultAccountRequest);

        // TODO: test validations
    }
    /**
     * Create a new wallet
     *
     * Creates a wallet for a specific asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateVaultAccountAssetRequest createVaultAccountAssetRequest = null;
        CreateVaultAssetResponse response = api.createVaultAccountAsset(vaultAccountId, assetId, createVaultAccountAssetRequest);

        // TODO: test validations
    }
    /**
     * Create new asset deposit address
     *
     * Creates a new deposit address for an asset of a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateVaultAccountAssetAddressRequest createVaultAccountAssetAddressRequest = null;
        CreateAddressResponse response = api.createVaultAccountAssetAddress(vaultAccountId, assetId, createVaultAccountAssetAddressRequest);

        // TODO: test validations
    }
    /**
     * List asset wallets (Paginated)
     *
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances. **Note:**   - This API endpoint is in limited availability and available for selected customers. If you would like to get early access to this endpoint, please reach out to [Fireblocks Support](https://support.fireblocks.io/hc/en-us/requests/new?ticket_form_id&#x3D;36000337220)   - This API call is subject to [rate limits](https://developers.fireblocks.com/reference/rate-limiting). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetWalletsTest() throws ApiException {
        BigDecimal totalAmountLargerThan = null;
        String assetId = null;
        String before = null;
        String after = null;
        BigDecimal limit = null;
        PaginatedAssetWalletResponse response = api.getAssetWallets(totalAmountLargerThan, assetId, before, after, limit);

        // TODO: test validations
    }
    /**
     * Get the maximum spendable amount in a single transaction.
     *
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMaxSpendableAmountTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        Boolean manualSignging = null;
        api.getMaxSpendableAmount(vaultAccountId, assetId, manualSignging);

        // TODO: test validations
    }
    /**
     * List vault acounts (Paginated)
     *
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagedVaultAccountsTest() throws ApiException {
        String namePrefix = null;
        String nameSuffix = null;
        BigDecimal minAmountThreshold = null;
        String assetId = null;
        BigDecimal maxBip44AddressIndexUsed = null;
        BigDecimal maxBip44ChangeAddressIndexUsed = null;
        String orderBy = null;
        String before = null;
        String after = null;
        BigDecimal limit = null;
        VaultAccountsPagedResponse response = api.getPagedVaultAccounts(namePrefix, nameSuffix, minAmountThreshold, assetId, maxBip44AddressIndexUsed, maxBip44ChangeAddressIndexUsed, orderBy, before, after, limit);

        // TODO: test validations
    }
    /**
     * Get the public key information
     *
     * Gets the public key information based on derivation path and signing algorithm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicKeyInfoTest() throws ApiException {
        String derivationPath = null;
        String algorithm = null;
        Boolean compressed = null;
        PublicKeyInformation response = api.getPublicKeyInfo(derivationPath, algorithm, compressed);

        // TODO: test validations
    }
    /**
     * Get the public key for a vault account
     *
     * Gets the public key information for the vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicKeyInfoForAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        BigDecimal change = null;
        BigDecimal addressIndex = null;
        Boolean compressed = null;
        PublicKeyInformation response = api.getPublicKeyInfoForAddress(vaultAccountId, assetId, change, addressIndex, compressed);

        // TODO: test validations
    }
    /**
     * Get the asset balance for a vault account
     *
     * Returns a wallet for a specific asset of a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        VaultAsset response = api.getVaultAccountAsset(vaultAccountId, assetId);

        // TODO: test validations
    }
    /**
     * Get asset addresses
     *
     * Lists all addresses for specific asset of vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountAssetAddressesTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        List<VaultWalletAddress> response = api.getVaultAccountAssetAddresses(vaultAccountId, assetId);

        // TODO: test validations
    }
    /**
     * Get UTXO unspent inputs information
     *
     * Returns unspent inputs information of an asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountAssetUnspentInputsTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        List<UnspentInputsResponse> response = api.getVaultAccountAssetUnspentInputs(vaultAccountId, assetId);

        // TODO: test validations
    }
    /**
     * Find a vault account by ID
     *
     * Returns the requested vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountByIdTest() throws ApiException {
        String vaultAccountId = null;
        VaultAccount response = api.getVaultAccountById(vaultAccountId);

        // TODO: test validations
    }
    /**
     * List vault accounts
     *
     * Gets all vault accounts in your workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountsTest() throws ApiException {
        String namePrefix = null;
        String nameSuffix = null;
        BigDecimal minAmountThreshold = null;
        String assetId = null;
        BigDecimal maxBip44AddressIndexUsed = null;
        BigDecimal maxBip44ChangeAddressIndexUsed = null;
        List<VaultAccount> response = api.getVaultAccounts(namePrefix, nameSuffix, minAmountThreshold, assetId, maxBip44AddressIndexUsed, maxBip44ChangeAddressIndexUsed);

        // TODO: test validations
    }
    /**
     * Get vault balance by asset
     *
     * Gets the vault balance summary for an asset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAssetByIdTest() throws ApiException {
        String assetId = null;
        VaultAsset response = api.getVaultAssetById(assetId);

        // TODO: test validations
    }
    /**
     * Get asset balance for chosen assets
     *
     * Gets the assets amount summary for all accounts or filtered accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAssetsTest() throws ApiException {
        String accountNamePrefix = null;
        String accountNameSuffix = null;
        List<VaultAsset> response = api.getVaultAssets(accountNamePrefix, accountNameSuffix);

        // TODO: test validations
    }
    /**
     * Hide a vault account in the console
     *
     * Hides the requested vault account from the web console view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hideVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        api.hideVaultAccount(vaultAccountId);

        // TODO: test validations
    }
    /**
     * Turn autofueling on or off
     *
     * Sets the autofueling property of the vault account to enabled or disabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAutoFuelForVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        SetAutoFuelForVaultAccountRequest setAutoFuelForVaultAccountRequest = null;
        api.setAutoFuelForVaultAccount(vaultAccountId, setAutoFuelForVaultAccountRequest);

        // TODO: test validations
    }
    /**
     * Set an AML/KYT customer reference ID for a vault account
     *
     * Assigns an AML/KYT customer reference ID for the vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setCustomerRefIdForVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        SetCustomerRefIdForVaultAccountRequest setCustomerRefIdForVaultAccountRequest = null;
        api.setCustomerRefIdForVaultAccount(vaultAccountId, setCustomerRefIdForVaultAccountRequest);

        // TODO: test validations
    }
    /**
     * Assign AML customer reference ID
     *
     * Sets an AML/KYT customer reference ID for a specific address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setCustomerRefIdForVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        SetCustomerRefIdForVaultAccountRequest setCustomerRefIdForVaultAccountRequest = null;
        api.setCustomerRefIdForVaultAccountAssetAddress(vaultAccountId, assetId, addressId, setCustomerRefIdForVaultAccountRequest);

        // TODO: test validations
    }
    /**
     * Unhide a vault account in the console
     *
     * Makes a hidden vault account visible in web console view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unhideVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        api.unhideVaultAccount(vaultAccountId);

        // TODO: test validations
    }
    /**
     * Rename a vault account
     *
     * Renames the requested vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        UpdateVaultAccountRequest updateVaultAccountRequest = null;
        api.updateVaultAccount(vaultAccountId, updateVaultAccountRequest);

        // TODO: test validations
    }
    /**
     * Update address description
     *
     * Updates the description of an existing address of an asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        UpdateVaultAccountAssetAddressRequest updateVaultAccountAssetAddressRequest = null;
        api.updateVaultAccountAssetAddress(vaultAccountId, assetId, addressId, updateVaultAccountAssetAddressRequest);

        // TODO: test validations
    }
    /**
     * Refresh asset balance data
     *
     * Updates the balance of a specific asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVaultAccountAssetBalanceTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        Object body = null;
        VaultAsset response = api.updateVaultAccountAssetBalance(vaultAccountId, assetId, body);

        // TODO: test validations
    }
}
