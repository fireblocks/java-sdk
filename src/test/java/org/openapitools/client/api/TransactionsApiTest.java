/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelTransactionResponse;
import org.openapitools.client.model.CreateTransactionResponse;
import org.openapitools.client.model.DropTransactionRequest;
import org.openapitools.client.model.DropTransactionResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.EstimatedNetworkFeeResponse;
import org.openapitools.client.model.EstimatedTransactionFeeResponse;
import org.openapitools.client.model.FreezeTransactionResponse;
import org.openapitools.client.model.SetConfirmationsThresholdRequest;
import org.openapitools.client.model.SetConfirmationsThresholdResponse;
import org.openapitools.client.model.TransactionRequest;
import org.openapitools.client.model.TransactionResponse;
import org.openapitools.client.model.UnfreezeTransactionResponse;
import org.openapitools.client.model.ValidateAddressResponse;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * Cancel a transaction
     *
     * Cancels a transaction by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelTransactionTest() throws ApiException {
        String txId = null;
        CancelTransactionResponse response = api.cancelTransaction(txId);

        // TODO: test validations
    }
    /**
     * Create a new transaction
     *
     * Creates a new transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransactionTest() throws ApiException {
        TransactionRequest transactionRequest = null;
        CreateTransactionResponse response = api.createTransaction(transactionRequest);

        // TODO: test validations
    }
    /**
     * Drop ETH transaction by ID
     *
     * Drops a stuck ETH transaction and creates a replacement transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dropTransactionTest() throws ApiException {
        String txId = null;
        DropTransactionRequest dropTransactionRequest = null;
        DropTransactionResponse response = api.dropTransaction(txId, dropTransactionRequest);

        // TODO: test validations
    }
    /**
     * Estimate the required fee for an asset
     *
     * Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void estimateNetworkFeeTest() throws ApiException {
        String assetId = null;
        EstimatedNetworkFeeResponse response = api.estimateNetworkFee(assetId);

        // TODO: test validations
    }
    /**
     * Estimate transaction fee
     *
     * Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void estimateTransactionFeeTest() throws ApiException {
        TransactionRequest transactionRequest = null;
        EstimatedTransactionFeeResponse response = api.estimateTransactionFee(transactionRequest);

        // TODO: test validations
    }
    /**
     * Freeze a transaction
     *
     * Freezes a transaction by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void freezeTransactionTest() throws ApiException {
        String txId = null;
        FreezeTransactionResponse response = api.freezeTransaction(txId);

        // TODO: test validations
    }
    /**
     * Find a specific transaction by external transaction ID
     *
     * Returns transaction by external transaction ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionByExternalIdTest() throws ApiException {
        String externalTxId = null;
        TransactionResponse response = api.getTransactionByExternalId(externalTxId);

        // TODO: test validations
    }
    /**
     * Find a specific transaction by Fireblocks transaction ID
     *
     * Returns a transaction by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionByIdTest() throws ApiException {
        String txId = null;
        TransactionResponse response = api.getTransactionById(txId);

        // TODO: test validations
    }
    /**
     * List transaction history
     *
     * Lists the transaction history for your workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        String before = null;
        String after = null;
        String status = null;
        String orderBy = null;
        String sort = null;
        Integer limit = null;
        String sourceType = null;
        String sourceId = null;
        String destType = null;
        String destId = null;
        String assets = null;
        String txHash = null;
        List<TransactionResponse> response = api.getTransactions(before, after, status, orderBy, sort, limit, sourceType, sourceId, destType, destId, assets, txHash);

        // TODO: test validations
    }
    /**
     * Set confirmation threshold by transaction ID
     *
     * Overrides the required number of confirmations for transaction completion by transaction ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setConfirmationThresholdForTransactionTest() throws ApiException {
        String txId = null;
        SetConfirmationsThresholdRequest setConfirmationsThresholdRequest = null;
        SetConfirmationsThresholdResponse response = api.setConfirmationThresholdForTransaction(txId, setConfirmationsThresholdRequest);

        // TODO: test validations
    }
    /**
     * Set confirmation threshold by transaction hash
     *
     * Overrides the required number of confirmations for transaction completion by transaction hash.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setConfirmationThresholdForTransactionByHashTest() throws ApiException {
        String txHash = null;
        SetConfirmationsThresholdRequest setConfirmationsThresholdRequest = null;
        SetConfirmationsThresholdResponse response = api.setConfirmationThresholdForTransactionByHash(txHash, setConfirmationsThresholdRequest);

        // TODO: test validations
    }
    /**
     * Unfreeze a transaction
     *
     * Unfreezes a transaction by ID and makes the transaction available again.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unfreezeTransactionTest() throws ApiException {
        String txId = null;
        UnfreezeTransactionResponse response = api.unfreezeTransaction(txId);

        // TODO: test validations
    }
    /**
     * Validate destination address
     *
     * Checks if an address is valid (for XRP, DOT, XLM, and EOS).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateAddressTest() throws ApiException {
        String assetId = null;
        String address = null;
        ValidateAddressResponse response = api.validateAddress(assetId, address);

        // TODO: test validations
    }
}
