/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.ChainDescriptor;
import com.fireblocks.sdk.model.ChainInfoResponse;
import com.fireblocks.sdk.model.ClaimRewardsRequest;
import com.fireblocks.sdk.model.Delegation;
import com.fireblocks.sdk.model.DelegationSummary;
import com.fireblocks.sdk.model.MergeStakeAccountsRequest;
import com.fireblocks.sdk.model.MergeStakeAccountsResponse;
import com.fireblocks.sdk.model.Provider;
import com.fireblocks.sdk.model.SplitRequest;
import com.fireblocks.sdk.model.SplitResponse;
import com.fireblocks.sdk.model.StakeRequest;
import com.fireblocks.sdk.model.StakeResponse;
import com.fireblocks.sdk.model.StakingProvider;
import com.fireblocks.sdk.model.UnstakeRequest;
import com.fireblocks.sdk.model.WithdrawRequest;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for StakingApi */
@Ignore
public class StakingApiTest {

    private final StakingApi api = new StakingApi();

    /**
     * Approve staking terms of service
     *
     * <p>Approve the terms of service of the staking provider. This must be called before
     * performing a staking action for the first time with this provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveTermsOfServiceByProviderIdTest() throws ApiException {
        StakingProvider providerId = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.approveTermsOfServiceByProviderId(providerId, idempotencyKey);
    }

    /**
     * Execute a Claim Rewards operation
     *
     * <p>Perform a chain-specific Claim Rewards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimRewardsTest() throws ApiException {
        ClaimRewardsRequest claimRewardsRequest = null;
        String chainDescriptor = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.claimRewards(claimRewardsRequest, chainDescriptor, idempotencyKey);
    }

    /**
     * List staking positions details
     *
     * <p>Return detailed information on all staking positions, including the staked amount,
     * rewards, status and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllDelegationsTest() throws ApiException {
        ChainDescriptor chainDescriptor = null;
        CompletableFuture<ApiResponse<List<Delegation>>> response =
                api.getAllDelegations(chainDescriptor);
    }

    /**
     * Get chain-specific staking summary
     *
     * <p>Return chain-specific, staking-related information summary (e.g. epoch details, lockup
     * durations, estimated rewards, etc.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChainInfoTest() throws ApiException {
        ChainDescriptor chainDescriptor = null;
        CompletableFuture<ApiResponse<ChainInfoResponse>> response =
                api.getChainInfo(chainDescriptor);
    }

    /**
     * List staking supported chains
     *
     * <p>Return an alphabetical list of supported chains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChainsTest() throws ApiException {
        CompletableFuture<ApiResponse<List<ChainDescriptor>>> response = api.getChains();
    }

    /**
     * Get staking position details
     *
     * <p>Return detailed information on a staking position, including the staked amount, rewards,
     * status and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDelegationByIdTest() throws ApiException {
        String id = null;
        CompletableFuture<ApiResponse<Delegation>> response = api.getDelegationById(id);
    }

    /**
     * List staking providers details
     *
     * <p>Return information on all the available staking providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        CompletableFuture<ApiResponse<List<Provider>>> response = api.getProviders();
    }

    /**
     * Get staking summary details
     *
     * <p>Return a summary of all vaults, categorized by their status (active, inactive), the total
     * amounts staked and total rewards per-chain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSummaryTest() throws ApiException {
        CompletableFuture<ApiResponse<DelegationSummary>> response = api.getSummary();
    }

    /**
     * Get staking summary details by vault
     *
     * <p>Return a summary for each vault, categorized by their status (active, inactive), the total
     * amounts staked and total rewards per-chain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSummaryByVaultTest() throws ApiException {
        CompletableFuture<ApiResponse<Map<String, DelegationSummary>>> response =
                api.getSummaryByVault();
    }

    /**
     * Execute a Merge operation on SOL/SOL_TEST stake accounts
     *
     * <p>Perform a Solana Merge of two active stake accounts into one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeStakeAccountsTest() throws ApiException {
        MergeStakeAccountsRequest mergeStakeAccountsRequest = null;
        String chainDescriptor = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<MergeStakeAccountsResponse>> response =
                api.mergeStakeAccounts(mergeStakeAccountsRequest, chainDescriptor, idempotencyKey);
    }

    /**
     * Execute a Split operation on SOL/SOL_TEST stake account
     *
     * <p>Perform a Solana Split stake account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitTest() throws ApiException {
        SplitRequest splitRequest = null;
        String chainDescriptor = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<SplitResponse>> response =
                api.split(splitRequest, chainDescriptor, idempotencyKey);
    }

    /**
     * Initiate Stake Operation
     *
     * <p>Perform a chain-specific Stake.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stakeTest() throws ApiException {
        StakeRequest stakeRequest = null;
        ChainDescriptor chainDescriptor = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<StakeResponse>> response =
                api.stake(stakeRequest, chainDescriptor, idempotencyKey);
    }

    /**
     * Execute an Unstake operation
     *
     * <p>Execute an Unstake operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unstakeTest() throws ApiException {
        UnstakeRequest unstakeRequest = null;
        ChainDescriptor chainDescriptor = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.unstake(unstakeRequest, chainDescriptor, idempotencyKey);
    }

    /**
     * Execute a Withdraw operation
     *
     * <p>Perform a chain-specific Withdraw.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void withdrawTest() throws ApiException {
        WithdrawRequest withdrawRequest = null;
        ChainDescriptor chainDescriptor = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.withdraw(withdrawRequest, chainDescriptor, idempotencyKey);
    }
}
