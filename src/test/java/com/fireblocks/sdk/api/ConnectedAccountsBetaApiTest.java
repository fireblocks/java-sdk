/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.ConnectedAccountBalancesResponse;
import com.fireblocks.sdk.model.ConnectedAccountRateResponse;
import com.fireblocks.sdk.model.ConnectedAccountTradingPairsResponse;
import com.fireblocks.sdk.model.ConnectedAccountsResponse;
import com.fireblocks.sdk.model.ConnectedSingleAccountResponse;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for ConnectedAccountsBetaApi */
@Ignore
public class ConnectedAccountsBetaApiTest {

    private final ConnectedAccountsBetaApi api = new ConnectedAccountsBetaApi();

    /**
     * Get connected account
     *
     * <p>Retrieve detailed information about a specific connected account by ID. &lt;/br&gt;
     * **Note**: - This endpoint is currently in beta and might be subject to changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectedAccountTest() throws ApiException {
        String accountId = null;
        CompletableFuture<ApiResponse<ConnectedSingleAccountResponse>> response =
                api.getConnectedAccount(accountId);
    }

    /**
     * Get balances for an account
     *
     * <p>Retrieve current asset balances for a specific connected account as a flat list (one row
     * per assetId, balanceType) &lt;/br&gt; **Note**: - This endpoint is currently in beta and
     * might be subject to changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectedAccountBalancesTest() throws ApiException {
        String accountId = null;
        Integer pageSize = null;
        String pageCursor = null;
        CompletableFuture<ApiResponse<ConnectedAccountBalancesResponse>> response =
                api.getConnectedAccountBalances(accountId, pageSize, pageCursor);
    }

    /**
     * Get exchange rates for an account
     *
     * <p>Retrieve current exchange rates for converting between specific assets in a connected
     * account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectedAccountRatesTest() throws ApiException {
        String accountId = null;
        String baseAssetId = null;
        String quoteAssetId = null;
        CompletableFuture<ApiResponse<ConnectedAccountRateResponse>> response =
                api.getConnectedAccountRates(accountId, baseAssetId, quoteAssetId);
    }

    /**
     * Get supported trading pairs for an account
     *
     * <p>Retrieve all asset trading pairs supported by a specific connected account, including the
     * pair type (quote, market, onOffRamp).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectedAccountTradingPairsTest() throws ApiException {
        String accountId = null;
        Integer pageSize = null;
        String pageCursor = null;
        CompletableFuture<ApiResponse<ConnectedAccountTradingPairsResponse>> response =
                api.getConnectedAccountTradingPairs(accountId, pageSize, pageCursor);
    }

    /**
     * Get connected accounts
     *
     * <p>Returns all connected accounts &lt;/br&gt; **Note**: - This endpoint is currently in beta
     * and might be subject to changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectedAccountsTest() throws ApiException {
        Boolean mainAccounts = null;
        Integer pageSize = null;
        String pageCursor = null;
        CompletableFuture<ApiResponse<ConnectedAccountsResponse>> response =
                api.getConnectedAccounts(mainAccounts, pageSize, pageCursor);
    }
}
