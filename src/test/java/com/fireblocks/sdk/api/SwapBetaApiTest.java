/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.QuoteRequest;
import com.fireblocks.sdk.model.QuoteResponse;
import com.fireblocks.sdk.model.SwapOperation;
import com.fireblocks.sdk.model.SwapOperationRequest;
import com.fireblocks.sdk.model.SwapOperationsPaginatedResponse;
import com.fireblocks.sdk.model.SwapProvider;
import com.fireblocks.sdk.model.SwapProvidersPaginatedResponse;
import java.math.BigDecimal;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for SwapBetaApi */
@Ignore
public class SwapBetaApiTest {

    private final SwapBetaApi api = new SwapBetaApi();

    /**
     * Approve terms of service
     *
     * <p>Approve the terms of service for a swap provider. Some providers require this approval
     * before performing a swap action for the first time. Note: These endpoints are currently in
     * beta and might be subject to changes. If you want to participate and learn more about the
     * Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email
     * to CSM@fireblocks.com. Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveTermsOfServiceTest() throws ApiException {
        String providerId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<SwapProvider>> response =
                api.approveTermsOfService(providerId, idempotencyKey);
    }

    /**
     * Create a quote
     *
     * <p>Create a quote from specific swap provider. Note: These endpoints are currently in beta
     * and might be subject to changes. If you want to participate and learn more about the
     * Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email
     * to CSM@fireblocks.com. Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer,
     * Approver, Editor, Viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuoteTest() throws ApiException {
        QuoteRequest quoteRequest = null;
        String providerId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<QuoteResponse>> response =
                api.createQuote(quoteRequest, providerId, idempotencyKey);
    }

    /**
     * Create swap operation
     *
     * <p>Create swap operation based on a provided quote Id Note: These endpoints are currently in
     * beta and might be subject to changes. If you want to participate and learn more about the
     * Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email
     * to CSM@fireblocks.com. Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSwapOperationTest() throws ApiException {
        SwapOperationRequest swapOperationRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<SwapOperation>> response =
                api.createSwapOperation(swapOperationRequest, idempotencyKey);
    }

    /**
     * Get operation details
     *
     * <p>Get swap operation Details by ID. Note:These endpoints are currently in beta and might be
     * subject to changes. If you want to participate and learn more about the Fireblocks Swap,
     * please contact your Fireblocks Customer Success Manager or send an email
     * to CSM@fireblocks.com. Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer,
     * Approver, Editor, Viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwapOperationByIdTest() throws ApiException {
        String operationId = null;
        CompletableFuture<ApiResponse<SwapOperation>> response =
                api.getSwapOperationById(operationId);
    }

    /**
     * Get Operations list
     *
     * <p>Return a list of swap operations for the specific workspace The operations are sorted by
     * creation date in descending order, meaning the most recent operation appears first.
     * Note:These endpoints are currently in beta and might be subject to changes. If you want to
     * participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer
     * Success Manager or send an email to CSM@fireblocks.com. Endpoint Permission: Owner, Admin,
     * Non-Signing Admin, Signer, Approver, Editor, Viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwapOperationsTest() throws ApiException {
        String pageCursor = null;
        BigDecimal pageSize = null;
        CompletableFuture<ApiResponse<SwapOperationsPaginatedResponse>> response =
                api.getSwapOperations(pageCursor, pageSize);
    }

    /**
     * Get Providers List
     *
     * <p>Return a list of all supported swap providers. Note: These endpoints are currently in beta
     * and might be subject to changes. If you want to participate and learn more about the
     * Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email
     * to CSM@fireblocks.com. Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer,
     * Approver, Editor, Viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwapProvidersTest() throws ApiException {
        String pageCursor = null;
        BigDecimal pageSize = null;
        CompletableFuture<ApiResponse<SwapProvidersPaginatedResponse>> response =
                api.getSwapProviders(pageCursor, pageSize);
    }
}
