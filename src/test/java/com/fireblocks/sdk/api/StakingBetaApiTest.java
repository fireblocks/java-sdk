/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.model.ChainInfoResponseDto;
import com.fireblocks.sdk.model.DelegationDto;
import com.fireblocks.sdk.model.DelegationSummaryDto;
import com.fireblocks.sdk.model.ExecuteActionRequest;
import com.fireblocks.sdk.model.ExecuteActionResponse;
import com.fireblocks.sdk.model.ProviderDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for StakingBetaApi
 */
@Ignore
public class StakingBetaApiTest {

    private final StakingBetaApi api = new StakingBetaApi();

    
    /**
     * 
     *
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void approveTermsOfServiceByProviderIdTest() throws ApiException {
        String providerId = null;
        String idempotencyKey = null;
        CompletableFuture<Object> response = 
        api.approveTermsOfServiceByProviderId(providerId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Perform a chain-specific staking action (e.g. stake, unstake, withdraw).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeActionTest() throws ApiException {
        ExecuteActionRequest executeActionRequest = null;
        String chainDescriptor = null;
        String actionId = null;
        String idempotencyKey = null;
        CompletableFuture<ExecuteActionResponse> response = 
        api.executeAction(executeActionRequest, chainDescriptor, actionId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDelegationsTest() throws ApiException {
        String chainDescriptor = null;
        CompletableFuture<List<DelegationDto>> response = 
        api.getAllDelegations(chainDescriptor);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChainInfoTest() throws ApiException {
        String chainDescriptor = null;
        CompletableFuture<ChainInfoResponseDto> response = 
        api.getChainInfo(chainDescriptor);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return an alphabetical list of supported chains.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChainsTest() throws ApiException {
        CompletableFuture<List<String>> response = 
        api.getChains();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDelegationByIdTest() throws ApiException {
        String id = null;
        CompletableFuture<DelegationDto> response = 
        api.getDelegationById(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return information on all the available staking providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        CompletableFuture<List<ProviderDto>> response = 
        api.getProviders();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSummaryTest() throws ApiException {
        CompletableFuture<DelegationSummaryDto> response = 
        api.getSummary();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSummaryByVaultTest() throws ApiException {
        CompletableFuture<Map<String, DelegationSummaryDto>> response = 
        api.getSummaryByVault();
        
        // TODO: test validations
    }
    
}
