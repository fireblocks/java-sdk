/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.CreateConnectionRequest;
import com.fireblocks.sdk.model.CreateConnectionResponse;
import com.fireblocks.sdk.model.GetConnectionsResponse;
import com.fireblocks.sdk.model.GetFilterParameter;
import com.fireblocks.sdk.model.RespondToConnectionRequest;
import java.math.BigDecimal;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for Web3ConnectionsApi */
@Ignore
public class Web3ConnectionsApiTest {

    private final Web3ConnectionsApi api = new Web3ConnectionsApi();

    /**
     * Create a new Web3 connection.
     *
     * <p>Initiate a new Web3 connection. * Note: After this succeeds, make a request to &#x60;PUT
     * /v1/connections/wc/{id}&#x60; (below) to approve or reject the new Web3 connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        CreateConnectionRequest createConnectionRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<CreateConnectionResponse>> response =
                api.create(createConnectionRequest, idempotencyKey);
    }

    /**
     * List all open Web3 connections.
     *
     * <p>Get open Web3 connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String order = null;
        GetFilterParameter filter = null;
        String sort = null;
        BigDecimal pageSize = null;
        String next = null;
        CompletableFuture<ApiResponse<GetConnectionsResponse>> response =
                api.get(order, filter, sort, pageSize, next);
    }

    /**
     * Remove an existing Web3 connection.
     *
     * <p>Remove a Web3 connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTest() throws ApiException {
        String id = null;

        CompletableFuture<ApiResponse<Void>> response = api.remove(id);
    }

    /**
     * Respond to a pending Web3 connection request.
     *
     * <p>Submit a response to *approve* or *reject* an initiated Web3 connection. * Note: This call
     * is used to complete your &#x60;POST /v1/connections/wc/&#x60; request. After this succeeds,
     * your new Web3 connection is created and functioning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitTest() throws ApiException {
        RespondToConnectionRequest respondToConnectionRequest = null;
        String id = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.submit(respondToConnectionRequest, id, idempotencyKey);
    }
}
