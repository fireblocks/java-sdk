/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.model.AddCollateralRequestBody;
import com.fireblocks.sdk.model.CreateTransactionResponse;
import com.fireblocks.sdk.model.ErrorSchema;
import com.fireblocks.sdk.model.ExchangeAccount;
import com.fireblocks.sdk.model.ExchangeSettlementTransactionsResponse;
import com.fireblocks.sdk.model.RemoveCollateralRequestBody;
import com.fireblocks.sdk.model.SettlementRequestBody;
import com.fireblocks.sdk.model.SettlementResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for OffExchangesApi
 */
@Ignore
public class OffExchangesApiTest {

    private final OffExchangesApi api = new OffExchangesApi();

    
    /**
     * add collateral
     *
     * add collateral, create deposit request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOffExchangeTest() throws ApiException {
        AddCollateralRequestBody addCollateralRequestBody = null;
        String idempotencyKey = null;
        CompletableFuture<CreateTransactionResponse> response = 
        api.addOffExchange(addCollateralRequestBody, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Find a specific collateral exchange account
     *
     * Returns a collateral account by mainExchangeAccountId.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOffExchangeCollateralAccountsTest() throws ApiException {
        String mainExchangeAccountId = null;
        CompletableFuture<ExchangeAccount> response = 
        api.getOffExchangeCollateralAccounts(mainExchangeAccountId);
        
        // TODO: test validations
    }
    
    /**
     * get settlements transactions from exchange
     *
     * get settlements transactions from exchange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOffExchangeSettlementTransactionsTest() throws ApiException {
        String mainExchangeAccountId = null;
        CompletableFuture<ExchangeSettlementTransactionsResponse> response = 
        api.getOffExchangeSettlementTransactions(mainExchangeAccountId);
        
        // TODO: test validations
    }
    
    /**
     * remove collateral
     *
     * remove collateral, create withdraw request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeOffExchangeTest() throws ApiException {
        RemoveCollateralRequestBody removeCollateralRequestBody = null;
        String idempotencyKey = null;
        CompletableFuture<CreateTransactionResponse> response = 
        api.removeOffExchange(removeCollateralRequestBody, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * create settlement for a trader
     *
     * create settlement for a trader
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settleOffExchangeTradesTest() throws ApiException {
        SettlementRequestBody settlementRequestBody = null;
        String idempotencyKey = null;
        CompletableFuture<SettlementResponse> response = 
        api.settleOffExchangeTrades(settlementRequestBody, idempotencyKey);
        
        // TODO: test validations
    }
    
}
