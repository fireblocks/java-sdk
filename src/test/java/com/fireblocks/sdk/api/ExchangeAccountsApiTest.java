/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.AddExchangeAccountRequest;
import com.fireblocks.sdk.model.AddExchangeAccountResponse;
import com.fireblocks.sdk.model.ConvertAssetsRequest;
import com.fireblocks.sdk.model.ConvertAssetsResponse;
import com.fireblocks.sdk.model.CreateInternalTransferRequest;
import com.fireblocks.sdk.model.ExchangeAccount;
import com.fireblocks.sdk.model.ExchangeAccountsPaged;
import com.fireblocks.sdk.model.ExchangeAsset;
import com.fireblocks.sdk.model.GetExchangeAccountsCredentialsPublicKeyResponse;
import com.fireblocks.sdk.model.InternalTransferResponse;
import java.math.BigDecimal;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for ExchangeAccountsApi */
@Ignore
public class ExchangeAccountsApiTest {

    private final ExchangeAccountsApi api = new ExchangeAccountsApi();

    /**
     * Add an exchange account
     *
     * <p>Add an exchange account to exchanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addExchangeAccountTest() throws ApiException {
        AddExchangeAccountRequest addExchangeAccountRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<AddExchangeAccountResponse>> response =
                api.addExchangeAccount(addExchangeAccountRequest, idempotencyKey);
    }

    /**
     * Convert exchange account funds from the source asset to the destination asset.
     *
     * <p>Convert exchange account funds from the source asset to the destination asset. Coinbase
     * (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertAssetsTest() throws ApiException {
        String exchangeAccountId = null;
        ConvertAssetsRequest convertAssetsRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<ConvertAssetsResponse>> response =
                api.convertAssets(exchangeAccountId, convertAssetsRequest, idempotencyKey);
    }

    /**
     * Find a specific exchange account
     *
     * <p>Returns an exchange account by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExchangeAccountTest() throws ApiException {
        String exchangeAccountId = null;
        CompletableFuture<ApiResponse<ExchangeAccount>> response =
                api.getExchangeAccount(exchangeAccountId);
    }

    /**
     * Find an asset for an exchange account
     *
     * <p>Returns an asset for an exchange account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExchangeAccountAssetTest() throws ApiException {
        String exchangeAccountId = null;
        String assetId = null;
        CompletableFuture<ApiResponse<ExchangeAsset>> response =
                api.getExchangeAccountAsset(exchangeAccountId, assetId);
    }

    /**
     * Get public key to encrypt exchange credentials
     *
     * <p>Return public key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExchangeAccountsCredentialsPublicKeyTest() throws ApiException {
        CompletableFuture<ApiResponse<GetExchangeAccountsCredentialsPublicKeyResponse>> response =
                api.getExchangeAccountsCredentialsPublicKey();
    }

    /**
     * Pagination list exchange accounts
     *
     * <p>Returns a page include exchange accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagedExchangeAccountsTest() throws ApiException {
        BigDecimal limit = null;
        String before = null;
        String after = null;
        CompletableFuture<ApiResponse<List<ExchangeAccountsPaged>>> response =
                api.getPagedExchangeAccounts(limit, before, after);
    }

    /**
     * Internal transfer for exchange accounts
     *
     * <p>Transfers funds between trading accounts under the same exchange account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void internalTransferTest() throws ApiException {
        String exchangeAccountId = null;
        CreateInternalTransferRequest createInternalTransferRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<InternalTransferResponse>> response =
                api.internalTransfer(
                        exchangeAccountId, createInternalTransferRequest, idempotencyKey);
    }
}
