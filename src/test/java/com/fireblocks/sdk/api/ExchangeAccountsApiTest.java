/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import java.math.BigDecimal;
import com.fireblocks.sdk.model.ConvertAssetsRequest;
import com.fireblocks.sdk.model.CreateInternalTransferRequest;
import com.fireblocks.sdk.model.ErrorSchema;
import com.fireblocks.sdk.model.ExchangeAccount;
import com.fireblocks.sdk.model.ExchangeAccountsPaged;
import com.fireblocks.sdk.model.ExchangeAsset;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for ExchangeAccountsApi
 */
@Ignore
public class ExchangeAccountsApiTest {

    private final ExchangeAccountsApi api = new ExchangeAccountsApi();

    
    /**
     * Convert exchange account funds from the source asset to the destination asset.
     *
     * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAssetsTest() throws ApiException {
        String exchangeAccountId = null;
        ConvertAssetsRequest convertAssetsRequest = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.convertAssets(exchangeAccountId, convertAssetsRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Find a specific exchange account
     *
     * Returns an exchange account by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeAccountTest() throws ApiException {
        String exchangeAccountId = null;
        CompletableFuture<ExchangeAccount> response = 
        api.getExchangeAccount(exchangeAccountId);
        
        // TODO: test validations
    }
    
    /**
     * Find an asset for an exchange account
     *
     * Returns an asset for an exchange account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeAccountAssetTest() throws ApiException {
        String exchangeAccountId = null;
        String assetId = null;
        CompletableFuture<ExchangeAsset> response = 
        api.getExchangeAccountAsset(exchangeAccountId, assetId);
        
        // TODO: test validations
    }
    
    /**
     * List exchange accounts
     *
     * Deprecated (use new &#39;paged&#39; endpoint) - Returns all exchange accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeAccountsTest() throws ApiException {
        CompletableFuture<List<ExchangeAccount>> response = 
        api.getExchangeAccounts();
        
        // TODO: test validations
    }
    
    /**
     * Pagination list exchange accounts
     *
     * Returns a page include exchange accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagedExchangeAccountsTest() throws ApiException {
        BigDecimal limit = null;
        String before = null;
        String after = null;
        CompletableFuture<List<ExchangeAccountsPaged>> response = 
        api.getPagedExchangeAccounts(limit, before, after);
        
        // TODO: test validations
    }
    
    /**
     * Internal transfer for exchange accounts
     *
     * Transfers funds between trading accounts under the same exchange account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalTransferTest() throws ApiException {
        String exchangeAccountId = null;
        CreateInternalTransferRequest createInternalTransferRequest = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.internalTransfer(exchangeAccountId, createInternalTransferRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
}
