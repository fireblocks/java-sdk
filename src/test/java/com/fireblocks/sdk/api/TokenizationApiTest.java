/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.AssetAlreadyExistHttpError;
import com.fireblocks.sdk.model.AssetDoesNotExistHttpError;
import java.math.BigDecimal;
import com.fireblocks.sdk.model.CreateTokenRequestDto;
import com.fireblocks.sdk.model.ErrorSchema;
import com.fireblocks.sdk.model.NotFoundException;
import com.fireblocks.sdk.model.TokenLinkDto;
import com.fireblocks.sdk.model.TokenLinkExistsHttpError;
import com.fireblocks.sdk.model.TokenLinkRequestDto;
import com.fireblocks.sdk.model.TokensPaginatedResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for TokenizationApi
 */
@Ignore
public class TokenizationApiTest {

    private final TokenizationApi api = new TokenizationApi();

    
    /**
     * Return a linked token
     *
     * Return a linked token, with its status and metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkedTokenTest() throws ApiException {
        String id = null;
        CompletableFuture<ApiResponse<TokenLinkDto>> response = 
        api.getLinkedToken(id);
        
    }
    
    /**
     * List all linked tokens
     *
     * Return all linked tokens (paginated)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkedTokensTest() throws ApiException {
        String pageCursor = null;
        BigDecimal pageSize = null;
        Object status = null;
        CompletableFuture<ApiResponse<TokensPaginatedResponse>> response = 
        api.getLinkedTokens(pageCursor, pageSize, status);
        
    }
    
    /**
     * Issue a new token
     *
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \&quot;PENDING\&quot; until the token is deployed or \&quot;SUCCESS\&quot; if no deployment is needed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueNewTokenTest() throws ApiException {
        CreateTokenRequestDto createTokenRequestDto = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<TokenLinkDto>> response = 
        api.issueNewToken(createTokenRequestDto, idempotencyKey);
        
    }
    
    /**
     * Link a token
     *
     * Link an already existing token (by assetId, collectionId or contractId as refId) to a workspace across EVM, Stellar, or Ripple platforms. The token will be linked to the workspace if it does not already exist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linkTest() throws ApiException {
        TokenLinkRequestDto tokenLinkRequestDto = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<TokenLinkDto>> response = 
        api.link(tokenLinkRequestDto, idempotencyKey);
        
    }
    
    /**
     * Unlink a token
     *
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unlinkTest() throws ApiException {
        String id = null;
        
        CompletableFuture<ApiResponse<Void>> response = api.unlink(id);
        
    }
    
}
