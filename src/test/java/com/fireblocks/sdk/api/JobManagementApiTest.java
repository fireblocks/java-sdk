/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.Job;
import com.fireblocks.sdk.model.Task;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for JobManagementApi */
@Ignore
public class JobManagementApiTest {

    private final JobManagementApi api = new JobManagementApi();

    /**
     * Cancel a running job
     *
     * <p>Stop the given job immediately. If the job is in the &#39;Active&#39; state, the job will
     * be canceled after completing the current task. Vault accounts and Wallets that are already
     * created will not be affected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelJobTest() throws ApiException {
        String jobId = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response = api.cancelJob(jobId, idempotencyKey);
    }

    /**
     * Continue a paused job
     *
     * <p>Continue the given paused job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void continueJobTest() throws ApiException {
        String jobId = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response = api.continueJob(jobId, idempotencyKey);
    }

    /**
     * Get job details
     *
     * <p>Get an object describing the given job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobId = null;
        CompletableFuture<ApiResponse<Job>> response = api.getJob(jobId);
    }

    /**
     * Return a list of tasks for given job
     *
     * <p>Return a list of tasks for given job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTasksTest() throws ApiException {
        String jobId = null;
        CompletableFuture<ApiResponse<List<Task>>> response = api.getJobTasks(jobId);
    }

    /**
     * Return a list of jobs belonging to tenant
     *
     * <p>Get an array of objects including all active, paused, canceled, and complete jobs in a
     * workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        Integer fromTime = null;
        Integer toTime = null;
        CompletableFuture<ApiResponse<List<Job>>> response = api.getJobs(fromTime, toTime);
    }

    /**
     * Pause a job
     *
     * <p>Pause the given job, after the current task is done. A paused job can later be resumed by
     * calling &#39;continue&#39;, or canceled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseJobTest() throws ApiException {
        String jobId = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response = api.pauseJob(jobId, idempotencyKey);
    }
}
