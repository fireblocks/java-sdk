/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.model.AddContractAssetRequest;
import com.fireblocks.sdk.model.CreateContractRequest;
import com.fireblocks.sdk.model.ErrorSchema;
import com.fireblocks.sdk.model.ExternalWalletAsset;
import com.fireblocks.sdk.model.UnmanagedWallet;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for ContractsApi
 */
@Ignore
public class ContractsApiTest {

    private final ContractsApi api = new ContractsApi();

    
    /**
     * Add an asset to a contract
     *
     * Adds an asset to an existing contract.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContractAssetTest() throws ApiException {
        String contractId = null;
        String assetId = null;
        AddContractAssetRequest addContractAssetRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ExternalWalletAsset> response = 
        api.addContractAsset(contractId, assetId, addContractAssetRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Create a contract
     *
     * Creates a new contract.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContractTest() throws ApiException {
        CreateContractRequest createContractRequest = null;
        String idempotencyKey = null;
        CompletableFuture<UnmanagedWallet> response = 
        api.createContract(createContractRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Delete a contract
     *
     * Deletes a contract by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContractTest() throws ApiException {
        String contractId = null;
        
        CompletableFuture<Void> response = api.deleteContract(contractId);
        
        // TODO: test validations
    }
    
    /**
     * Delete a contract asset
     *
     * Deletes a contract asset by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContractAssetTest() throws ApiException {
        String contractId = null;
        String assetId = null;
        
        CompletableFuture<Void> response = api.deleteContractAsset(contractId, assetId);
        
        // TODO: test validations
    }
    
    /**
     * Find a specific contract
     *
     * Returns a contract by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractTest() throws ApiException {
        String contractId = null;
        CompletableFuture<UnmanagedWallet> response = 
        api.getContract(contractId);
        
        // TODO: test validations
    }
    
    /**
     * Find a contract asset
     *
     * Returns a contract asset by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractAssetTest() throws ApiException {
        String contractId = null;
        String assetId = null;
        CompletableFuture<ExternalWalletAsset> response = 
        api.getContractAsset(contractId, assetId);
        
        // TODO: test validations
    }
    
    /**
     * List contracts
     *
     * Gets a list of contracts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractsTest() throws ApiException {
        CompletableFuture<List<UnmanagedWallet>> response = 
        api.getContracts();
        
        // TODO: test validations
    }
    
}
