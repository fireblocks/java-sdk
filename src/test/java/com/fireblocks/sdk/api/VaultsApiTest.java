/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import java.math.BigDecimal;
import com.fireblocks.sdk.model.CreateAddressRequest;
import com.fireblocks.sdk.model.CreateAddressResponse;
import com.fireblocks.sdk.model.CreateAssetsRequest;
import com.fireblocks.sdk.model.CreateMultipleAccountsRequest;
import com.fireblocks.sdk.model.CreateVaultAccountRequest;
import com.fireblocks.sdk.model.CreateVaultAssetResponse;
import com.fireblocks.sdk.model.ErrorSchema;
import com.fireblocks.sdk.model.JobCreated;
import com.fireblocks.sdk.model.PaginatedAddressResponse;
import com.fireblocks.sdk.model.PaginatedAssetWalletResponse;
import com.fireblocks.sdk.model.PublicKeyInformation;
import com.fireblocks.sdk.model.SetAutoFuelRequest;
import com.fireblocks.sdk.model.SetCustomerRefIdForAddressRequest;
import com.fireblocks.sdk.model.SetCustomerRefIdRequest;
import com.fireblocks.sdk.model.UnspentInputsResponse;
import com.fireblocks.sdk.model.UpdateVaultAccountAssetAddressRequest;
import com.fireblocks.sdk.model.UpdateVaultAccountRequest;
import com.fireblocks.sdk.model.VaultAccount;
import com.fireblocks.sdk.model.VaultAccountsPagedResponse;
import com.fireblocks.sdk.model.VaultAsset;
import com.fireblocks.sdk.model.VaultWalletAddress;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for VaultsApi
 */
@Ignore
public class VaultsApiTest {

    private final VaultsApi api = new VaultsApi();

    
    /**
     * Activate a wallet in a vault account
     *
     * Initiates activation for a wallet in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateAssetForVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String idempotencyKey = null;
        CompletableFuture<CreateVaultAssetResponse> response = 
        api.activateAssetForVaultAccount(vaultAccountId, assetId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Convert a segwit address to legacy format
     *
     * Converts an existing segwit address to the legacy format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLegacyAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        String idempotencyKey = null;
        CompletableFuture<CreateAddressResponse> response = 
        api.createLegacyAddress(vaultAccountId, assetId, addressId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Bulk creation of new vault accounts
     *
     * Create multiple vault accounts by running an async job. &lt;/br&gt; **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit accounts to 10k per operation and 200k per customer during beta testing. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMultipleAccountsTest() throws ApiException {
        CreateMultipleAccountsRequest createMultipleAccountsRequest = null;
        String idempotencyKey = null;
        CompletableFuture<JobCreated> response = 
        api.createMultipleAccounts(createMultipleAccountsRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Create a new vault account
     *
     * Creates a new vault account with the requested name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVaultAccountTest() throws ApiException {
        CreateVaultAccountRequest createVaultAccountRequest = null;
        String idempotencyKey = null;
        CompletableFuture<VaultAccount> response = 
        api.createVaultAccount(createVaultAccountRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Create a new wallet
     *
     * Creates a wallet for a specific asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateAssetsRequest createAssetsRequest = null;
        String idempotencyKey = null;
        CompletableFuture<CreateVaultAssetResponse> response = 
        api.createVaultAccountAsset(vaultAccountId, assetId, createAssetsRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Create new asset deposit address
     *
     * Creates a new deposit address for an asset of a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateAddressRequest createAddressRequest = null;
        String idempotencyKey = null;
        CompletableFuture<CreateAddressResponse> response = 
        api.createVaultAccountAssetAddress(vaultAccountId, assetId, createAddressRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * List asset wallets (Paginated)
     *
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetWalletsTest() throws ApiException {
        BigDecimal totalAmountLargerThan = null;
        String assetId = null;
        String orderBy = null;
        String before = null;
        String after = null;
        BigDecimal limit = null;
        CompletableFuture<PaginatedAssetWalletResponse> response = 
        api.getAssetWallets(totalAmountLargerThan, assetId, orderBy, before, after, limit);
        
        // TODO: test validations
    }
    
    /**
     * Get the maximum spendable amount in a single transaction.
     *
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMaxSpendableAmountTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        Boolean manualSignging = null;
        
        CompletableFuture<Void> response = api.getMaxSpendableAmount(vaultAccountId, assetId, manualSignging);
        
        // TODO: test validations
    }
    
    /**
     * List vault accounts (Paginated)
     *
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagedVaultAccountsTest() throws ApiException {
        String namePrefix = null;
        String nameSuffix = null;
        BigDecimal minAmountThreshold = null;
        String assetId = null;
        String orderBy = null;
        String before = null;
        String after = null;
        BigDecimal limit = null;
        CompletableFuture<VaultAccountsPagedResponse> response = 
        api.getPagedVaultAccounts(namePrefix, nameSuffix, minAmountThreshold, assetId, orderBy, before, after, limit);
        
        // TODO: test validations
    }
    
    /**
     * Get the public key information
     *
     * Gets the public key information based on derivation path and signing algorithm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicKeyInfoTest() throws ApiException {
        String derivationPath = null;
        String algorithm = null;
        Boolean compressed = null;
        CompletableFuture<PublicKeyInformation> response = 
        api.getPublicKeyInfo(derivationPath, algorithm, compressed);
        
        // TODO: test validations
    }
    
    /**
     * Get the public key for a vault account
     *
     * Gets the public key information for the vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicKeyInfoForAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        BigDecimal change = null;
        BigDecimal addressIndex = null;
        Boolean compressed = null;
        CompletableFuture<PublicKeyInformation> response = 
        api.getPublicKeyInfoForAddress(vaultAccountId, assetId, change, addressIndex, compressed);
        
        // TODO: test validations
    }
    
    /**
     * Get UTXO unspent inputs information
     *
     * Returns unspent inputs information of an asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnspentInputsTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CompletableFuture<List<UnspentInputsResponse>> response = 
        api.getUnspentInputs(vaultAccountId, assetId);
        
        // TODO: test validations
    }
    
    /**
     * Find a vault account by ID
     *
     * Returns the requested vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        CompletableFuture<VaultAccount> response = 
        api.getVaultAccount(vaultAccountId);
        
        // TODO: test validations
    }
    
    /**
     * Get the asset balance for a vault account
     *
     * Returns a wallet for a specific asset of a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CompletableFuture<VaultAsset> response = 
        api.getVaultAccountAsset(vaultAccountId, assetId);
        
        // TODO: test validations
    }
    
    /**
     * Get asset addresses
     *
     * Lists all addresses for specific asset of vault account. - This endpoint will be deprecated on Mar 31,2024. - If your application logic or scripts rely on the deprecated endpoint, you should update to account for GET/V1/vault/accounts/{vaultAccountId}/{assetId}/addresses_paginated before Mar 31,2024. - All workspaces created after Mar 31,2024. will have it disabled. If it is disabled for your workspace and you attempt to use it, you will receive the following error message: \&quot;This endpoint is unavailable. - Please use the GET/V1/vault/accounts/{vaultAccountId}/{assetId}/addresses_paginated endpoint to return all the wallet addresses associated with the specified vault account and asset in a paginated list. - This API call is subject to rate limits.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountAssetAddressesTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CompletableFuture<List<VaultWalletAddress>> response = 
        api.getVaultAccountAssetAddresses(vaultAccountId, assetId);
        
        // TODO: test validations
    }
    
    /**
     * List addresses (Paginated)
     *
     * Returns a paginated response of the addresses for a given vault account and asset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountAssetAddressesPaginatedTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        BigDecimal limit = null;
        String before = null;
        String after = null;
        CompletableFuture<PaginatedAddressResponse> response = 
        api.getVaultAccountAssetAddressesPaginated(vaultAccountId, assetId, limit, before, after);
        
        // TODO: test validations
    }
    
    /**
     * List vault accounts
     *
     * Gets all vault accounts in your workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAccountsTest() throws ApiException {
        String namePrefix = null;
        String nameSuffix = null;
        BigDecimal minAmountThreshold = null;
        String assetId = null;
        CompletableFuture<List<VaultAccount>> response = 
        api.getVaultAccounts(namePrefix, nameSuffix, minAmountThreshold, assetId);
        
        // TODO: test validations
    }
    
    /**
     * Get asset balance for chosen assets
     *
     * Gets the assets amount summary for all accounts or filtered accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultAssetsTest() throws ApiException {
        String accountNamePrefix = null;
        String accountNameSuffix = null;
        CompletableFuture<List<VaultAsset>> response = 
        api.getVaultAssets(accountNamePrefix, accountNameSuffix);
        
        // TODO: test validations
    }
    
    /**
     * Get vault balance by asset
     *
     * Gets the vault balance summary for an asset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVaultBalanceByAssetTest() throws ApiException {
        String assetId = null;
        CompletableFuture<VaultAsset> response = 
        api.getVaultBalanceByAsset(assetId);
        
        // TODO: test validations
    }
    
    /**
     * Hide a vault account in the console
     *
     * Hides the requested vault account from the web console view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hideVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.hideVaultAccount(vaultAccountId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Assign AML customer reference ID
     *
     * Sets an AML/KYT customer reference ID for a specific address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setCustomerRefIdForAddressTest() throws ApiException {
        SetCustomerRefIdForAddressRequest setCustomerRefIdForAddressRequest = null;
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.setCustomerRefIdForAddress(setCustomerRefIdForAddressRequest, vaultAccountId, assetId, addressId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Turn autofueling on or off
     *
     * Sets the autofueling property of the vault account to enabled or disabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVaultAccountAutoFuelTest() throws ApiException {
        SetAutoFuelRequest setAutoFuelRequest = null;
        String vaultAccountId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.setVaultAccountAutoFuel(setAutoFuelRequest, vaultAccountId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Set an AML/KYT customer reference ID for a vault account
     *
     * Assigns an AML/KYT customer reference ID for the vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVaultAccountCustomerRefIdTest() throws ApiException {
        SetCustomerRefIdRequest setCustomerRefIdRequest = null;
        String vaultAccountId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.setVaultAccountCustomerRefId(setCustomerRefIdRequest, vaultAccountId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Unhide a vault account in the console
     *
     * Makes a hidden vault account visible in web console view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unhideVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.unhideVaultAccount(vaultAccountId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Rename a vault account
     *
     * Renames the requested vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVaultAccountTest() throws ApiException {
        UpdateVaultAccountRequest updateVaultAccountRequest = null;
        String vaultAccountId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.updateVaultAccount(updateVaultAccountRequest, vaultAccountId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Update address description
     *
     * Updates the description of an existing address of an asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        UpdateVaultAccountAssetAddressRequest updateVaultAccountAssetAddressRequest = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.updateVaultAccountAssetAddress(vaultAccountId, assetId, addressId, updateVaultAccountAssetAddressRequest, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Refresh asset balance data
     *
     * Updates the balance of a specific asset in a vault account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVaultAccountAssetBalanceTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String idempotencyKey = null;
        CompletableFuture<VaultAsset> response = 
        api.updateVaultAccountAssetBalance(vaultAccountId, assetId, idempotencyKey);
        
        // TODO: test validations
    }
    
}
