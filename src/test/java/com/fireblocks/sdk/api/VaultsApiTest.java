/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.CreateAddressRequest;
import com.fireblocks.sdk.model.CreateAddressResponse;
import com.fireblocks.sdk.model.CreateAssetsRequest;
import com.fireblocks.sdk.model.CreateMultipleAccountsRequest;
import com.fireblocks.sdk.model.CreateMultipleDepositAddressesJobStatus;
import com.fireblocks.sdk.model.CreateMultipleDepositAddressesRequest;
import com.fireblocks.sdk.model.CreateMultipleVaultAccountsJobStatus;
import com.fireblocks.sdk.model.CreateVaultAccountRequest;
import com.fireblocks.sdk.model.CreateVaultAssetResponse;
import com.fireblocks.sdk.model.GetMaxSpendableAmountResponse;
import com.fireblocks.sdk.model.JobCreated;
import com.fireblocks.sdk.model.PaginatedAddressResponse;
import com.fireblocks.sdk.model.PaginatedAssetWalletResponse;
import com.fireblocks.sdk.model.PublicKeyInformation;
import com.fireblocks.sdk.model.RenameVaultAccountResponse;
import com.fireblocks.sdk.model.SetAutoFuelRequest;
import com.fireblocks.sdk.model.SetCustomerRefIdForAddressRequest;
import com.fireblocks.sdk.model.SetCustomerRefIdRequest;
import com.fireblocks.sdk.model.UnspentInputsResponse;
import com.fireblocks.sdk.model.UpdateVaultAccountAssetAddressRequest;
import com.fireblocks.sdk.model.UpdateVaultAccountRequest;
import com.fireblocks.sdk.model.VaultAccount;
import com.fireblocks.sdk.model.VaultAccountsPagedResponse;
import com.fireblocks.sdk.model.VaultAccountsTagAttachmentsRequest;
import com.fireblocks.sdk.model.VaultActionStatus;
import com.fireblocks.sdk.model.VaultAsset;
import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for VaultsApi */
@Ignore
public class VaultsApiTest {

    private final VaultsApi api = new VaultsApi();

    /**
     * Activate a wallet in a vault account
     *
     * <p>Initiates activation for a wallet in a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateAssetForVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<CreateVaultAssetResponse>> response =
                api.activateAssetForVaultAccount(vaultAccountId, assetId, idempotencyKey);
    }

    /**
     * Attach tags to a vault accounts
     *
     * <p>Attach one or more tags to the requested vault accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachTagsToVaultAccountsTest() throws ApiException {
        VaultAccountsTagAttachmentsRequest vaultAccountsTagAttachmentsRequest = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.attachTagsToVaultAccounts(vaultAccountsTagAttachmentsRequest, idempotencyKey);
    }

    /**
     * Convert a segwit address to legacy format
     *
     * <p>Converts an existing segwit address to the legacy format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLegacyAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<CreateAddressResponse>> response =
                api.createLegacyAddress(vaultAccountId, assetId, addressId, idempotencyKey);
    }

    /**
     * Bulk creation of new vault accounts
     *
     * <p>Create multiple vault accounts by running an async job. &lt;/br&gt; **Note**: - These
     * endpoints are currently in beta and might be subject to changes. - We limit accounts to 10k
     * per operation and 200k per customer during beta testing. Endpoint Permission: Admin,
     * Non-Signing Admin, Signer, Approver, Editor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultipleAccountsTest() throws ApiException {
        CreateMultipleAccountsRequest createMultipleAccountsRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<JobCreated>> response =
                api.createMultipleAccounts(createMultipleAccountsRequest, idempotencyKey);
    }

    /**
     * Bulk creation of new deposit addresses
     *
     * <p>Create multiple deposit address by running an async job. &lt;/br&gt; **Note**: - We limit
     * accounts to 10k per operation. Endpoint Permission: Admin, Non-Signing Admin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultipleDepositAddressesTest() throws ApiException {
        CreateMultipleDepositAddressesRequest createMultipleDepositAddressesRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<JobCreated>> response =
                api.createMultipleDepositAddresses(
                        createMultipleDepositAddressesRequest, idempotencyKey);
    }

    /**
     * Create a new vault account
     *
     * <p>Creates a new vault account with the requested name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVaultAccountTest() throws ApiException {
        CreateVaultAccountRequest createVaultAccountRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultAccount>> response =
                api.createVaultAccount(createVaultAccountRequest, idempotencyKey);
    }

    /**
     * Create a new wallet
     *
     * <p>Creates a wallet for a specific asset in a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateAssetsRequest createAssetsRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<CreateVaultAssetResponse>> response =
                api.createVaultAccountAsset(
                        vaultAccountId, assetId, createAssetsRequest, idempotencyKey);
    }

    /**
     * Create new asset deposit address
     *
     * <p>Creates a new deposit address for an asset of a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CreateAddressRequest createAddressRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<CreateAddressResponse>> response =
                api.createVaultAccountAssetAddress(
                        vaultAccountId, assetId, createAddressRequest, idempotencyKey);
    }

    /**
     * Detach tags from a vault accounts
     *
     * <p>Detach one or more tags from the requested vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachTagsFromVaultAccountsTest() throws ApiException {
        VaultAccountsTagAttachmentsRequest vaultAccountsTagAttachmentsRequest = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.detachTagsFromVaultAccounts(vaultAccountsTagAttachmentsRequest, idempotencyKey);
    }

    /**
     * List asset wallets (Paginated)
     *
     * <p>Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is
     * an asset at a vault account. This method allows fast traversal of all account balances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetWalletsTest() throws ApiException {
        BigDecimal totalAmountLargerThan = null;
        String assetId = null;
        String orderBy = null;
        String before = null;
        String after = null;
        BigDecimal limit = null;
        CompletableFuture<ApiResponse<PaginatedAssetWalletResponse>> response =
                api.getAssetWallets(totalAmountLargerThan, assetId, orderBy, before, after, limit);
    }

    /**
     * Get job status of bulk creation of new deposit addresses
     *
     * <p>Returns the status of bulk creation of new deposit addresses job and the result or error
     * Endpoint Permission: Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreateMultipleDepositAddressesJobStatusTest() throws ApiException {
        String jobId = null;
        CompletableFuture<ApiResponse<CreateMultipleDepositAddressesJobStatus>> response =
                api.getCreateMultipleDepositAddressesJobStatus(jobId);
    }

    /**
     * Get job status of bulk creation of new vault accounts
     *
     * <p>Returns the status of bulk creation of new vault accounts job and the result or error
     * Endpoint Permission: Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreateMultipleVaultAccountsJobStatusTest() throws ApiException {
        String jobId = null;
        CompletableFuture<ApiResponse<CreateMultipleVaultAccountsJobStatus>> response =
                api.getCreateMultipleVaultAccountsJobStatus(jobId);
    }

    /**
     * Get the maximum spendable amount in a single transaction.
     *
     * <p>Get the maximum amount of a particular asset that can be spent in a single transaction
     * from a specified vault account (UTXO assets only, with a limitation on number of inputs
     * embedded). Send several transactions if you want to spend more than the maximum spendable
     * amount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMaxSpendableAmountTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        Boolean manualSignging = null;
        CompletableFuture<ApiResponse<GetMaxSpendableAmountResponse>> response =
                api.getMaxSpendableAmount(vaultAccountId, assetId, manualSignging);
    }

    /**
     * List vault accounts (Paginated)
     *
     * <p>Gets all vault accounts in your workspace. This endpoint returns a limited amount of
     * results with a quick response time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagedVaultAccountsTest() throws ApiException {
        String namePrefix = null;
        String nameSuffix = null;
        BigDecimal minAmountThreshold = null;
        String assetId = null;
        String orderBy = null;
        String before = null;
        String after = null;
        BigDecimal limit = null;
        List<UUID> tagIds = null;
        CompletableFuture<ApiResponse<VaultAccountsPagedResponse>> response =
                api.getPagedVaultAccounts(
                        namePrefix,
                        nameSuffix,
                        minAmountThreshold,
                        assetId,
                        orderBy,
                        before,
                        after,
                        limit,
                        tagIds);
    }

    /**
     * Get the public key information
     *
     * <p>Gets the public key information based on derivation path and signing algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKeyInfoTest() throws ApiException {
        String derivationPath = null;
        String algorithm = null;
        Boolean compressed = null;
        CompletableFuture<ApiResponse<PublicKeyInformation>> response =
                api.getPublicKeyInfo(derivationPath, algorithm, compressed);
    }

    /**
     * Get the public key for a vault account
     *
     * <p>Gets the public key information for the vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKeyInfoForAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        BigDecimal change = null;
        BigDecimal addressIndex = null;
        Boolean compressed = null;
        CompletableFuture<ApiResponse<PublicKeyInformation>> response =
                api.getPublicKeyInfoForAddress(
                        vaultAccountId, assetId, change, addressIndex, compressed);
    }

    /**
     * Get UTXO unspent inputs information
     *
     * <p>Returns unspent inputs information of an asset in a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnspentInputsTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CompletableFuture<ApiResponse<List<UnspentInputsResponse>>> response =
                api.getUnspentInputs(vaultAccountId, assetId);
    }

    /**
     * Find a vault account by ID
     *
     * <p>Returns the requested vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        CompletableFuture<ApiResponse<VaultAccount>> response = api.getVaultAccount(vaultAccountId);
    }

    /**
     * Get the asset balance for a vault account
     *
     * <p>Returns a wallet for a specific asset of a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVaultAccountAssetTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        CompletableFuture<ApiResponse<VaultAsset>> response =
                api.getVaultAccountAsset(vaultAccountId, assetId);
    }

    /**
     * List addresses (Paginated)
     *
     * <p>Returns a paginated response of the addresses for a given vault account and asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVaultAccountAssetAddressesPaginatedTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        BigDecimal limit = null;
        String before = null;
        String after = null;
        CompletableFuture<ApiResponse<PaginatedAddressResponse>> response =
                api.getVaultAccountAssetAddressesPaginated(
                        vaultAccountId, assetId, limit, before, after);
    }

    /**
     * Get asset balance for chosen assets
     *
     * <p>Gets the assets amount summary for all accounts or filtered accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVaultAssetsTest() throws ApiException {
        String accountNamePrefix = null;
        String accountNameSuffix = null;
        CompletableFuture<ApiResponse<List<VaultAsset>>> response =
                api.getVaultAssets(accountNamePrefix, accountNameSuffix);
    }

    /**
     * Get vault balance by asset
     *
     * <p>Gets the vault balance summary for an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVaultBalanceByAssetTest() throws ApiException {
        String assetId = null;
        CompletableFuture<ApiResponse<VaultAsset>> response = api.getVaultBalanceByAsset(assetId);
    }

    /**
     * Hide a vault account in the console
     *
     * <p>Hides the requested vault account from the web console view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultActionStatus>> response =
                api.hideVaultAccount(vaultAccountId, idempotencyKey);
    }

    /**
     * Assign AML customer reference ID
     *
     * <p>Sets an AML/KYT customer reference ID for a specific address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCustomerRefIdForAddressTest() throws ApiException {
        SetCustomerRefIdForAddressRequest setCustomerRefIdForAddressRequest = null;
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultActionStatus>> response =
                api.setCustomerRefIdForAddress(
                        setCustomerRefIdForAddressRequest,
                        vaultAccountId,
                        assetId,
                        addressId,
                        idempotencyKey);
    }

    /**
     * Turn autofueling on or off
     *
     * <p>Sets the autofueling property of the vault account to enabled or disabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setVaultAccountAutoFuelTest() throws ApiException {
        SetAutoFuelRequest setAutoFuelRequest = null;
        String vaultAccountId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultActionStatus>> response =
                api.setVaultAccountAutoFuel(setAutoFuelRequest, vaultAccountId, idempotencyKey);
    }

    /**
     * Set an AML/KYT customer reference ID for a vault account
     *
     * <p>Assigns an AML/KYT customer reference ID for the vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setVaultAccountCustomerRefIdTest() throws ApiException {
        SetCustomerRefIdRequest setCustomerRefIdRequest = null;
        String vaultAccountId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultActionStatus>> response =
                api.setVaultAccountCustomerRefId(
                        setCustomerRefIdRequest, vaultAccountId, idempotencyKey);
    }

    /**
     * Unhide a vault account in the console
     *
     * <p>Makes a hidden vault account visible in web console view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unhideVaultAccountTest() throws ApiException {
        String vaultAccountId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultActionStatus>> response =
                api.unhideVaultAccount(vaultAccountId, idempotencyKey);
    }

    /**
     * Rename a vault account
     *
     * <p>Renames the requested vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVaultAccountTest() throws ApiException {
        UpdateVaultAccountRequest updateVaultAccountRequest = null;
        String vaultAccountId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<RenameVaultAccountResponse>> response =
                api.updateVaultAccount(updateVaultAccountRequest, vaultAccountId, idempotencyKey);
    }

    /**
     * Update address description
     *
     * <p>Updates the description of an existing address of an asset in a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVaultAccountAssetAddressTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String addressId = null;
        UpdateVaultAccountAssetAddressRequest updateVaultAccountAssetAddressRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultActionStatus>> response =
                api.updateVaultAccountAssetAddress(
                        vaultAccountId,
                        assetId,
                        addressId,
                        updateVaultAccountAssetAddressRequest,
                        idempotencyKey);
    }

    /**
     * Refresh asset balance data
     *
     * <p>Updates the balance of a specific asset in a vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVaultAccountAssetBalanceTest() throws ApiException {
        String vaultAccountId = null;
        String assetId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<VaultAsset>> response =
                api.updateVaultAccountAssetBalance(vaultAccountId, assetId, idempotencyKey);
    }
}
