/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.api;

import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.model.ErrorSchema;
import com.fireblocks.sdk.model.Job;
import com.fireblocks.sdk.model.Task;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Cancel a running job
     *
     * Stop the given job immediately. If the job is in the ‘Active’ state, the job will be canceled after completing the current task. Vault accounts and Wallets that are already created will not be affected.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelJobTest() throws ApiException {
        String jobId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.cancelJob(jobId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Continue a paused job
     *
     * Continue the given paused job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void continueJobTest() throws ApiException {
        String jobId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.continueJob(jobId, idempotencyKey);
        
        // TODO: test validations
    }
    
    /**
     * Get job details
     *
     * Get an object describing the given job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobId = null;
        CompletableFuture<Job> response = 
        api.getJob(jobId);
        
        // TODO: test validations
    }
    
    /**
     * Return a list of tasks for given job
     *
     * Return a list of tasks for given job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTasksTest() throws ApiException {
        String jobId = null;
        CompletableFuture<List<Task>> response = 
        api.getJobTasks(jobId);
        
        // TODO: test validations
    }
    
    /**
     * Return a list of jobs belonging to tenant
     *
     * Get an array of objects including all active, paused, canceled, and complete jobs in a workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        Integer fromTime = null;
        Integer toTime = null;
        CompletableFuture<List<Job>> response = 
        api.getJobs(fromTime, toTime);
        
        // TODO: test validations
    }
    
    /**
     * Pause a job
     *
     * Pause the given job, after the current task is done. A paused job can later be resumed by calling ‘continue’, or canceled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pauseJobTest() throws ApiException {
        String jobId = null;
        String idempotencyKey = null;
        
        CompletableFuture<Void> response = api.pauseJob(jobId, idempotencyKey);
        
        // TODO: test validations
    }
    
}
