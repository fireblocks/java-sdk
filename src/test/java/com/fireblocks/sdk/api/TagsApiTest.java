/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.CreateTagRequest;
import com.fireblocks.sdk.model.Tag;
import com.fireblocks.sdk.model.TagsPagedResponse;
import com.fireblocks.sdk.model.UpdateTagRequest;
import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for TagsApi */
@Ignore
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create a tag
     *
     * <p>Create a new tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        CreateTagRequest createTagRequest = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<Tag>> response =
                api.createTag(createTagRequest, idempotencyKey);
    }

    /**
     * Delete a tag
     *
     * <p>Delete the specified tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        UUID tagId = null;

        CompletableFuture<ApiResponse<Void>> response = api.deleteTag(tagId);
    }

    /**
     * Get a tag
     *
     * <p>Retrieve an existing tag by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        UUID tagId = null;
        CompletableFuture<ApiResponse<Tag>> response = api.getTag(tagId);
    }

    /**
     * Get list of tags
     *
     * <p>Retrieve a paged list of all tags according to filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String pageCursor = null;
        BigDecimal pageSize = null;
        String label = null;
        List<UUID> tagIds = null;
        CompletableFuture<ApiResponse<TagsPagedResponse>> response =
                api.getTags(pageCursor, pageSize, label, tagIds);
    }

    /**
     * Update a tag
     *
     * <p>Update an existing specified tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        UpdateTagRequest updateTagRequest = null;
        UUID tagId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<Tag>> response =
                api.updateTag(updateTagRequest, tagId, idempotencyKey);
    }
}
