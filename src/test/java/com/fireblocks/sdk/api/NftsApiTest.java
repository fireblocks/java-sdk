/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.GetOwnershipTokens200Response;
import com.fireblocks.sdk.model.ListOwnedCollections200Response;
import com.fireblocks.sdk.model.ListOwnedTokens200Response;
import com.fireblocks.sdk.model.TokenOwnershipSpamUpdatePayload;
import com.fireblocks.sdk.model.TokenOwnershipStatusUpdatePayload;
import com.fireblocks.sdk.model.TokenResponse;
import com.fireblocks.sdk.model.UpdateTokenOwnershipStatusDto;
import java.math.BigDecimal;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for NftsApi */
@Ignore
public class NftsApiTest {

    private final NftsApi api = new NftsApi();

    /**
     * List token data by ID
     *
     * <p>Returns the requested token data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTTest() throws ApiException {
        String id = null;
        CompletableFuture<ApiResponse<TokenResponse>> response = api.getNFT(id);
    }

    /**
     * List tokens by IDs
     *
     * <p>Returns the requested tokens data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTsTest() throws ApiException {
        String ids = null;
        String pageCursor = null;
        BigDecimal pageSize = null;
        List<String> sort = null;
        String order = null;
        CompletableFuture<ApiResponse<ListOwnedTokens200Response>> response =
                api.getNFTs(ids, pageCursor, pageSize, sort, order);
    }

    /**
     * List all owned tokens (paginated)
     *
     * <p>Returns all tokens and their data in your workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOwnershipTokensTest() throws ApiException {
        String blockchainDescriptor = null;
        String vaultAccountIds = null;
        String ncwId = null;
        String ncwAccountIds = null;
        String walletType = null;
        String ids = null;
        String collectionIds = null;
        String pageCursor = null;
        BigDecimal pageSize = null;
        List<String> sort = null;
        String order = null;
        String status = null;
        String search = null;
        String spam = null;
        CompletableFuture<ApiResponse<GetOwnershipTokens200Response>> response =
                api.getOwnershipTokens(
                        blockchainDescriptor,
                        vaultAccountIds,
                        ncwId,
                        ncwAccountIds,
                        walletType,
                        ids,
                        collectionIds,
                        pageCursor,
                        pageSize,
                        sort,
                        order,
                        status,
                        search,
                        spam);
    }

    /**
     * List owned collections (paginated)
     *
     * <p>Returns all collections in your workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOwnedCollectionsTest() throws ApiException {
        String ncwId = null;
        String walletType = null;
        String search = null;
        String pageCursor = null;
        BigDecimal pageSize = null;
        List<String> sort = null;
        String order = null;
        String status = null;
        CompletableFuture<ApiResponse<ListOwnedCollections200Response>> response =
                api.listOwnedCollections(
                        ncwId, walletType, search, pageCursor, pageSize, sort, order, status);
    }

    /**
     * List all distinct owned tokens (paginated)
     *
     * <p>Returns all owned distinct tokens (for your tenant) and their data in your workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOwnedTokensTest() throws ApiException {
        String ncwId = null;
        String walletType = null;
        String pageCursor = null;
        BigDecimal pageSize = null;
        List<String> sort = null;
        String order = null;
        String status = null;
        String search = null;
        String spam = null;
        CompletableFuture<ApiResponse<ListOwnedTokens200Response>> response =
                api.listOwnedTokens(
                        ncwId, walletType, pageCursor, pageSize, sort, order, status, search, spam);
    }

    /**
     * Refresh token metadata
     *
     * <p>Updates the latest token metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshNFTMetadataTest() throws ApiException {
        String id = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response = api.refreshNFTMetadata(id, idempotencyKey);
    }

    /**
     * Refresh vault account tokens
     *
     * <p>Updates all tokens and balances per blockchain and vault account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOwnershipTokensTest() throws ApiException {
        String blockchainDescriptor = null;
        String vaultAccountId = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.updateOwnershipTokens(blockchainDescriptor, vaultAccountId, idempotencyKey);
    }

    /**
     * Update token ownership status
     *
     * <p>Updates token status for a tenant, in all tenant vaults.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokenOwnershipStatusTest() throws ApiException {
        UpdateTokenOwnershipStatusDto updateTokenOwnershipStatusDto = null;
        String id = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.updateTokenOwnershipStatus(updateTokenOwnershipStatusDto, id, idempotencyKey);
    }

    /**
     * Update tokens ownership spam property
     *
     * <p>Updates tokens spam property for a tenant&#39;s token ownerships, in all tenant vaults.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokensOwnershipSpamTest() throws ApiException {
        List<TokenOwnershipSpamUpdatePayload> tokenOwnershipSpamUpdatePayload = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.updateTokensOwnershipSpam(tokenOwnershipSpamUpdatePayload, idempotencyKey);
    }

    /**
     * Update tokens ownership status
     *
     * <p>Updates tokens status for a tenant, in all tenant vaults.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokensOwnershipStatusTest() throws ApiException {
        List<TokenOwnershipStatusUpdatePayload> tokenOwnershipStatusUpdatePayload = null;
        String idempotencyKey = null;

        CompletableFuture<ApiResponse<Void>> response =
                api.updateTokensOwnershipStatus(tokenOwnershipStatusUpdatePayload, idempotencyKey);
    }
}
