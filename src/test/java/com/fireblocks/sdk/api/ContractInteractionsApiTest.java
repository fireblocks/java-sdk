/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.model.ContractAbiResponseDto;
import com.fireblocks.sdk.model.ParameterWithValue;
import com.fireblocks.sdk.model.ReadCallFunctionDto;
import com.fireblocks.sdk.model.TransactionReceiptResponse;
import com.fireblocks.sdk.model.WriteCallFunctionDto;
import com.fireblocks.sdk.model.WriteCallFunctionResponseDto;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import org.junit.Ignore;
import org.junit.Test;

/** API tests for ContractInteractionsApi */
@Ignore
public class ContractInteractionsApiTest {

    private final ContractInteractionsApi api = new ContractInteractionsApi();

    /**
     * Return deployed contract&#39;s ABI
     *
     * <p>Return deployed contract&#39;s ABI by blockchain native asset id and contract address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedContractAbiTest() throws ApiException {
        String contractAddress = null;
        String baseAssetId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<ContractAbiResponseDto>> response =
                api.getDeployedContractAbi(contractAddress, baseAssetId, idempotencyKey);
    }

    /**
     * Get transaction receipt
     *
     * <p>Retrieve the transaction receipt by blockchain native asset ID and transaction hash
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionReceiptTest() throws ApiException {
        String baseAssetId = null;
        String txHash = null;
        CompletableFuture<ApiResponse<TransactionReceiptResponse>> response =
                api.getTransactionReceipt(baseAssetId, txHash);
    }

    /**
     * Call a read function on a deployed contract
     *
     * <p>Call a read function on a deployed contract by blockchain native asset id and contract
     * address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallFunctionTest() throws ApiException {
        ReadCallFunctionDto readCallFunctionDto = null;
        String contractAddress = null;
        String baseAssetId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<List<ParameterWithValue>>> response =
                api.readCallFunction(
                        readCallFunctionDto, contractAddress, baseAssetId, idempotencyKey);
    }

    /**
     * Call a write function on a deployed contract
     *
     * <p>Call a write function on a deployed contract by blockchain native asset id and contract
     * address. This creates an onchain transaction, thus it is an async operation. It returns a
     * transaction id that can be polled for status check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeCallFunctionTest() throws ApiException {
        WriteCallFunctionDto writeCallFunctionDto = null;
        String contractAddress = null;
        String baseAssetId = null;
        String idempotencyKey = null;
        CompletableFuture<ApiResponse<WriteCallFunctionResponseDto>> response =
                api.writeCallFunction(
                        writeCallFunctionDto, contractAddress, baseAssetId, idempotencyKey);
    }
}
