/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk;

import com.fireblocks.sdk.*;
import com.fireblocks.sdk.auth.*;
import com.fireblocks.sdk.Configuration;
import java.math.BigDecimal;
import com.fireblocks.sdk.model.GetNFTs200Response;
import com.fireblocks.sdk.model.GetOwnershipTokens200Response;
import com.fireblocks.sdk.model.ListOwnedCollections200Response;
import com.fireblocks.sdk.model.TokenResponse;
import com.fireblocks.sdk.model.UpdateTokenOwnershipStatusDto;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NftsApi
 */
public class NftsApiTest {

    private NftsApi api;

    /**
     * List token data by ID
     *
     * Returns the requested token data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String id = null;
        //TokenResponse response = api.getNFT(id);
        // TODO: test validations
    }

    /**
     * List tokens by IDs
     *
     * Returns the requested tokens data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTsTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String ids = null;
        //String pageCursor = null;
        //BigDecimal pageSize = null;
        //List<String> sort = null;
        //String order = null;
        //GetNFTs200Response response = api.getNFTs(ids, pageCursor, pageSize, sort, order);
        // TODO: test validations
    }

    /**
     * List all owned tokens (paginated)
     *
     * Returns all tokens and their data in your workspace. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOwnershipTokensTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String blockchainDescriptor = null;
        //String vaultAccountIds = null;
        //String ids = null;
        //String collectionIds = null;
        //String pageCursor = null;
        //BigDecimal pageSize = null;
        //List<String> sort = null;
        //String order = null;
        //String status = null;
        //String search = null;
        //GetOwnershipTokens200Response response = api.getOwnershipTokens(blockchainDescriptor, vaultAccountIds, ids, collectionIds, pageCursor, pageSize, sort, order, status, search);
        // TODO: test validations
    }

    /**
     * List owned collections (paginated)
     *
     * Returns all collections in your workspace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOwnedCollectionsTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String search = null;
        //String pageCursor = null;
        //BigDecimal pageSize = null;
        //List<String> sort = null;
        //String order = null;
        //ListOwnedCollections200Response response = api.listOwnedCollections(search, pageCursor, pageSize, sort, order);
        // TODO: test validations
    }

    /**
     * Refresh token metadata
     *
     * Updates the latest token metadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshNFTMetadataTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String id = null;
        //api.refreshNFTMetadata(id);
        // TODO: test validations
    }

    /**
     * Refresh vault account tokens
     *
     * Updates all tokens and balances per blockchain and vault account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOwnershipTokensTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String blockchainDescriptor = null;
        //String vaultAccountId = null;
        //api.updateOwnershipTokens(blockchainDescriptor, vaultAccountId);
        // TODO: test validations
    }

    /**
     * Update token ownership status
     *
     * Updates token ownership status for a tenant, in all tenant vaults. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokenOwnershipStatusTest() throws ApiException {
        Configuration configuration = new Configuration();
        configuration.setApiKey("test");
        configuration.setSecretKey("test");
        this.api = new NftsApi(configuration);
        //String id = null;
        //UpdateTokenOwnershipStatusDto updateTokenOwnershipStatusDto = null;
        //api.updateTokenOwnershipStatus(id, updateTokenOwnershipStatusDto);
        // TODO: test validations
    }

}
