/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** ConnectedSingleAccountResponse */
@JsonPropertyOrder({
    ConnectedSingleAccountResponse.JSON_PROPERTY_ID,
    ConnectedSingleAccountResponse.JSON_PROPERTY_NAME,
    ConnectedSingleAccountResponse.JSON_PROPERTY_PROVIDER_ID,
    ConnectedSingleAccountResponse.JSON_PROPERTY_STATUS,
    ConnectedSingleAccountResponse.JSON_PROPERTY_TOTAL_BALANCE,
    ConnectedSingleAccountResponse.JSON_PROPERTY_MANIFEST,
    ConnectedSingleAccountResponse.JSON_PROPERTY_PARENT_ID,
    ConnectedSingleAccountResponse.JSON_PROPERTY_SUB_ACCOUNTS_IDS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ConnectedSingleAccountResponse {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_PROVIDER_ID = "providerId";
    @jakarta.annotation.Nonnull private String providerId;

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private ConnectedAccountApprovalStatus status;

    public static final String JSON_PROPERTY_TOTAL_BALANCE = "totalBalance";
    @jakarta.annotation.Nonnull private ConnectedAccountTotalBalance totalBalance;

    public static final String JSON_PROPERTY_MANIFEST = "manifest";
    @jakarta.annotation.Nonnull private ConnectedAccountManifest manifest;

    public static final String JSON_PROPERTY_PARENT_ID = "parentId";
    @jakarta.annotation.Nullable private String parentId;

    public static final String JSON_PROPERTY_SUB_ACCOUNTS_IDS = "subAccountsIds";
    @jakarta.annotation.Nullable private List<String> subAccountsIds = new ArrayList<>();

    public ConnectedSingleAccountResponse() {}

    @JsonCreator
    public ConnectedSingleAccountResponse(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_NAME, required = true) String name,
            @JsonProperty(value = JSON_PROPERTY_PROVIDER_ID, required = true) String providerId,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true)
                    ConnectedAccountApprovalStatus status,
            @JsonProperty(value = JSON_PROPERTY_TOTAL_BALANCE, required = true)
                    ConnectedAccountTotalBalance totalBalance,
            @JsonProperty(value = JSON_PROPERTY_MANIFEST, required = true)
                    ConnectedAccountManifest manifest) {
        this.id = id;
        this.name = name;
        this.providerId = providerId;
        this.status = status;
        this.totalBalance = totalBalance;
        this.manifest = manifest;
    }

    public ConnectedSingleAccountResponse id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier of the connected account.
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public ConnectedSingleAccountResponse name(@jakarta.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Human-readable name of the connected account.
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@jakarta.annotation.Nonnull String name) {
        this.name = name;
    }

    public ConnectedSingleAccountResponse providerId(
            @jakarta.annotation.Nonnull String providerId) {
        this.providerId = providerId;
        return this;
    }

    /**
     * The ID of the venue the account belongs to.
     *
     * @return providerId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getProviderId() {
        return providerId;
    }

    @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProviderId(@jakarta.annotation.Nonnull String providerId) {
        this.providerId = providerId;
    }

    public ConnectedSingleAccountResponse status(
            @jakarta.annotation.Nonnull ConnectedAccountApprovalStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ConnectedAccountApprovalStatus getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull ConnectedAccountApprovalStatus status) {
        this.status = status;
    }

    public ConnectedSingleAccountResponse totalBalance(
            @jakarta.annotation.Nonnull ConnectedAccountTotalBalance totalBalance) {
        this.totalBalance = totalBalance;
        return this;
    }

    /**
     * Get totalBalance
     *
     * @return totalBalance
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL_BALANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ConnectedAccountTotalBalance getTotalBalance() {
        return totalBalance;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_BALANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotalBalance(
            @jakarta.annotation.Nonnull ConnectedAccountTotalBalance totalBalance) {
        this.totalBalance = totalBalance;
    }

    public ConnectedSingleAccountResponse manifest(
            @jakarta.annotation.Nonnull ConnectedAccountManifest manifest) {
        this.manifest = manifest;
        return this;
    }

    /**
     * Get manifest
     *
     * @return manifest
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MANIFEST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ConnectedAccountManifest getManifest() {
        return manifest;
    }

    @JsonProperty(JSON_PROPERTY_MANIFEST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setManifest(@jakarta.annotation.Nonnull ConnectedAccountManifest manifest) {
        this.manifest = manifest;
    }

    public ConnectedSingleAccountResponse parentId(@jakarta.annotation.Nullable String parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * The ID of the parent main account, if this is a sub account.
     *
     * @return parentId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PARENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getParentId() {
        return parentId;
    }

    @JsonProperty(JSON_PROPERTY_PARENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setParentId(@jakarta.annotation.Nullable String parentId) {
        this.parentId = parentId;
    }

    public ConnectedSingleAccountResponse subAccountsIds(
            @jakarta.annotation.Nullable List<String> subAccountsIds) {
        this.subAccountsIds = subAccountsIds;
        return this;
    }

    public ConnectedSingleAccountResponse addSubAccountsIdsItem(String subAccountsIdsItem) {
        if (this.subAccountsIds == null) {
            this.subAccountsIds = new ArrayList<>();
        }
        this.subAccountsIds.add(subAccountsIdsItem);
        return this;
    }

    /**
     * IDs of sub-accounts associated with this connected account.
     *
     * @return subAccountsIds
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUB_ACCOUNTS_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getSubAccountsIds() {
        return subAccountsIds;
    }

    @JsonProperty(JSON_PROPERTY_SUB_ACCOUNTS_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubAccountsIds(@jakarta.annotation.Nullable List<String> subAccountsIds) {
        this.subAccountsIds = subAccountsIds;
    }

    /** Return true if this ConnectedSingleAccountResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectedSingleAccountResponse connectedSingleAccountResponse =
                (ConnectedSingleAccountResponse) o;
        return Objects.equals(this.id, connectedSingleAccountResponse.id)
                && Objects.equals(this.name, connectedSingleAccountResponse.name)
                && Objects.equals(this.providerId, connectedSingleAccountResponse.providerId)
                && Objects.equals(this.status, connectedSingleAccountResponse.status)
                && Objects.equals(this.totalBalance, connectedSingleAccountResponse.totalBalance)
                && Objects.equals(this.manifest, connectedSingleAccountResponse.manifest)
                && Objects.equals(this.parentId, connectedSingleAccountResponse.parentId)
                && Objects.equals(
                        this.subAccountsIds, connectedSingleAccountResponse.subAccountsIds);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id, name, providerId, status, totalBalance, manifest, parentId, subAccountsIds);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConnectedSingleAccountResponse {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    totalBalance: ").append(toIndentedString(totalBalance)).append("\n");
        sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
        sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
        sb.append("    subAccountsIds: ").append(toIndentedString(subAccountsIds)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `providerId` to the URL query string
        if (getProviderId() != null) {
            joiner.add(
                    String.format(
                            "%sproviderId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getProviderId()))));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `totalBalance` to the URL query string
        if (getTotalBalance() != null) {
            joiner.add(getTotalBalance().toUrlQueryString(prefix + "totalBalance" + suffix));
        }

        // add `manifest` to the URL query string
        if (getManifest() != null) {
            joiner.add(getManifest().toUrlQueryString(prefix + "manifest" + suffix));
        }

        // add `parentId` to the URL query string
        if (getParentId() != null) {
            joiner.add(
                    String.format(
                            "%sparentId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getParentId()))));
        }

        // add `subAccountsIds` to the URL query string
        if (getSubAccountsIds() != null) {
            for (int i = 0; i < getSubAccountsIds().size(); i++) {
                joiner.add(
                        String.format(
                                "%ssubAccountsIds%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getSubAccountsIds().get(i)))));
            }
        }

        return joiner.toString();
    }
}
