/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.StringJoiner;

/** EmbeddedWalletAddressDetails */
@JsonPropertyOrder({
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ACCOUNT_NAME,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ACCOUNT_ID,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ASSET,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ADDRESS,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ADDRESS_TYPE,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ADDRESS_DESCRIPTION,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_TAG,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ADDRESS_INDEX,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_CHANGE,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_COIN_TYPE,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_CUSTOMER_REF_ID,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_ADDRESS_FORMAT,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_LEGACY_ADDRESS,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_PAYMENT_ADDRESS,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_USER_DEFINED,
    EmbeddedWalletAddressDetails.JSON_PROPERTY_STATE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class EmbeddedWalletAddressDetails {
    public static final String JSON_PROPERTY_ACCOUNT_NAME = "accountName";
    @jakarta.annotation.Nonnull private String accountName;

    public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
    @jakarta.annotation.Nonnull private String accountId;

    public static final String JSON_PROPERTY_ASSET = "asset";
    @jakarta.annotation.Nonnull private String asset;

    public static final String JSON_PROPERTY_ADDRESS = "address";
    @jakarta.annotation.Nonnull private String address;

    /** addressType */
    public enum AddressTypeEnum {
        PERMANENT(String.valueOf("PERMANENT")),

        CHANGE(String.valueOf("CHANGE")),

        DEFAULT(String.valueOf("DEFAULT")),

        ADDRESS(String.valueOf("ADDRESS"));

        private String value;

        AddressTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AddressTypeEnum fromValue(String value) {
            for (AddressTypeEnum b : AddressTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ADDRESS_TYPE = "addressType";
    @jakarta.annotation.Nonnull private AddressTypeEnum addressType;

    public static final String JSON_PROPERTY_ADDRESS_DESCRIPTION = "addressDescription";
    @jakarta.annotation.Nonnull private String addressDescription;

    public static final String JSON_PROPERTY_TAG = "tag";
    @jakarta.annotation.Nonnull private String tag;

    public static final String JSON_PROPERTY_ADDRESS_INDEX = "addressIndex";
    @jakarta.annotation.Nullable private BigDecimal addressIndex;

    public static final String JSON_PROPERTY_CHANGE = "change";
    @jakarta.annotation.Nullable private BigDecimal change;

    public static final String JSON_PROPERTY_COIN_TYPE = "coinType";
    @jakarta.annotation.Nullable private BigDecimal coinType;

    public static final String JSON_PROPERTY_CUSTOMER_REF_ID = "customerRefId";
    @jakarta.annotation.Nullable private String customerRefId;

    public static final String JSON_PROPERTY_ADDRESS_FORMAT = "addressFormat";
    @jakarta.annotation.Nullable private String addressFormat;

    public static final String JSON_PROPERTY_LEGACY_ADDRESS = "legacyAddress";
    @jakarta.annotation.Nullable private String legacyAddress;

    public static final String JSON_PROPERTY_PAYMENT_ADDRESS = "paymentAddress";
    @jakarta.annotation.Nullable private String paymentAddress;

    public static final String JSON_PROPERTY_USER_DEFINED = "userDefined";
    @jakarta.annotation.Nullable private Boolean userDefined;

    /** state */
    public enum StateEnum {
        PENDING_ACTIVATION(String.valueOf("PENDING_ACTIVATION")),

        ACTIVATION_FAILED(String.valueOf("ACTIVATION_FAILED")),

        READY(String.valueOf("READY"));

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATE = "state";
    @jakarta.annotation.Nullable private StateEnum state;

    public EmbeddedWalletAddressDetails() {}

    @JsonCreator
    public EmbeddedWalletAddressDetails(
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_NAME, required = true) String accountName,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_ID, required = true) String accountId,
            @JsonProperty(value = JSON_PROPERTY_ASSET, required = true) String asset,
            @JsonProperty(value = JSON_PROPERTY_ADDRESS, required = true) String address,
            @JsonProperty(value = JSON_PROPERTY_ADDRESS_TYPE, required = true)
                    AddressTypeEnum addressType,
            @JsonProperty(value = JSON_PROPERTY_ADDRESS_DESCRIPTION, required = true)
                    String addressDescription,
            @JsonProperty(value = JSON_PROPERTY_TAG, required = true) String tag) {
        this.accountName = accountName;
        this.accountId = accountId;
        this.asset = asset;
        this.address = address;
        this.addressType = addressType;
        this.addressDescription = addressDescription;
        this.tag = tag;
    }

    public EmbeddedWalletAddressDetails accountName(
            @jakarta.annotation.Nonnull String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * accountName
     *
     * @return accountName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountName() {
        return accountName;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountName(@jakarta.annotation.Nonnull String accountName) {
        this.accountName = accountName;
    }

    public EmbeddedWalletAddressDetails accountId(@jakarta.annotation.Nonnull String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * accountId
     *
     * @return accountId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountId() {
        return accountId;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountId(@jakarta.annotation.Nonnull String accountId) {
        this.accountId = accountId;
    }

    public EmbeddedWalletAddressDetails asset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * asset
     *
     * @return asset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAsset() {
        return asset;
    }

    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAsset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
    }

    public EmbeddedWalletAddressDetails address(@jakarta.annotation.Nonnull String address) {
        this.address = address;
        return this;
    }

    /**
     * address
     *
     * @return address
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAddress() {
        return address;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddress(@jakarta.annotation.Nonnull String address) {
        this.address = address;
    }

    public EmbeddedWalletAddressDetails addressType(
            @jakarta.annotation.Nonnull AddressTypeEnum addressType) {
        this.addressType = addressType;
        return this;
    }

    /**
     * addressType
     *
     * @return addressType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESS_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AddressTypeEnum getAddressType() {
        return addressType;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddressType(@jakarta.annotation.Nonnull AddressTypeEnum addressType) {
        this.addressType = addressType;
    }

    public EmbeddedWalletAddressDetails addressDescription(
            @jakarta.annotation.Nonnull String addressDescription) {
        this.addressDescription = addressDescription;
        return this;
    }

    /**
     * addressDescription
     *
     * @return addressDescription
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESS_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAddressDescription() {
        return addressDescription;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddressDescription(@jakarta.annotation.Nonnull String addressDescription) {
        this.addressDescription = addressDescription;
    }

    public EmbeddedWalletAddressDetails tag(@jakarta.annotation.Nonnull String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * tag
     *
     * @return tag
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TAG)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTag() {
        return tag;
    }

    @JsonProperty(JSON_PROPERTY_TAG)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTag(@jakarta.annotation.Nonnull String tag) {
        this.tag = tag;
    }

    public EmbeddedWalletAddressDetails addressIndex(
            @jakarta.annotation.Nullable BigDecimal addressIndex) {
        this.addressIndex = addressIndex;
        return this;
    }

    /**
     * addressIndex
     *
     * @return addressIndex
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ADDRESS_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getAddressIndex() {
        return addressIndex;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAddressIndex(@jakarta.annotation.Nullable BigDecimal addressIndex) {
        this.addressIndex = addressIndex;
    }

    public EmbeddedWalletAddressDetails change(@jakarta.annotation.Nullable BigDecimal change) {
        this.change = change;
        return this;
    }

    /**
     * change
     *
     * @return change
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CHANGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getChange() {
        return change;
    }

    @JsonProperty(JSON_PROPERTY_CHANGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setChange(@jakarta.annotation.Nullable BigDecimal change) {
        this.change = change;
    }

    public EmbeddedWalletAddressDetails coinType(@jakarta.annotation.Nullable BigDecimal coinType) {
        this.coinType = coinType;
        return this;
    }

    /**
     * Unique identifier of an asset (0 for BTC, 60 for ETH, etc.)
     *
     * @return coinType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COIN_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getCoinType() {
        return coinType;
    }

    @JsonProperty(JSON_PROPERTY_COIN_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoinType(@jakarta.annotation.Nullable BigDecimal coinType) {
        this.coinType = coinType;
    }

    public EmbeddedWalletAddressDetails customerRefId(
            @jakarta.annotation.Nullable String customerRefId) {
        this.customerRefId = customerRefId;
        return this;
    }

    /**
     * customerRefId
     *
     * @return customerRefId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CUSTOMER_REF_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCustomerRefId() {
        return customerRefId;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_REF_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustomerRefId(@jakarta.annotation.Nullable String customerRefId) {
        this.customerRefId = customerRefId;
    }

    public EmbeddedWalletAddressDetails addressFormat(
            @jakarta.annotation.Nullable String addressFormat) {
        this.addressFormat = addressFormat;
        return this;
    }

    /**
     * addressFormat
     *
     * @return addressFormat
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ADDRESS_FORMAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAddressFormat() {
        return addressFormat;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS_FORMAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAddressFormat(@jakarta.annotation.Nullable String addressFormat) {
        this.addressFormat = addressFormat;
    }

    public EmbeddedWalletAddressDetails legacyAddress(
            @jakarta.annotation.Nullable String legacyAddress) {
        this.legacyAddress = legacyAddress;
        return this;
    }

    /**
     * legacyAddress
     *
     * @return legacyAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LEGACY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLegacyAddress() {
        return legacyAddress;
    }

    @JsonProperty(JSON_PROPERTY_LEGACY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLegacyAddress(@jakarta.annotation.Nullable String legacyAddress) {
        this.legacyAddress = legacyAddress;
    }

    public EmbeddedWalletAddressDetails paymentAddress(
            @jakarta.annotation.Nullable String paymentAddress) {
        this.paymentAddress = paymentAddress;
        return this;
    }

    /**
     * paymentAddress
     *
     * @return paymentAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYMENT_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPaymentAddress() {
        return paymentAddress;
    }

    @JsonProperty(JSON_PROPERTY_PAYMENT_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaymentAddress(@jakarta.annotation.Nullable String paymentAddress) {
        this.paymentAddress = paymentAddress;
    }

    public EmbeddedWalletAddressDetails userDefined(
            @jakarta.annotation.Nullable Boolean userDefined) {
        this.userDefined = userDefined;
        return this;
    }

    /**
     * userDefined
     *
     * @return userDefined
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USER_DEFINED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUserDefined() {
        return userDefined;
    }

    @JsonProperty(JSON_PROPERTY_USER_DEFINED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUserDefined(@jakarta.annotation.Nullable Boolean userDefined) {
        this.userDefined = userDefined;
    }

    public EmbeddedWalletAddressDetails state(@jakarta.annotation.Nullable StateEnum state) {
        this.state = state;
        return this;
    }

    /**
     * state
     *
     * @return state
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StateEnum getState() {
        return state;
    }

    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setState(@jakarta.annotation.Nullable StateEnum state) {
        this.state = state;
    }

    /** Return true if this EmbeddedWalletAddressDetails object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbeddedWalletAddressDetails embeddedWalletAddressDetails =
                (EmbeddedWalletAddressDetails) o;
        return Objects.equals(this.accountName, embeddedWalletAddressDetails.accountName)
                && Objects.equals(this.accountId, embeddedWalletAddressDetails.accountId)
                && Objects.equals(this.asset, embeddedWalletAddressDetails.asset)
                && Objects.equals(this.address, embeddedWalletAddressDetails.address)
                && Objects.equals(this.addressType, embeddedWalletAddressDetails.addressType)
                && Objects.equals(
                        this.addressDescription, embeddedWalletAddressDetails.addressDescription)
                && Objects.equals(this.tag, embeddedWalletAddressDetails.tag)
                && Objects.equals(this.addressIndex, embeddedWalletAddressDetails.addressIndex)
                && Objects.equals(this.change, embeddedWalletAddressDetails.change)
                && Objects.equals(this.coinType, embeddedWalletAddressDetails.coinType)
                && Objects.equals(this.customerRefId, embeddedWalletAddressDetails.customerRefId)
                && Objects.equals(this.addressFormat, embeddedWalletAddressDetails.addressFormat)
                && Objects.equals(this.legacyAddress, embeddedWalletAddressDetails.legacyAddress)
                && Objects.equals(this.paymentAddress, embeddedWalletAddressDetails.paymentAddress)
                && Objects.equals(this.userDefined, embeddedWalletAddressDetails.userDefined)
                && Objects.equals(this.state, embeddedWalletAddressDetails.state);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountName,
                accountId,
                asset,
                address,
                addressType,
                addressDescription,
                tag,
                addressIndex,
                change,
                coinType,
                customerRefId,
                addressFormat,
                legacyAddress,
                paymentAddress,
                userDefined,
                state);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmbeddedWalletAddressDetails {\n");
        sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
        sb.append("    addressDescription: ")
                .append(toIndentedString(addressDescription))
                .append("\n");
        sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
        sb.append("    addressIndex: ").append(toIndentedString(addressIndex)).append("\n");
        sb.append("    change: ").append(toIndentedString(change)).append("\n");
        sb.append("    coinType: ").append(toIndentedString(coinType)).append("\n");
        sb.append("    customerRefId: ").append(toIndentedString(customerRefId)).append("\n");
        sb.append("    addressFormat: ").append(toIndentedString(addressFormat)).append("\n");
        sb.append("    legacyAddress: ").append(toIndentedString(legacyAddress)).append("\n");
        sb.append("    paymentAddress: ").append(toIndentedString(paymentAddress)).append("\n");
        sb.append("    userDefined: ").append(toIndentedString(userDefined)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `accountName` to the URL query string
        if (getAccountName() != null) {
            joiner.add(
                    String.format(
                            "%saccountName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAccountName()))));
        }

        // add `accountId` to the URL query string
        if (getAccountId() != null) {
            joiner.add(
                    String.format(
                            "%saccountId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAccountId()))));
        }

        // add `asset` to the URL query string
        if (getAsset() != null) {
            joiner.add(
                    String.format(
                            "%sasset%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAsset()))));
        }

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(
                    String.format(
                            "%saddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddress()))));
        }

        // add `addressType` to the URL query string
        if (getAddressType() != null) {
            joiner.add(
                    String.format(
                            "%saddressType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddressType()))));
        }

        // add `addressDescription` to the URL query string
        if (getAddressDescription() != null) {
            joiner.add(
                    String.format(
                            "%saddressDescription%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddressDescription()))));
        }

        // add `tag` to the URL query string
        if (getTag() != null) {
            joiner.add(
                    String.format(
                            "%stag%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTag()))));
        }

        // add `addressIndex` to the URL query string
        if (getAddressIndex() != null) {
            joiner.add(
                    String.format(
                            "%saddressIndex%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddressIndex()))));
        }

        // add `change` to the URL query string
        if (getChange() != null) {
            joiner.add(
                    String.format(
                            "%schange%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getChange()))));
        }

        // add `coinType` to the URL query string
        if (getCoinType() != null) {
            joiner.add(
                    String.format(
                            "%scoinType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCoinType()))));
        }

        // add `customerRefId` to the URL query string
        if (getCustomerRefId() != null) {
            joiner.add(
                    String.format(
                            "%scustomerRefId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCustomerRefId()))));
        }

        // add `addressFormat` to the URL query string
        if (getAddressFormat() != null) {
            joiner.add(
                    String.format(
                            "%saddressFormat%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddressFormat()))));
        }

        // add `legacyAddress` to the URL query string
        if (getLegacyAddress() != null) {
            joiner.add(
                    String.format(
                            "%slegacyAddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLegacyAddress()))));
        }

        // add `paymentAddress` to the URL query string
        if (getPaymentAddress() != null) {
            joiner.add(
                    String.format(
                            "%spaymentAddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPaymentAddress()))));
        }

        // add `userDefined` to the URL query string
        if (getUserDefined() != null) {
            joiner.add(
                    String.format(
                            "%suserDefined%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUserDefined()))));
        }

        // add `state` to the URL query string
        if (getState() != null) {
            joiner.add(
                    String.format(
                            "%sstate%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getState()))));
        }

        return joiner.toString();
    }
}
