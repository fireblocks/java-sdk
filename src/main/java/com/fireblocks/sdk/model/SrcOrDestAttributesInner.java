/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fireblocks.sdk.model.PolicySrcOrDestSubType;
import com.fireblocks.sdk.model.PolicySrcOrDestType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fireblocks.sdk.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using=SrcOrDestAttributesInner.SrcOrDestAttributesInnerDeserializer.class)
@JsonSerialize(using = SrcOrDestAttributesInner.SrcOrDestAttributesInnerSerializer.class)
public class SrcOrDestAttributesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SrcOrDestAttributesInner.class.getName());

    public static class SrcOrDestAttributesInnerSerializer extends StdSerializer<SrcOrDestAttributesInner> {
        public SrcOrDestAttributesInnerSerializer(Class<SrcOrDestAttributesInner> t) {
            super(t);
        }

        public SrcOrDestAttributesInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(SrcOrDestAttributesInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class SrcOrDestAttributesInnerDeserializer extends StdDeserializer<SrcOrDestAttributesInner> {
        public SrcOrDestAttributesInnerDeserializer() {
            this(SrcOrDestAttributesInner.class);
        }

        public SrcOrDestAttributesInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public SrcOrDestAttributesInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize PolicySrcOrDestSubType
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(PolicySrcOrDestSubType.class);
                SrcOrDestAttributesInner ret = new SrcOrDestAttributesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'SrcOrDestAttributesInner'", e);
            }

            // deserialize PolicySrcOrDestType
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(PolicySrcOrDestType.class);
                SrcOrDestAttributesInner ret = new SrcOrDestAttributesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'SrcOrDestAttributesInner'", e);
            }

            // deserialize String
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(String.class);
                SrcOrDestAttributesInner ret = new SrcOrDestAttributesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'SrcOrDestAttributesInner'", e);
            }

            throw new IOException(String.format("Failed deserialization for SrcOrDestAttributesInner: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public SrcOrDestAttributesInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "SrcOrDestAttributesInner cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SrcOrDestAttributesInner() {
        super("anyOf", Boolean.FALSE);
    }

    public SrcOrDestAttributesInner(PolicySrcOrDestSubType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SrcOrDestAttributesInner(PolicySrcOrDestType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SrcOrDestAttributesInner(String o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PolicySrcOrDestSubType", PolicySrcOrDestSubType.class);
        schemas.put("PolicySrcOrDestType", PolicySrcOrDestType.class);
        schemas.put("String", String.class);
        JSON.registerDescendants(SrcOrDestAttributesInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SrcOrDestAttributesInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * PolicySrcOrDestSubType, PolicySrcOrDestType, String
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PolicySrcOrDestSubType.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PolicySrcOrDestType.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(String.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PolicySrcOrDestSubType, PolicySrcOrDestType, String");
    }

    /**
     * Get the actual instance, which can be the following:
     * PolicySrcOrDestSubType, PolicySrcOrDestType, String
     *
     * @return The actual instance (PolicySrcOrDestSubType, PolicySrcOrDestType, String)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PolicySrcOrDestSubType`. If the actual instance is not `PolicySrcOrDestSubType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PolicySrcOrDestSubType`
     * @throws ClassCastException if the instance is not `PolicySrcOrDestSubType`
     */
    public PolicySrcOrDestSubType getPolicySrcOrDestSubType() throws ClassCastException {
        return (PolicySrcOrDestSubType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PolicySrcOrDestType`. If the actual instance is not `PolicySrcOrDestType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PolicySrcOrDestType`
     * @throws ClassCastException if the instance is not `PolicySrcOrDestType`
     */
    public PolicySrcOrDestType getPolicySrcOrDestType() throws ClassCastException {
        return (PolicySrcOrDestType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    return null;
  }

}

