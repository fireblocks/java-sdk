/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** Verdict configuration */
@JsonPropertyOrder({
    VerdictConfig.JSON_PROPERTY_ACTION,
    VerdictConfig.JSON_PROPERTY_APPROVERS,
    VerdictConfig.JSON_PROPERTY_DESIGNATED_SIGNERS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class VerdictConfig {
    /** Verdict action */
    public enum ActionEnum {
        ALLOW(String.valueOf("ALLOW")),

        BLOCK(String.valueOf("BLOCK")),

        _2_TIER(String.valueOf("2-TIER")),

        ACCEPT(String.valueOf("ACCEPT")),

        REJECT(String.valueOf("REJECT")),

        ALERT(String.valueOf("ALERT")),

        SCREEN(String.valueOf("SCREEN")),

        PASS(String.valueOf("PASS")),

        WAIT(String.valueOf("WAIT")),

        FREEZE(String.valueOf("FREEZE")),

        CANCEL(String.valueOf("CANCEL"));

        private String value;

        ActionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ActionEnum fromValue(String value) {
            for (ActionEnum b : ActionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ACTION = "action";
    @jakarta.annotation.Nonnull private ActionEnum action;

    public static final String JSON_PROPERTY_APPROVERS = "approvers";
    @jakarta.annotation.Nullable private ApproversConfig approvers;

    public static final String JSON_PROPERTY_DESIGNATED_SIGNERS = "designatedSigners";
    @jakarta.annotation.Nullable private DesignatedSignersConfig designatedSigners;

    public VerdictConfig() {}

    @JsonCreator
    public VerdictConfig(
            @JsonProperty(value = JSON_PROPERTY_ACTION, required = true) ActionEnum action) {
        this.action = action;
    }

    public VerdictConfig action(@jakarta.annotation.Nonnull ActionEnum action) {
        this.action = action;
        return this;
    }

    /**
     * Verdict action
     *
     * @return action
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ActionEnum getAction() {
        return action;
    }

    @JsonProperty(JSON_PROPERTY_ACTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAction(@jakarta.annotation.Nonnull ActionEnum action) {
        this.action = action;
    }

    public VerdictConfig approvers(@jakarta.annotation.Nullable ApproversConfig approvers) {
        this.approvers = approvers;
        return this;
    }

    /**
     * Get approvers
     *
     * @return approvers
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPROVERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ApproversConfig getApprovers() {
        return approvers;
    }

    @JsonProperty(JSON_PROPERTY_APPROVERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApprovers(@jakarta.annotation.Nullable ApproversConfig approvers) {
        this.approvers = approvers;
    }

    public VerdictConfig designatedSigners(
            @jakarta.annotation.Nullable DesignatedSignersConfig designatedSigners) {
        this.designatedSigners = designatedSigners;
        return this;
    }

    /**
     * Get designatedSigners
     *
     * @return designatedSigners
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESIGNATED_SIGNERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DesignatedSignersConfig getDesignatedSigners() {
        return designatedSigners;
    }

    @JsonProperty(JSON_PROPERTY_DESIGNATED_SIGNERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDesignatedSigners(
            @jakarta.annotation.Nullable DesignatedSignersConfig designatedSigners) {
        this.designatedSigners = designatedSigners;
    }

    /** Return true if this VerdictConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerdictConfig verdictConfig = (VerdictConfig) o;
        return Objects.equals(this.action, verdictConfig.action)
                && Objects.equals(this.approvers, verdictConfig.approvers)
                && Objects.equals(this.designatedSigners, verdictConfig.designatedSigners);
    }

    @Override
    public int hashCode() {
        return Objects.hash(action, approvers, designatedSigners);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class VerdictConfig {\n");
        sb.append("    action: ").append(toIndentedString(action)).append("\n");
        sb.append("    approvers: ").append(toIndentedString(approvers)).append("\n");
        sb.append("    designatedSigners: ")
                .append(toIndentedString(designatedSigners))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `action` to the URL query string
        if (getAction() != null) {
            joiner.add(
                    String.format(
                            "%saction%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAction()))));
        }

        // add `approvers` to the URL query string
        if (getApprovers() != null) {
            joiner.add(getApprovers().toUrlQueryString(prefix + "approvers" + suffix));
        }

        // add `designatedSigners` to the URL query string
        if (getDesignatedSigners() != null) {
            joiner.add(
                    getDesignatedSigners().toUrlQueryString(prefix + "designatedSigners" + suffix));
        }

        return joiner.toString();
    }
}
