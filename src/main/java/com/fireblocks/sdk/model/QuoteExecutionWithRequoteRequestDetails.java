/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** QuoteExecutionWithRequoteRequestDetails */
@JsonPropertyOrder({
    QuoteExecutionWithRequoteRequestDetails.JSON_PROPERTY_TYPE,
    QuoteExecutionWithRequoteRequestDetails.JSON_PROPERTY_QUOTE_ID,
    QuoteExecutionWithRequoteRequestDetails.JSON_PROPERTY_RE_QUOTE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class QuoteExecutionWithRequoteRequestDetails {
    /** Order type for quote orders */
    public enum TypeEnum {
        QUOTE(String.valueOf("QUOTE"));

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private TypeEnum type;

    public static final String JSON_PROPERTY_QUOTE_ID = "quoteId";
    @jakarta.annotation.Nonnull private String quoteId;

    public static final String JSON_PROPERTY_RE_QUOTE = "reQuote";

    @jakarta.annotation.Nullable
    private QuoteExecutionWithRequoteRequestDetailsAllOfReQuote reQuote;

    public QuoteExecutionWithRequoteRequestDetails() {}

    @JsonCreator
    public QuoteExecutionWithRequoteRequestDetails(
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) TypeEnum type,
            @JsonProperty(value = JSON_PROPERTY_QUOTE_ID, required = true) String quoteId) {
        this.type = type;
        this.quoteId = quoteId;
    }

    public QuoteExecutionWithRequoteRequestDetails type(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Order type for quote orders
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
    }

    public QuoteExecutionWithRequoteRequestDetails quoteId(
            @jakarta.annotation.Nonnull String quoteId) {
        this.quoteId = quoteId;
        return this;
    }

    /**
     * Quote ID for quote orders
     *
     * @return quoteId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_QUOTE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getQuoteId() {
        return quoteId;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQuoteId(@jakarta.annotation.Nonnull String quoteId) {
        this.quoteId = quoteId;
    }

    public QuoteExecutionWithRequoteRequestDetails reQuote(
            @jakarta.annotation.Nullable
                    QuoteExecutionWithRequoteRequestDetailsAllOfReQuote reQuote) {
        this.reQuote = reQuote;
        return this;
    }

    /**
     * Get reQuote
     *
     * @return reQuote
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RE_QUOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public QuoteExecutionWithRequoteRequestDetailsAllOfReQuote getReQuote() {
        return reQuote;
    }

    @JsonProperty(JSON_PROPERTY_RE_QUOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReQuote(
            @jakarta.annotation.Nullable
                    QuoteExecutionWithRequoteRequestDetailsAllOfReQuote reQuote) {
        this.reQuote = reQuote;
    }

    /** Return true if this QuoteExecutionWithRequoteRequestDetails object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuoteExecutionWithRequoteRequestDetails quoteExecutionWithRequoteRequestDetails =
                (QuoteExecutionWithRequoteRequestDetails) o;
        return Objects.equals(this.type, quoteExecutionWithRequoteRequestDetails.type)
                && Objects.equals(this.quoteId, quoteExecutionWithRequoteRequestDetails.quoteId)
                && Objects.equals(this.reQuote, quoteExecutionWithRequoteRequestDetails.reQuote);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, quoteId, reQuote);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuoteExecutionWithRequoteRequestDetails {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
        sb.append("    reQuote: ").append(toIndentedString(reQuote)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `quoteId` to the URL query string
        if (getQuoteId() != null) {
            joiner.add(
                    String.format(
                            "%squoteId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteId()))));
        }

        // add `reQuote` to the URL query string
        if (getReQuote() != null) {
            joiner.add(getReQuote().toUrlQueryString(prefix + "reQuote" + suffix));
        }

        return joiner.toString();
    }
}
