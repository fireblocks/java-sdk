/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.StringJoiner;

/** AssetPriceResponse */
@JsonPropertyOrder({
    AssetPriceResponse.JSON_PROPERTY_LEGACY_ID,
    AssetPriceResponse.JSON_PROPERTY_LAST_UPDATE_AT,
    AssetPriceResponse.JSON_PROPERTY_CURRENCY,
    AssetPriceResponse.JSON_PROPERTY_PRICE,
    AssetPriceResponse.JSON_PROPERTY_SOURCE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AssetPriceResponse {
    public static final String JSON_PROPERTY_LEGACY_ID = "legacyId";
    @jakarta.annotation.Nonnull private String legacyId;

    public static final String JSON_PROPERTY_LAST_UPDATE_AT = "lastUpdateAt";
    @jakarta.annotation.Nonnull private BigDecimal lastUpdateAt;

    public static final String JSON_PROPERTY_CURRENCY = "currency";
    @jakarta.annotation.Nonnull private String currency;

    public static final String JSON_PROPERTY_PRICE = "price";
    @jakarta.annotation.Nonnull private BigDecimal price;

    /** Source of the price data */
    public enum SourceEnum {
        PUBLIC(String.valueOf("PUBLIC")),

        PRIVATE(String.valueOf("PRIVATE"));

        private String value;

        SourceEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SourceEnum fromValue(String value) {
            for (SourceEnum b : SourceEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_SOURCE = "source";
    @jakarta.annotation.Nonnull private SourceEnum source;

    public AssetPriceResponse() {}

    @JsonCreator
    public AssetPriceResponse(
            @JsonProperty(value = JSON_PROPERTY_LEGACY_ID, required = true) String legacyId,
            @JsonProperty(value = JSON_PROPERTY_LAST_UPDATE_AT, required = true)
                    BigDecimal lastUpdateAt,
            @JsonProperty(value = JSON_PROPERTY_CURRENCY, required = true) String currency,
            @JsonProperty(value = JSON_PROPERTY_PRICE, required = true) BigDecimal price,
            @JsonProperty(value = JSON_PROPERTY_SOURCE, required = true) SourceEnum source) {
        this.legacyId = legacyId;
        this.lastUpdateAt = lastUpdateAt;
        this.currency = currency;
        this.price = price;
        this.source = source;
    }

    public AssetPriceResponse legacyId(@jakarta.annotation.Nonnull String legacyId) {
        this.legacyId = legacyId;
        return this;
    }

    /**
     * The ID of the asset
     *
     * @return legacyId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LEGACY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getLegacyId() {
        return legacyId;
    }

    @JsonProperty(JSON_PROPERTY_LEGACY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLegacyId(@jakarta.annotation.Nonnull String legacyId) {
        this.legacyId = legacyId;
    }

    public AssetPriceResponse lastUpdateAt(@jakarta.annotation.Nonnull BigDecimal lastUpdateAt) {
        this.lastUpdateAt = lastUpdateAt;
        return this;
    }

    /**
     * Time of last price update
     *
     * @return lastUpdateAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LAST_UPDATE_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getLastUpdateAt() {
        return lastUpdateAt;
    }

    @JsonProperty(JSON_PROPERTY_LAST_UPDATE_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLastUpdateAt(@jakarta.annotation.Nonnull BigDecimal lastUpdateAt) {
        this.lastUpdateAt = lastUpdateAt;
    }

    public AssetPriceResponse currency(@jakarta.annotation.Nonnull String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Currency (according to ISO 4217 currency codes)
     *
     * @return currency
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCurrency() {
        return currency;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCurrency(@jakarta.annotation.Nonnull String currency) {
        this.currency = currency;
    }

    public AssetPriceResponse price(@jakarta.annotation.Nonnull BigDecimal price) {
        this.price = price;
        return this;
    }

    /**
     * Price in currency
     *
     * @return price
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPrice(@jakarta.annotation.Nonnull BigDecimal price) {
        this.price = price;
    }

    public AssetPriceResponse source(@jakarta.annotation.Nonnull SourceEnum source) {
        this.source = source;
        return this;
    }

    /**
     * Source of the price data
     *
     * @return source
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SourceEnum getSource() {
        return source;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSource(@jakarta.annotation.Nonnull SourceEnum source) {
        this.source = source;
    }

    /** Return true if this AssetPriceResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetPriceResponse assetPriceResponse = (AssetPriceResponse) o;
        return Objects.equals(this.legacyId, assetPriceResponse.legacyId)
                && Objects.equals(this.lastUpdateAt, assetPriceResponse.lastUpdateAt)
                && Objects.equals(this.currency, assetPriceResponse.currency)
                && Objects.equals(this.price, assetPriceResponse.price)
                && Objects.equals(this.source, assetPriceResponse.source);
    }

    @Override
    public int hashCode() {
        return Objects.hash(legacyId, lastUpdateAt, currency, price, source);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AssetPriceResponse {\n");
        sb.append("    legacyId: ").append(toIndentedString(legacyId)).append("\n");
        sb.append("    lastUpdateAt: ").append(toIndentedString(lastUpdateAt)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `legacyId` to the URL query string
        if (getLegacyId() != null) {
            joiner.add(
                    String.format(
                            "%slegacyId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLegacyId()))));
        }

        // add `lastUpdateAt` to the URL query string
        if (getLastUpdateAt() != null) {
            joiner.add(
                    String.format(
                            "%slastUpdateAt%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLastUpdateAt()))));
        }

        // add `currency` to the URL query string
        if (getCurrency() != null) {
            joiner.add(
                    String.format(
                            "%scurrency%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCurrency()))));
        }

        // add `price` to the URL query string
        if (getPrice() != null) {
            joiner.add(
                    String.format(
                            "%sprice%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPrice()))));
        }

        // add `source` to the URL query string
        if (getSource() != null) {
            joiner.add(
                    String.format(
                            "%ssource%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSource()))));
        }

        return joiner.toString();
    }
}
