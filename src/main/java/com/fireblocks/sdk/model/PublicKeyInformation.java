/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** PublicKeyInformation */
@JsonPropertyOrder({
    PublicKeyInformation.JSON_PROPERTY_ALGORITHM,
    PublicKeyInformation.JSON_PROPERTY_DERIVATION_PATH,
    PublicKeyInformation.JSON_PROPERTY_PUBLIC_KEY
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class PublicKeyInformation {
    /** Elliptic Curve */
    public enum AlgorithmEnum {
        MPC_ECDSA_SECP256_K1(String.valueOf("MPC_ECDSA_SECP256K1")),

        MPC_ECDSA_SECP256_R1(String.valueOf("MPC_ECDSA_SECP256R1")),

        MPC_EDDSA_ED25519(String.valueOf("MPC_EDDSA_ED25519"));

        private String value;

        AlgorithmEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AlgorithmEnum fromValue(String value) {
            for (AlgorithmEnum b : AlgorithmEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
    @jakarta.annotation.Nullable private AlgorithmEnum algorithm;

    public static final String JSON_PROPERTY_DERIVATION_PATH = "derivationPath";
    @jakarta.annotation.Nullable private List<Integer> derivationPath;

    public static final String JSON_PROPERTY_PUBLIC_KEY = "publicKey";
    @jakarta.annotation.Nullable private String publicKey;

    public PublicKeyInformation() {}

    public PublicKeyInformation algorithm(@jakarta.annotation.Nullable AlgorithmEnum algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Elliptic Curve
     *
     * @return algorithm
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AlgorithmEnum getAlgorithm() {
        return algorithm;
    }

    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAlgorithm(@jakarta.annotation.Nullable AlgorithmEnum algorithm) {
        this.algorithm = algorithm;
    }

    public PublicKeyInformation derivationPath(
            @jakarta.annotation.Nullable List<Integer> derivationPath) {
        this.derivationPath = derivationPath;
        return this;
    }

    public PublicKeyInformation addDerivationPathItem(Integer derivationPathItem) {
        if (this.derivationPath == null) {
            this.derivationPath = new ArrayList<>();
        }
        this.derivationPath.add(derivationPathItem);
        return this;
    }

    /**
     * BIP44 derivation path
     *
     * @return derivationPath
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DERIVATION_PATH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Integer> getDerivationPath() {
        return derivationPath;
    }

    @JsonProperty(JSON_PROPERTY_DERIVATION_PATH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDerivationPath(@jakarta.annotation.Nullable List<Integer> derivationPath) {
        this.derivationPath = derivationPath;
    }

    public PublicKeyInformation publicKey(@jakarta.annotation.Nullable String publicKey) {
        this.publicKey = publicKey;
        return this;
    }

    /**
     * Compressed/Uncompressed public key value in hex representation
     *
     * @return publicKey
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPublicKey() {
        return publicKey;
    }

    @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPublicKey(@jakarta.annotation.Nullable String publicKey) {
        this.publicKey = publicKey;
    }

    /** Return true if this PublicKeyInformation object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PublicKeyInformation publicKeyInformation = (PublicKeyInformation) o;
        return Objects.equals(this.algorithm, publicKeyInformation.algorithm)
                && Objects.equals(this.derivationPath, publicKeyInformation.derivationPath)
                && Objects.equals(this.publicKey, publicKeyInformation.publicKey);
    }

    @Override
    public int hashCode() {
        return Objects.hash(algorithm, derivationPath, publicKey);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PublicKeyInformation {\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("    derivationPath: ").append(toIndentedString(derivationPath)).append("\n");
        sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `algorithm` to the URL query string
        if (getAlgorithm() != null) {
            joiner.add(
                    String.format(
                            "%salgorithm%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAlgorithm()))));
        }

        // add `derivationPath` to the URL query string
        if (getDerivationPath() != null) {
            for (int i = 0; i < getDerivationPath().size(); i++) {
                joiner.add(
                        String.format(
                                "%sderivationPath%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getDerivationPath().get(i)))));
            }
        }

        // add `publicKey` to the URL query string
        if (getPublicKey() != null) {
            joiner.add(
                    String.format(
                            "%spublicKey%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPublicKey()))));
        }

        return joiner.toString();
    }
}
