/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** CollectionLinkDto */
@JsonPropertyOrder({
    CollectionLinkDto.JSON_PROPERTY_ID,
    CollectionLinkDto.JSON_PROPERTY_STATUS,
    CollectionLinkDto.JSON_PROPERTY_TYPE,
    CollectionLinkDto.JSON_PROPERTY_DISPLAY_NAME,
    CollectionLinkDto.JSON_PROPERTY_COLLECTION_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CollectionLinkDto {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    /** The collection status */
    public enum StatusEnum {
        PENDING("PENDING"),

        COMPLETED("COMPLETED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_TYPE = "type";
    private CollectionType type;

    public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
    private String displayName;

    public static final String JSON_PROPERTY_COLLECTION_METADATA = "collectionMetadata";
    private CollectionMetadataDto collectionMetadata;

    public CollectionLinkDto() {}

    public CollectionLinkDto id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The collection id
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public CollectionLinkDto status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * The collection status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public CollectionLinkDto type(CollectionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CollectionType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(CollectionType type) {
        this.type = type;
    }

    public CollectionLinkDto displayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * The display name of the collection. If was not provided, would be taken from the contract
     * template
     *
     * @return displayName
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDisplayName() {
        return displayName;
    }

    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public CollectionLinkDto collectionMetadata(CollectionMetadataDto collectionMetadata) {
        this.collectionMetadata = collectionMetadata;
        return this;
    }

    /**
     * The collection&#39;s metadata
     *
     * @return collectionMetadata
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COLLECTION_METADATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CollectionMetadataDto getCollectionMetadata() {
        return collectionMetadata;
    }

    @JsonProperty(JSON_PROPERTY_COLLECTION_METADATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCollectionMetadata(CollectionMetadataDto collectionMetadata) {
        this.collectionMetadata = collectionMetadata;
    }

    /** Return true if this CollectionLinkDto object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollectionLinkDto collectionLinkDto = (CollectionLinkDto) o;
        return Objects.equals(this.id, collectionLinkDto.id)
                && Objects.equals(this.status, collectionLinkDto.status)
                && Objects.equals(this.type, collectionLinkDto.type)
                && Objects.equals(this.displayName, collectionLinkDto.displayName)
                && Objects.equals(this.collectionMetadata, collectionLinkDto.collectionMetadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, status, type, displayName, collectionMetadata);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CollectionLinkDto {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    collectionMetadata: ")
                .append(toIndentedString(collectionMetadata))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `displayName` to the URL query string
        if (getDisplayName() != null) {
            joiner.add(
                    String.format(
                            "%sdisplayName%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDisplayName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `collectionMetadata` to the URL query string
        if (getCollectionMetadata() != null) {
            joiner.add(
                    getCollectionMetadata()
                            .toUrlQueryString(prefix + "collectionMetadata" + suffix));
        }

        return joiner.toString();
    }
}
