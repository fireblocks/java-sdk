/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** TokenLinkRequestDto */
@JsonPropertyOrder({
    TokenLinkRequestDto.JSON_PROPERTY_TYPE,
    TokenLinkRequestDto.JSON_PROPERTY_REF_ID,
    TokenLinkRequestDto.JSON_PROPERTY_DISPLAY_NAME
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class TokenLinkRequestDto {
    /** The type of token being linked */
    public enum TypeEnum {
        FUNGIBLE_TOKEN(String.valueOf("FUNGIBLE_TOKEN")),

        NON_FUNGIBLE_TOKEN(String.valueOf("NON_FUNGIBLE_TOKEN")),

        TOKEN_UTILITY(String.valueOf("TOKEN_UTILITY")),

        TOKEN_EXTENSION(String.valueOf("TOKEN_EXTENSION"));

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private TypeEnum type;

    public static final String JSON_PROPERTY_REF_ID = "refId";
    @jakarta.annotation.Nonnull private String refId;

    public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
    @jakarta.annotation.Nullable private String displayName;

    public TokenLinkRequestDto() {}

    @JsonCreator
    public TokenLinkRequestDto(
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) TypeEnum type,
            @JsonProperty(value = JSON_PROPERTY_REF_ID, required = true) String refId) {
        this.type = type;
        this.refId = refId;
    }

    public TokenLinkRequestDto type(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * The type of token being linked
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
    }

    public TokenLinkRequestDto refId(@jakarta.annotation.Nonnull String refId) {
        this.refId = refId;
        return this;
    }

    /**
     * The Fireblocks&#39; token link reference id. For example, &#39;BQ5R_BDESC_ABC&#39; if
     * it&#39;s a fungible asset
     *
     * @return refId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REF_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getRefId() {
        return refId;
    }

    @JsonProperty(JSON_PROPERTY_REF_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRefId(@jakarta.annotation.Nonnull String refId) {
        this.refId = refId;
    }

    public TokenLinkRequestDto displayName(@jakarta.annotation.Nullable String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * The token display name
     *
     * @return displayName
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDisplayName() {
        return displayName;
    }

    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDisplayName(@jakarta.annotation.Nullable String displayName) {
        this.displayName = displayName;
    }

    /** Return true if this TokenLinkRequestDto object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TokenLinkRequestDto tokenLinkRequestDto = (TokenLinkRequestDto) o;
        return Objects.equals(this.type, tokenLinkRequestDto.type)
                && Objects.equals(this.refId, tokenLinkRequestDto.refId)
                && Objects.equals(this.displayName, tokenLinkRequestDto.displayName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, refId, displayName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TokenLinkRequestDto {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `refId` to the URL query string
        if (getRefId() != null) {
            joiner.add(
                    String.format(
                            "%srefId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRefId()))));
        }

        // add `displayName` to the URL query string
        if (getDisplayName() != null) {
            joiner.add(
                    String.format(
                            "%sdisplayName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDisplayName()))));
        }

        return joiner.toString();
    }
}
