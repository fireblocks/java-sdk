/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** TxLog */
@JsonPropertyOrder({
    TxLog.JSON_PROPERTY_ADDRESS,
    TxLog.JSON_PROPERTY_TOPICS,
    TxLog.JSON_PROPERTY_DATA,
    TxLog.JSON_PROPERTY_BLOCK_NUMBER,
    TxLog.JSON_PROPERTY_TRANSACTION_HASH,
    TxLog.JSON_PROPERTY_TRANSACTION_INDEX,
    TxLog.JSON_PROPERTY_BLOCK_HASH,
    TxLog.JSON_PROPERTY_LOG_INDEX,
    TxLog.JSON_PROPERTY_REMOVED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TxLog {
    public static final String JSON_PROPERTY_ADDRESS = "address";
    private String address;

    public static final String JSON_PROPERTY_TOPICS = "topics";
    private List<String> topics = new ArrayList<>();

    public static final String JSON_PROPERTY_DATA = "data";
    private String data;

    public static final String JSON_PROPERTY_BLOCK_NUMBER = "blockNumber";
    private Integer blockNumber;

    public static final String JSON_PROPERTY_TRANSACTION_HASH = "transactionHash";
    private String transactionHash;

    public static final String JSON_PROPERTY_TRANSACTION_INDEX = "transactionIndex";
    private Integer transactionIndex;

    public static final String JSON_PROPERTY_BLOCK_HASH = "blockHash";
    private String blockHash;

    public static final String JSON_PROPERTY_LOG_INDEX = "logIndex";
    private Integer logIndex;

    public static final String JSON_PROPERTY_REMOVED = "removed";
    private Boolean removed;

    public TxLog() {}

    public TxLog address(String address) {
        this.address = address;
        return this;
    }

    /**
     * The log address
     *
     * @return address
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAddress() {
        return address;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddress(String address) {
        this.address = address;
    }

    public TxLog topics(List<String> topics) {
        this.topics = topics;
        return this;
    }

    public TxLog addTopicsItem(String topicsItem) {
        if (this.topics == null) {
            this.topics = new ArrayList<>();
        }
        this.topics.add(topicsItem);
        return this;
    }

    /**
     * Array of log topics
     *
     * @return topics
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOPICS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getTopics() {
        return topics;
    }

    @JsonProperty(JSON_PROPERTY_TOPICS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTopics(List<String> topics) {
        this.topics = topics;
    }

    public TxLog data(String data) {
        this.data = data;
        return this;
    }

    /**
     * The log data
     *
     * @return data
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getData() {
        return data;
    }

    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setData(String data) {
        this.data = data;
    }

    public TxLog blockNumber(Integer blockNumber) {
        this.blockNumber = blockNumber;
        return this;
    }

    /**
     * Block number where the log occurred
     *
     * @return blockNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BLOCK_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getBlockNumber() {
        return blockNumber;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBlockNumber(Integer blockNumber) {
        this.blockNumber = blockNumber;
    }

    public TxLog transactionHash(String transactionHash) {
        this.transactionHash = transactionHash;
        return this;
    }

    /**
     * Transaction hash associated with the log
     *
     * @return transactionHash
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTransactionHash() {
        return transactionHash;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTransactionHash(String transactionHash) {
        this.transactionHash = transactionHash;
    }

    public TxLog transactionIndex(Integer transactionIndex) {
        this.transactionIndex = transactionIndex;
        return this;
    }

    /**
     * Transaction index in the block
     *
     * @return transactionIndex
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TRANSACTION_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTransactionIndex() {
        return transactionIndex;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTransactionIndex(Integer transactionIndex) {
        this.transactionIndex = transactionIndex;
    }

    public TxLog blockHash(String blockHash) {
        this.blockHash = blockHash;
        return this;
    }

    /**
     * The hash of the block
     *
     * @return blockHash
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BLOCK_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBlockHash() {
        return blockHash;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBlockHash(String blockHash) {
        this.blockHash = blockHash;
    }

    public TxLog logIndex(Integer logIndex) {
        this.logIndex = logIndex;
        return this;
    }

    /**
     * Log index in the block
     *
     * @return logIndex
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LOG_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getLogIndex() {
        return logIndex;
    }

    @JsonProperty(JSON_PROPERTY_LOG_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLogIndex(Integer logIndex) {
        this.logIndex = logIndex;
    }

    public TxLog removed(Boolean removed) {
        this.removed = removed;
        return this;
    }

    /**
     * Indicates if the log was removed
     *
     * @return removed
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REMOVED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getRemoved() {
        return removed;
    }

    @JsonProperty(JSON_PROPERTY_REMOVED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRemoved(Boolean removed) {
        this.removed = removed;
    }

    /** Return true if this TxLog object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TxLog txLog = (TxLog) o;
        return Objects.equals(this.address, txLog.address)
                && Objects.equals(this.topics, txLog.topics)
                && Objects.equals(this.data, txLog.data)
                && Objects.equals(this.blockNumber, txLog.blockNumber)
                && Objects.equals(this.transactionHash, txLog.transactionHash)
                && Objects.equals(this.transactionIndex, txLog.transactionIndex)
                && Objects.equals(this.blockHash, txLog.blockHash)
                && Objects.equals(this.logIndex, txLog.logIndex)
                && Objects.equals(this.removed, txLog.removed);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                address,
                topics,
                data,
                blockNumber,
                transactionHash,
                transactionIndex,
                blockHash,
                logIndex,
                removed);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TxLog {\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
        sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
        sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
        sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
        sb.append("    logIndex: ").append(toIndentedString(logIndex)).append("\n");
        sb.append("    removed: ").append(toIndentedString(removed)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(
                    String.format(
                            "%saddress%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getAddress()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `topics` to the URL query string
        if (getTopics() != null) {
            for (int i = 0; i < getTopics().size(); i++) {
                joiner.add(
                        String.format(
                                "%stopics%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                String.valueOf(getTopics().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `data` to the URL query string
        if (getData() != null) {
            joiner.add(
                    String.format(
                            "%sdata%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getData()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `blockNumber` to the URL query string
        if (getBlockNumber() != null) {
            joiner.add(
                    String.format(
                            "%sblockNumber%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBlockNumber()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `transactionHash` to the URL query string
        if (getTransactionHash() != null) {
            joiner.add(
                    String.format(
                            "%stransactionHash%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getTransactionHash()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `transactionIndex` to the URL query string
        if (getTransactionIndex() != null) {
            joiner.add(
                    String.format(
                            "%stransactionIndex%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getTransactionIndex()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `blockHash` to the URL query string
        if (getBlockHash() != null) {
            joiner.add(
                    String.format(
                            "%sblockHash%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBlockHash()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `logIndex` to the URL query string
        if (getLogIndex() != null) {
            joiner.add(
                    String.format(
                            "%slogIndex%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getLogIndex()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `removed` to the URL query string
        if (getRemoved() != null) {
            joiner.add(
                    String.format(
                            "%sremoved%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getRemoved()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
