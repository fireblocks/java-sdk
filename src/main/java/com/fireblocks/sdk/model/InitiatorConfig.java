/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** Policy rule initiator configuration */
@JsonPropertyOrder({
    InitiatorConfig.JSON_PROPERTY_USERS,
    InitiatorConfig.JSON_PROPERTY_GROUPS,
    InitiatorConfig.JSON_PROPERTY_SERVICES,
    InitiatorConfig.JSON_PROPERTY_FB_ADMIN_GROUPS,
    InitiatorConfig.JSON_PROPERTY_EXCHANGE,
    InitiatorConfig.JSON_PROPERTY_OPERATOR
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class InitiatorConfig {
    public static final String JSON_PROPERTY_USERS = "users";
    @jakarta.annotation.Nullable private List<String> users = new ArrayList<>();

    public static final String JSON_PROPERTY_GROUPS = "groups";
    @jakarta.annotation.Nullable private List<String> groups = new ArrayList<>();

    public static final String JSON_PROPERTY_SERVICES = "services";
    @jakarta.annotation.Nullable private List<String> services = new ArrayList<>();

    public static final String JSON_PROPERTY_FB_ADMIN_GROUPS = "fbAdminGroups";
    @jakarta.annotation.Nullable private List<String> fbAdminGroups = new ArrayList<>();

    public static final String JSON_PROPERTY_EXCHANGE = "exchange";
    @jakarta.annotation.Nullable private List<String> exchange = new ArrayList<>();

    public static final String JSON_PROPERTY_OPERATOR = "operator";
    @jakarta.annotation.Nonnull private PolicyOperator operator;

    public InitiatorConfig() {}

    @JsonCreator
    public InitiatorConfig(
            @JsonProperty(value = JSON_PROPERTY_OPERATOR, required = true)
                    PolicyOperator operator) {
        this.operator = operator;
    }

    public InitiatorConfig users(@jakarta.annotation.Nullable List<String> users) {
        this.users = users;
        return this;
    }

    public InitiatorConfig addUsersItem(String usersItem) {
        if (this.users == null) {
            this.users = new ArrayList<>();
        }
        this.users.add(usersItem);
        return this;
    }

    /**
     * List of user IDs
     *
     * @return users
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getUsers() {
        return users;
    }

    @JsonProperty(JSON_PROPERTY_USERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUsers(@jakarta.annotation.Nullable List<String> users) {
        this.users = users;
    }

    public InitiatorConfig groups(@jakarta.annotation.Nullable List<String> groups) {
        this.groups = groups;
        return this;
    }

    public InitiatorConfig addGroupsItem(String groupsItem) {
        if (this.groups == null) {
            this.groups = new ArrayList<>();
        }
        this.groups.add(groupsItem);
        return this;
    }

    /**
     * List of policy group IDs
     *
     * @return groups
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getGroups() {
        return groups;
    }

    @JsonProperty(JSON_PROPERTY_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGroups(@jakarta.annotation.Nullable List<String> groups) {
        this.groups = groups;
    }

    public InitiatorConfig services(@jakarta.annotation.Nullable List<String> services) {
        this.services = services;
        return this;
    }

    public InitiatorConfig addServicesItem(String servicesItem) {
        if (this.services == null) {
            this.services = new ArrayList<>();
        }
        this.services.add(servicesItem);
        return this;
    }

    /**
     * Get services
     *
     * @return services
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SERVICES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getServices() {
        return services;
    }

    @JsonProperty(JSON_PROPERTY_SERVICES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setServices(@jakarta.annotation.Nullable List<String> services) {
        this.services = services;
    }

    public InitiatorConfig fbAdminGroups(@jakarta.annotation.Nullable List<String> fbAdminGroups) {
        this.fbAdminGroups = fbAdminGroups;
        return this;
    }

    public InitiatorConfig addFbAdminGroupsItem(String fbAdminGroupsItem) {
        if (this.fbAdminGroups == null) {
            this.fbAdminGroups = new ArrayList<>();
        }
        this.fbAdminGroups.add(fbAdminGroupsItem);
        return this;
    }

    /**
     * Get fbAdminGroups
     *
     * @return fbAdminGroups
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FB_ADMIN_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getFbAdminGroups() {
        return fbAdminGroups;
    }

    @JsonProperty(JSON_PROPERTY_FB_ADMIN_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFbAdminGroups(@jakarta.annotation.Nullable List<String> fbAdminGroups) {
        this.fbAdminGroups = fbAdminGroups;
    }

    public InitiatorConfig exchange(@jakarta.annotation.Nullable List<String> exchange) {
        this.exchange = exchange;
        return this;
    }

    public InitiatorConfig addExchangeItem(String exchangeItem) {
        if (this.exchange == null) {
            this.exchange = new ArrayList<>();
        }
        this.exchange.add(exchangeItem);
        return this;
    }

    /**
     * Get exchange
     *
     * @return exchange
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXCHANGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getExchange() {
        return exchange;
    }

    @JsonProperty(JSON_PROPERTY_EXCHANGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExchange(@jakarta.annotation.Nullable List<String> exchange) {
        this.exchange = exchange;
    }

    public InitiatorConfig operator(@jakarta.annotation.Nonnull PolicyOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get operator
     *
     * @return operator
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PolicyOperator getOperator() {
        return operator;
    }

    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOperator(@jakarta.annotation.Nonnull PolicyOperator operator) {
        this.operator = operator;
    }

    /** Return true if this InitiatorConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InitiatorConfig initiatorConfig = (InitiatorConfig) o;
        return Objects.equals(this.users, initiatorConfig.users)
                && Objects.equals(this.groups, initiatorConfig.groups)
                && Objects.equals(this.services, initiatorConfig.services)
                && Objects.equals(this.fbAdminGroups, initiatorConfig.fbAdminGroups)
                && Objects.equals(this.exchange, initiatorConfig.exchange)
                && Objects.equals(this.operator, initiatorConfig.operator);
    }

    @Override
    public int hashCode() {
        return Objects.hash(users, groups, services, fbAdminGroups, exchange, operator);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InitiatorConfig {\n");
        sb.append("    users: ").append(toIndentedString(users)).append("\n");
        sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
        sb.append("    services: ").append(toIndentedString(services)).append("\n");
        sb.append("    fbAdminGroups: ").append(toIndentedString(fbAdminGroups)).append("\n");
        sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `users` to the URL query string
        if (getUsers() != null) {
            for (int i = 0; i < getUsers().size(); i++) {
                joiner.add(
                        String.format(
                                "%susers%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(ApiClient.valueToString(getUsers().get(i)))));
            }
        }

        // add `groups` to the URL query string
        if (getGroups() != null) {
            for (int i = 0; i < getGroups().size(); i++) {
                joiner.add(
                        String.format(
                                "%sgroups%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(ApiClient.valueToString(getGroups().get(i)))));
            }
        }

        // add `services` to the URL query string
        if (getServices() != null) {
            for (int i = 0; i < getServices().size(); i++) {
                joiner.add(
                        String.format(
                                "%sservices%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getServices().get(i)))));
            }
        }

        // add `fbAdminGroups` to the URL query string
        if (getFbAdminGroups() != null) {
            for (int i = 0; i < getFbAdminGroups().size(); i++) {
                joiner.add(
                        String.format(
                                "%sfbAdminGroups%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getFbAdminGroups().get(i)))));
            }
        }

        // add `exchange` to the URL query string
        if (getExchange() != null) {
            for (int i = 0; i < getExchange().size(); i++) {
                joiner.add(
                        String.format(
                                "%sexchange%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getExchange().get(i)))));
            }
        }

        // add `operator` to the URL query string
        if (getOperator() != null) {
            joiner.add(
                    String.format(
                            "%soperator%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOperator()))));
        }

        return joiner.toString();
    }
}
