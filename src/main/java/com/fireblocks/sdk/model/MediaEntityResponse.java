/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** MediaEntityResponse */
@JsonPropertyOrder({
    MediaEntityResponse.JSON_PROPERTY_URL,
    MediaEntityResponse.JSON_PROPERTY_CONTENT_TYPE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class MediaEntityResponse {
    public static final String JSON_PROPERTY_URL = "url";
    @jakarta.annotation.Nonnull private String url;

    /** Media type */
    public enum ContentTypeEnum {
        IMAGE(String.valueOf("IMAGE")),

        VIDEO(String.valueOf("VIDEO")),

        ANIMATION(String.valueOf("ANIMATION")),

        THREE_D(String.valueOf("THREE_D")),

        TEXT(String.valueOf("TEXT")),

        GIF(String.valueOf("GIF")),

        UNKNOWN_TYPE(String.valueOf("UNKNOWN_TYPE")),

        SVG(String.valueOf("SVG")),

        AUDIO(String.valueOf("AUDIO"));

        private String value;

        ContentTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ContentTypeEnum fromValue(String value) {
            for (ContentTypeEnum b : ContentTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_CONTENT_TYPE = "contentType";
    @jakarta.annotation.Nonnull private ContentTypeEnum contentType;

    public MediaEntityResponse() {}

    @JsonCreator
    public MediaEntityResponse(
            @JsonProperty(value = JSON_PROPERTY_URL, required = true) String url,
            @JsonProperty(value = JSON_PROPERTY_CONTENT_TYPE, required = true)
                    ContentTypeEnum contentType) {
        this.url = url;
        this.contentType = contentType;
    }

    public MediaEntityResponse url(@jakarta.annotation.Nonnull String url) {
        this.url = url;
        return this;
    }

    /**
     * Cached accessible URL
     *
     * @return url
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUrl(@jakarta.annotation.Nonnull String url) {
        this.url = url;
    }

    public MediaEntityResponse contentType(
            @jakarta.annotation.Nonnull ContentTypeEnum contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Media type
     *
     * @return contentType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ContentTypeEnum getContentType() {
        return contentType;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setContentType(@jakarta.annotation.Nonnull ContentTypeEnum contentType) {
        this.contentType = contentType;
    }

    /** Return true if this MediaEntityResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MediaEntityResponse mediaEntityResponse = (MediaEntityResponse) o;
        return Objects.equals(this.url, mediaEntityResponse.url)
                && Objects.equals(this.contentType, mediaEntityResponse.contentType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(url, contentType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MediaEntityResponse {\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `url` to the URL query string
        if (getUrl() != null) {
            joiner.add(
                    String.format(
                            "%surl%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUrl()))));
        }

        // add `contentType` to the URL query string
        if (getContentType() != null) {
            joiner.add(
                    String.format(
                            "%scontentType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getContentType()))));
        }

        return joiner.toString();
    }
}
