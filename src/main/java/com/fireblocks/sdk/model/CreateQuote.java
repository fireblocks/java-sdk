/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** CreateQuote */
@JsonPropertyOrder({
    CreateQuote.JSON_PROPERTY_SCOPE,
    CreateQuote.JSON_PROPERTY_BASE_ASSET_ID,
    CreateQuote.JSON_PROPERTY_BASE_ASSET_RAIL,
    CreateQuote.JSON_PROPERTY_QUOTE_ASSET_ID,
    CreateQuote.JSON_PROPERTY_QUOTE_ASSET_RAIL,
    CreateQuote.JSON_PROPERTY_BASE_AMOUNT,
    CreateQuote.JSON_PROPERTY_SLIPPAGE_BPS,
    CreateQuote.JSON_PROPERTY_SETTLEMENT,
    CreateQuote.JSON_PROPERTY_SIDE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class CreateQuote {
    public static final String JSON_PROPERTY_SCOPE = "scope";
    @jakarta.annotation.Nonnull private List<CreateQuoteScopeInner> scope;

    public static final String JSON_PROPERTY_BASE_ASSET_ID = "baseAssetId";
    @jakarta.annotation.Nonnull private String baseAssetId;

    public static final String JSON_PROPERTY_BASE_ASSET_RAIL = "baseAssetRail";
    @jakarta.annotation.Nullable private TransferRail baseAssetRail;

    public static final String JSON_PROPERTY_QUOTE_ASSET_ID = "quoteAssetId";
    @jakarta.annotation.Nonnull private String quoteAssetId;

    public static final String JSON_PROPERTY_QUOTE_ASSET_RAIL = "quoteAssetRail";
    @jakarta.annotation.Nullable private TransferRail quoteAssetRail;

    public static final String JSON_PROPERTY_BASE_AMOUNT = "baseAmount";
    @jakarta.annotation.Nonnull private String baseAmount;

    public static final String JSON_PROPERTY_SLIPPAGE_BPS = "slippageBps";
    @jakarta.annotation.Nullable private BigDecimal slippageBps = new BigDecimal("50");

    public static final String JSON_PROPERTY_SETTLEMENT = "settlement";
    @jakarta.annotation.Nullable private DVPSettlement settlement;

    /** Side of the order */
    public enum SideEnum {
        BUY(String.valueOf("BUY")),

        SELL(String.valueOf("SELL"));

        private String value;

        SideEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SideEnum fromValue(String value) {
            for (SideEnum b : SideEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_SIDE = "side";
    @jakarta.annotation.Nonnull private SideEnum side;

    public CreateQuote() {}

    @JsonCreator
    public CreateQuote(
            @JsonProperty(value = JSON_PROPERTY_SCOPE, required = true)
                    List<CreateQuoteScopeInner> scope,
            @JsonProperty(value = JSON_PROPERTY_BASE_ASSET_ID, required = true) String baseAssetId,
            @JsonProperty(value = JSON_PROPERTY_QUOTE_ASSET_ID, required = true)
                    String quoteAssetId,
            @JsonProperty(value = JSON_PROPERTY_BASE_AMOUNT, required = true) String baseAmount,
            @JsonProperty(value = JSON_PROPERTY_SIDE, required = true) SideEnum side) {
        this.scope = scope;
        this.baseAssetId = baseAssetId;
        this.quoteAssetId = quoteAssetId;
        this.baseAmount = baseAmount;
        this.side = side;
    }

    public CreateQuote scope(@jakarta.annotation.Nonnull List<CreateQuoteScopeInner> scope) {
        this.scope = scope;
        return this;
    }

    public CreateQuote addScopeItem(CreateQuoteScopeInner scopeItem) {
        if (this.scope == null) {
            this.scope = new ArrayList<>();
        }
        this.scope.add(scopeItem);
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<CreateQuoteScopeInner> getScope() {
        return scope;
    }

    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setScope(@jakarta.annotation.Nonnull List<CreateQuoteScopeInner> scope) {
        this.scope = scope;
    }

    public CreateQuote baseAssetId(@jakarta.annotation.Nonnull String baseAssetId) {
        this.baseAssetId = baseAssetId;
        return this;
    }

    /**
     * Get baseAssetId
     *
     * @return baseAssetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBaseAssetId() {
        return baseAssetId;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAssetId(@jakarta.annotation.Nonnull String baseAssetId) {
        this.baseAssetId = baseAssetId;
    }

    public CreateQuote baseAssetRail(@jakarta.annotation.Nullable TransferRail baseAssetRail) {
        this.baseAssetRail = baseAssetRail;
        return this;
    }

    /**
     * Get baseAssetRail
     *
     * @return baseAssetRail
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BASE_ASSET_RAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TransferRail getBaseAssetRail() {
        return baseAssetRail;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET_RAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBaseAssetRail(@jakarta.annotation.Nullable TransferRail baseAssetRail) {
        this.baseAssetRail = baseAssetRail;
    }

    public CreateQuote quoteAssetId(@jakarta.annotation.Nonnull String quoteAssetId) {
        this.quoteAssetId = quoteAssetId;
        return this;
    }

    /**
     * Get quoteAssetId
     *
     * @return quoteAssetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getQuoteAssetId() {
        return quoteAssetId;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQuoteAssetId(@jakarta.annotation.Nonnull String quoteAssetId) {
        this.quoteAssetId = quoteAssetId;
    }

    public CreateQuote quoteAssetRail(@jakarta.annotation.Nullable TransferRail quoteAssetRail) {
        this.quoteAssetRail = quoteAssetRail;
        return this;
    }

    /**
     * Get quoteAssetRail
     *
     * @return quoteAssetRail
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_RAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TransferRail getQuoteAssetRail() {
        return quoteAssetRail;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_RAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuoteAssetRail(@jakarta.annotation.Nullable TransferRail quoteAssetRail) {
        this.quoteAssetRail = quoteAssetRail;
    }

    public CreateQuote baseAmount(@jakarta.annotation.Nonnull String baseAmount) {
        this.baseAmount = baseAmount;
        return this;
    }

    /**
     * The amount to convert from
     *
     * @return baseAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBaseAmount() {
        return baseAmount;
    }

    @JsonProperty(JSON_PROPERTY_BASE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAmount(@jakarta.annotation.Nonnull String baseAmount) {
        this.baseAmount = baseAmount;
    }

    public CreateQuote slippageBps(@jakarta.annotation.Nullable BigDecimal slippageBps) {
        this.slippageBps = slippageBps;
        return this;
    }

    /**
     * Slippage tolerance in basis points (bps) for defi quotes - 1 is 0.01% and 10000 is 100%
     * minimum: 1 maximum: 10000
     *
     * @return slippageBps
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SLIPPAGE_BPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getSlippageBps() {
        return slippageBps;
    }

    @JsonProperty(JSON_PROPERTY_SLIPPAGE_BPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSlippageBps(@jakarta.annotation.Nullable BigDecimal slippageBps) {
        this.slippageBps = slippageBps;
    }

    public CreateQuote settlement(@jakarta.annotation.Nullable DVPSettlement settlement) {
        this.settlement = settlement;
        return this;
    }

    /**
     * Get settlement
     *
     * @return settlement
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SETTLEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DVPSettlement getSettlement() {
        return settlement;
    }

    @JsonProperty(JSON_PROPERTY_SETTLEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSettlement(@jakarta.annotation.Nullable DVPSettlement settlement) {
        this.settlement = settlement;
    }

    public CreateQuote side(@jakarta.annotation.Nonnull SideEnum side) {
        this.side = side;
        return this;
    }

    /**
     * Side of the order
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SIDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SideEnum getSide() {
        return side;
    }

    @JsonProperty(JSON_PROPERTY_SIDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSide(@jakarta.annotation.Nonnull SideEnum side) {
        this.side = side;
    }

    /** Return true if this CreateQuote object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateQuote createQuote = (CreateQuote) o;
        return Objects.equals(this.scope, createQuote.scope)
                && Objects.equals(this.baseAssetId, createQuote.baseAssetId)
                && Objects.equals(this.baseAssetRail, createQuote.baseAssetRail)
                && Objects.equals(this.quoteAssetId, createQuote.quoteAssetId)
                && Objects.equals(this.quoteAssetRail, createQuote.quoteAssetRail)
                && Objects.equals(this.baseAmount, createQuote.baseAmount)
                && Objects.equals(this.slippageBps, createQuote.slippageBps)
                && Objects.equals(this.settlement, createQuote.settlement)
                && Objects.equals(this.side, createQuote.side);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                scope,
                baseAssetId,
                baseAssetRail,
                quoteAssetId,
                quoteAssetRail,
                baseAmount,
                slippageBps,
                settlement,
                side);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateQuote {\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("    baseAssetId: ").append(toIndentedString(baseAssetId)).append("\n");
        sb.append("    baseAssetRail: ").append(toIndentedString(baseAssetRail)).append("\n");
        sb.append("    quoteAssetId: ").append(toIndentedString(quoteAssetId)).append("\n");
        sb.append("    quoteAssetRail: ").append(toIndentedString(quoteAssetRail)).append("\n");
        sb.append("    baseAmount: ").append(toIndentedString(baseAmount)).append("\n");
        sb.append("    slippageBps: ").append(toIndentedString(slippageBps)).append("\n");
        sb.append("    settlement: ").append(toIndentedString(settlement)).append("\n");
        sb.append("    side: ").append(toIndentedString(side)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `scope` to the URL query string
        if (getScope() != null) {
            for (int i = 0; i < getScope().size(); i++) {
                if (getScope().get(i) != null) {
                    joiner.add(
                            getScope()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sscope%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `baseAssetId` to the URL query string
        if (getBaseAssetId() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAssetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBaseAssetId()))));
        }

        // add `baseAssetRail` to the URL query string
        if (getBaseAssetRail() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAssetRail%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBaseAssetRail()))));
        }

        // add `quoteAssetId` to the URL query string
        if (getQuoteAssetId() != null) {
            joiner.add(
                    String.format(
                            "%squoteAssetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteAssetId()))));
        }

        // add `quoteAssetRail` to the URL query string
        if (getQuoteAssetRail() != null) {
            joiner.add(
                    String.format(
                            "%squoteAssetRail%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteAssetRail()))));
        }

        // add `baseAmount` to the URL query string
        if (getBaseAmount() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAmount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBaseAmount()))));
        }

        // add `slippageBps` to the URL query string
        if (getSlippageBps() != null) {
            joiner.add(
                    String.format(
                            "%sslippageBps%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSlippageBps()))));
        }

        // add `settlement` to the URL query string
        if (getSettlement() != null) {
            joiner.add(getSettlement().toUrlQueryString(prefix + "settlement" + suffix));
        }

        // add `side` to the URL query string
        if (getSide() != null) {
            joiner.add(
                    String.format(
                            "%sside%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSide()))));
        }

        return joiner.toString();
    }
}
