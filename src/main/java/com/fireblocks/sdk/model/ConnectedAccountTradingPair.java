/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** ConnectedAccountTradingPair */
@JsonPropertyOrder({
    ConnectedAccountTradingPair.JSON_PROPERTY_ID,
    ConnectedAccountTradingPair.JSON_PROPERTY_BASE_ASSET_ID,
    ConnectedAccountTradingPair.JSON_PROPERTY_QUOTE_ASSET_ID,
    ConnectedAccountTradingPair.JSON_PROPERTY_SUPPORTED_TYPES
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ConnectedAccountTradingPair {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_BASE_ASSET_ID = "baseAssetId";
    @jakarta.annotation.Nonnull private String baseAssetId;

    public static final String JSON_PROPERTY_QUOTE_ASSET_ID = "quoteAssetId";
    @jakarta.annotation.Nonnull private String quoteAssetId;

    public static final String JSON_PROPERTY_SUPPORTED_TYPES = "supportedTypes";

    @jakarta.annotation.Nonnull
    private List<ConnectedAccountTradingPairSupportedType> supportedTypes = new ArrayList<>();

    public ConnectedAccountTradingPair() {}

    @JsonCreator
    public ConnectedAccountTradingPair(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_BASE_ASSET_ID, required = true) String baseAssetId,
            @JsonProperty(value = JSON_PROPERTY_QUOTE_ASSET_ID, required = true)
                    String quoteAssetId,
            @JsonProperty(value = JSON_PROPERTY_SUPPORTED_TYPES, required = true)
                    List<ConnectedAccountTradingPairSupportedType> supportedTypes) {
        this.id = id;
        this.baseAssetId = baseAssetId;
        this.quoteAssetId = quoteAssetId;
        this.supportedTypes = supportedTypes;
    }

    public ConnectedAccountTradingPair id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * The ID of the trading pair.
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public ConnectedAccountTradingPair baseAssetId(@jakarta.annotation.Nonnull String baseAssetId) {
        this.baseAssetId = baseAssetId;
        return this;
    }

    /**
     * The Symbol of the base asset.
     *
     * @return baseAssetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBaseAssetId() {
        return baseAssetId;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAssetId(@jakarta.annotation.Nonnull String baseAssetId) {
        this.baseAssetId = baseAssetId;
    }

    public ConnectedAccountTradingPair quoteAssetId(
            @jakarta.annotation.Nonnull String quoteAssetId) {
        this.quoteAssetId = quoteAssetId;
        return this;
    }

    /**
     * The symbol of the quote asset.
     *
     * @return quoteAssetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getQuoteAssetId() {
        return quoteAssetId;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQuoteAssetId(@jakarta.annotation.Nonnull String quoteAssetId) {
        this.quoteAssetId = quoteAssetId;
    }

    public ConnectedAccountTradingPair supportedTypes(
            @jakarta.annotation.Nonnull
                    List<ConnectedAccountTradingPairSupportedType> supportedTypes) {
        this.supportedTypes = supportedTypes;
        return this;
    }

    public ConnectedAccountTradingPair addSupportedTypesItem(
            ConnectedAccountTradingPairSupportedType supportedTypesItem) {
        if (this.supportedTypes == null) {
            this.supportedTypes = new ArrayList<>();
        }
        this.supportedTypes.add(supportedTypesItem);
        return this;
    }

    /**
     * Get supportedTypes
     *
     * @return supportedTypes
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SUPPORTED_TYPES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<ConnectedAccountTradingPairSupportedType> getSupportedTypes() {
        return supportedTypes;
    }

    @JsonProperty(JSON_PROPERTY_SUPPORTED_TYPES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSupportedTypes(
            @jakarta.annotation.Nonnull
                    List<ConnectedAccountTradingPairSupportedType> supportedTypes) {
        this.supportedTypes = supportedTypes;
    }

    /** Return true if this ConnectedAccountTradingPair object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectedAccountTradingPair connectedAccountTradingPair = (ConnectedAccountTradingPair) o;
        return Objects.equals(this.id, connectedAccountTradingPair.id)
                && Objects.equals(this.baseAssetId, connectedAccountTradingPair.baseAssetId)
                && Objects.equals(this.quoteAssetId, connectedAccountTradingPair.quoteAssetId)
                && Objects.equals(this.supportedTypes, connectedAccountTradingPair.supportedTypes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, baseAssetId, quoteAssetId, supportedTypes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConnectedAccountTradingPair {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    baseAssetId: ").append(toIndentedString(baseAssetId)).append("\n");
        sb.append("    quoteAssetId: ").append(toIndentedString(quoteAssetId)).append("\n");
        sb.append("    supportedTypes: ").append(toIndentedString(supportedTypes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `baseAssetId` to the URL query string
        if (getBaseAssetId() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAssetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBaseAssetId()))));
        }

        // add `quoteAssetId` to the URL query string
        if (getQuoteAssetId() != null) {
            joiner.add(
                    String.format(
                            "%squoteAssetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteAssetId()))));
        }

        // add `supportedTypes` to the URL query string
        if (getSupportedTypes() != null) {
            for (int i = 0; i < getSupportedTypes().size(); i++) {
                if (getSupportedTypes().get(i) != null) {
                    joiner.add(
                            String.format(
                                    "%ssupportedTypes%s%s=%s",
                                    prefix,
                                    suffix,
                                    "".equals(suffix)
                                            ? ""
                                            : String.format(
                                                    "%s%d%s", containerPrefix, i, containerSuffix),
                                    ApiClient.urlEncode(
                                            ApiClient.valueToString(getSupportedTypes().get(i)))));
                }
            }
        }

        return joiner.toString();
    }
}
