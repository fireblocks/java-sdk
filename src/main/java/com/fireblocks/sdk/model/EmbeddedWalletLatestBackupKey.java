/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** EmbeddedWalletLatestBackupKey */
@JsonPropertyOrder({
    EmbeddedWalletLatestBackupKey.JSON_PROPERTY_DEVICE_ID,
    EmbeddedWalletLatestBackupKey.JSON_PROPERTY_PUBLIC_KEY,
    EmbeddedWalletLatestBackupKey.JSON_PROPERTY_KEY_ID,
    EmbeddedWalletLatestBackupKey.JSON_PROPERTY_ALGORITHM
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class EmbeddedWalletLatestBackupKey {
    public static final String JSON_PROPERTY_DEVICE_ID = "deviceId";
    @jakarta.annotation.Nonnull private String deviceId;

    public static final String JSON_PROPERTY_PUBLIC_KEY = "publicKey";
    @jakarta.annotation.Nonnull private String publicKey;

    public static final String JSON_PROPERTY_KEY_ID = "keyId";
    @jakarta.annotation.Nonnull private String keyId;

    /** algorithm */
    public enum AlgorithmEnum {
        MPC_CMP_ECDSA_SECP256_K1(String.valueOf("MPC_CMP_ECDSA_SECP256K1")),

        MPC_CMP_EDDSA_ED25519(String.valueOf("MPC_CMP_EDDSA_ED25519")),

        MPC_ECDSA_SECP256_K1(String.valueOf("MPC_ECDSA_SECP256K1"));

        private String value;

        AlgorithmEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AlgorithmEnum fromValue(String value) {
            for (AlgorithmEnum b : AlgorithmEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
    @jakarta.annotation.Nonnull private AlgorithmEnum algorithm;

    public EmbeddedWalletLatestBackupKey() {}

    @JsonCreator
    public EmbeddedWalletLatestBackupKey(
            @JsonProperty(value = JSON_PROPERTY_DEVICE_ID, required = true) String deviceId,
            @JsonProperty(value = JSON_PROPERTY_PUBLIC_KEY, required = true) String publicKey,
            @JsonProperty(value = JSON_PROPERTY_KEY_ID, required = true) String keyId,
            @JsonProperty(value = JSON_PROPERTY_ALGORITHM, required = true)
                    AlgorithmEnum algorithm) {
        this.deviceId = deviceId;
        this.publicKey = publicKey;
        this.keyId = keyId;
        this.algorithm = algorithm;
    }

    public EmbeddedWalletLatestBackupKey deviceId(@jakarta.annotation.Nonnull String deviceId) {
        this.deviceId = deviceId;
        return this;
    }

    /**
     * deviceId
     *
     * @return deviceId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DEVICE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getDeviceId() {
        return deviceId;
    }

    @JsonProperty(JSON_PROPERTY_DEVICE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDeviceId(@jakarta.annotation.Nonnull String deviceId) {
        this.deviceId = deviceId;
    }

    public EmbeddedWalletLatestBackupKey publicKey(@jakarta.annotation.Nonnull String publicKey) {
        this.publicKey = publicKey;
        return this;
    }

    /**
     * publicKey
     *
     * @return publicKey
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getPublicKey() {
        return publicKey;
    }

    @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPublicKey(@jakarta.annotation.Nonnull String publicKey) {
        this.publicKey = publicKey;
    }

    public EmbeddedWalletLatestBackupKey keyId(@jakarta.annotation.Nonnull String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * keyId
     *
     * @return keyId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_KEY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getKeyId() {
        return keyId;
    }

    @JsonProperty(JSON_PROPERTY_KEY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setKeyId(@jakarta.annotation.Nonnull String keyId) {
        this.keyId = keyId;
    }

    public EmbeddedWalletLatestBackupKey algorithm(
            @jakarta.annotation.Nonnull AlgorithmEnum algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * algorithm
     *
     * @return algorithm
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AlgorithmEnum getAlgorithm() {
        return algorithm;
    }

    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAlgorithm(@jakarta.annotation.Nonnull AlgorithmEnum algorithm) {
        this.algorithm = algorithm;
    }

    /** Return true if this EmbeddedWalletLatestBackupKey object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbeddedWalletLatestBackupKey embeddedWalletLatestBackupKey =
                (EmbeddedWalletLatestBackupKey) o;
        return Objects.equals(this.deviceId, embeddedWalletLatestBackupKey.deviceId)
                && Objects.equals(this.publicKey, embeddedWalletLatestBackupKey.publicKey)
                && Objects.equals(this.keyId, embeddedWalletLatestBackupKey.keyId)
                && Objects.equals(this.algorithm, embeddedWalletLatestBackupKey.algorithm);
    }

    @Override
    public int hashCode() {
        return Objects.hash(deviceId, publicKey, keyId, algorithm);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmbeddedWalletLatestBackupKey {\n");
        sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
        sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
        sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `deviceId` to the URL query string
        if (getDeviceId() != null) {
            joiner.add(
                    String.format(
                            "%sdeviceId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDeviceId()))));
        }

        // add `publicKey` to the URL query string
        if (getPublicKey() != null) {
            joiner.add(
                    String.format(
                            "%spublicKey%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPublicKey()))));
        }

        // add `keyId` to the URL query string
        if (getKeyId() != null) {
            joiner.add(
                    String.format(
                            "%skeyId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getKeyId()))));
        }

        // add `algorithm` to the URL query string
        if (getAlgorithm() != null) {
            joiner.add(
                    String.format(
                            "%salgorithm%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAlgorithm()))));
        }

        return joiner.toString();
    }
}
