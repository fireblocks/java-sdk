/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/** Exchange account&#39;s type */
public enum ExchangeType {
    INDEPENDENT_RESERVE("INDEPENDENT_RESERVE"),

    ENCLAVE_MARKETS("ENCLAVE_MARKETS"),

    BIT("BIT"),

    COINFLEX("COINFLEX"),

    KUCOIN("KUCOIN"),

    PXS("PXS"),

    LIQUID("LIQUID"),

    BITHUMB("BITHUMB"),

    BITFINEX("BITFINEX"),

    BITSO("BITSO"),

    BITSTAMP("BITSTAMP"),

    KRAKEN("KRAKEN"),

    KRAKENINTL("KRAKENINTL"),

    BINANCE("BINANCE"),

    BINANCEUS("BINANCEUS"),

    CRYPTOCOM("CRYPTOCOM"),

    BYBIT_V2("BYBIT_V2"),

    COINBASEPRO("COINBASEPRO"),

    COINBASEPRIME("COINBASEPRIME"),

    COINBASEINTERNATIONAL("COINBASEINTERNATIONAL"),

    WHITEBIT("WHITEBIT"),

    COINBASEEXCHANGE("COINBASEEXCHANGE"),

    KORBIT("KORBIT"),

    HITBTC("HITBTC"),

    GEMINI("GEMINI"),

    CIRCLE("CIRCLE"),

    BITMEX("BITMEX"),

    HUOBI("HUOBI"),

    DERIBIT("DERIBIT"),

    OKCOIN_V5("OKCOIN_V5"),

    OKEX("OKEX"),

    COINMETRO("COINMETRO"),

    GATEIO("GATEIO"),

    SCRYPT("SCRYPT"),

    COINHAKO("COINHAKO"),

    LIGHTBIT("LIGHTBIT"),

    BULLISH("BULLISH"),

    CANVAS_CONNECT("CANVAS_CONNECT"),

    BITGET("BITGET"),

    LUNO("LUNO"),

    BIT_GENERA("BIT_GENERA"),

    TRANSFERO("TRANSFERO");

    private String value;

    ExchangeType(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    @JsonCreator
    public static ExchangeType fromValue(String value) {
        for (ExchangeType b : ExchangeType.values()) {
            if (b.value.equals(value)) {
                return b;
            }
        }
        throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        if (prefix == null) {
            prefix = "";
        }

        return String.format("%s=%s", prefix, this.toString());
    }
}
