/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** Smart transfers statistic */
@JsonPropertyOrder({
    SmartTransferStatistic.JSON_PROPERTY_INFLOW,
    SmartTransferStatistic.JSON_PROPERTY_OUTFLOW,
    SmartTransferStatistic.JSON_PROPERTY_TOTAL_ACTIVE_TICKETS,
    SmartTransferStatistic.JSON_PROPERTY_TOTAL_INACTIVE_TICKETS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SmartTransferStatistic {
    public static final String JSON_PROPERTY_INFLOW = "inflow";
    private SmartTransferStatisticInflow inflow;

    public static final String JSON_PROPERTY_OUTFLOW = "outflow";
    private SmartTransferStatisticOutflow outflow;

    public static final String JSON_PROPERTY_TOTAL_ACTIVE_TICKETS = "totalActiveTickets";
    private Integer totalActiveTickets;

    public static final String JSON_PROPERTY_TOTAL_INACTIVE_TICKETS = "totalInactiveTickets";
    private Integer totalInactiveTickets;

    public SmartTransferStatistic() {}

    public SmartTransferStatistic inflow(SmartTransferStatisticInflow inflow) {
        this.inflow = inflow;
        return this;
    }

    /**
     * Get inflow
     *
     * @return inflow
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INFLOW)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SmartTransferStatisticInflow getInflow() {
        return inflow;
    }

    @JsonProperty(JSON_PROPERTY_INFLOW)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInflow(SmartTransferStatisticInflow inflow) {
        this.inflow = inflow;
    }

    public SmartTransferStatistic outflow(SmartTransferStatisticOutflow outflow) {
        this.outflow = outflow;
        return this;
    }

    /**
     * Get outflow
     *
     * @return outflow
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTFLOW)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SmartTransferStatisticOutflow getOutflow() {
        return outflow;
    }

    @JsonProperty(JSON_PROPERTY_OUTFLOW)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutflow(SmartTransferStatisticOutflow outflow) {
        this.outflow = outflow;
    }

    public SmartTransferStatistic totalActiveTickets(Integer totalActiveTickets) {
        this.totalActiveTickets = totalActiveTickets;
        return this;
    }

    /**
     * Number of total active tickets
     *
     * @return totalActiveTickets
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL_ACTIVE_TICKETS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTotalActiveTickets() {
        return totalActiveTickets;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_ACTIVE_TICKETS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotalActiveTickets(Integer totalActiveTickets) {
        this.totalActiveTickets = totalActiveTickets;
    }

    public SmartTransferStatistic totalInactiveTickets(Integer totalInactiveTickets) {
        this.totalInactiveTickets = totalInactiveTickets;
        return this;
    }

    /**
     * Number of total inactive tickets (expired, canceled, completed)
     *
     * @return totalInactiveTickets
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL_INACTIVE_TICKETS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTotalInactiveTickets() {
        return totalInactiveTickets;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_INACTIVE_TICKETS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotalInactiveTickets(Integer totalInactiveTickets) {
        this.totalInactiveTickets = totalInactiveTickets;
    }

    /** Return true if this SmartTransferStatistic object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SmartTransferStatistic smartTransferStatistic = (SmartTransferStatistic) o;
        return Objects.equals(this.inflow, smartTransferStatistic.inflow)
                && Objects.equals(this.outflow, smartTransferStatistic.outflow)
                && Objects.equals(
                        this.totalActiveTickets, smartTransferStatistic.totalActiveTickets)
                && Objects.equals(
                        this.totalInactiveTickets, smartTransferStatistic.totalInactiveTickets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(inflow, outflow, totalActiveTickets, totalInactiveTickets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SmartTransferStatistic {\n");
        sb.append("    inflow: ").append(toIndentedString(inflow)).append("\n");
        sb.append("    outflow: ").append(toIndentedString(outflow)).append("\n");
        sb.append("    totalActiveTickets: ")
                .append(toIndentedString(totalActiveTickets))
                .append("\n");
        sb.append("    totalInactiveTickets: ")
                .append(toIndentedString(totalInactiveTickets))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `inflow` to the URL query string
        if (getInflow() != null) {
            joiner.add(getInflow().toUrlQueryString(prefix + "inflow" + suffix));
        }

        // add `outflow` to the URL query string
        if (getOutflow() != null) {
            joiner.add(getOutflow().toUrlQueryString(prefix + "outflow" + suffix));
        }

        // add `totalActiveTickets` to the URL query string
        if (getTotalActiveTickets() != null) {
            joiner.add(
                    String.format(
                            "%stotalActiveTickets%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getTotalActiveTickets()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `totalInactiveTickets` to the URL query string
        if (getTotalInactiveTickets() != null) {
            joiner.add(
                    String.format(
                            "%stotalInactiveTickets%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getTotalInactiveTickets()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
