/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** Return a quote with id that can be used for swap operation. */
@JsonPropertyOrder({
    WalletQuoteResponse.JSON_PROPERTY_PROTOCOL,
    WalletQuoteResponse.JSON_PROPERTY_INPUT_AMOUNT,
    WalletQuoteResponse.JSON_PROPERTY_INPUT_ASSET,
    WalletQuoteResponse.JSON_PROPERTY_SLIPPAGE_TOLERANCE,
    WalletQuoteResponse.JSON_PROPERTY_OUTPUT_MIN_AMOUNT,
    WalletQuoteResponse.JSON_PROPERTY_OUTPUT_MAX_AMOUNT,
    WalletQuoteResponse.JSON_PROPERTY_OUTPUT_ASSET,
    WalletQuoteResponse.JSON_PROPERTY_ADDITIONAL_DATA,
    WalletQuoteResponse.JSON_PROPERTY_PROVIDER_QUOTE_ID,
    WalletQuoteResponse.JSON_PROPERTY_EXPIRED_AT,
    WalletQuoteResponse.JSON_PROPERTY_REQUIRED_ACTIONS,
    WalletQuoteResponse.JSON_PROPERTY_ESTIMATED_FEES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WalletQuoteResponse {
    public static final String JSON_PROPERTY_PROTOCOL = "protocol";
    private SwapProviderProtocolsEnum protocol;

    public static final String JSON_PROPERTY_INPUT_AMOUNT = "inputAmount";
    private String inputAmount;

    public static final String JSON_PROPERTY_INPUT_ASSET = "inputAsset";
    private String inputAsset;

    public static final String JSON_PROPERTY_SLIPPAGE_TOLERANCE = "slippageTolerance";
    private BigDecimal slippageTolerance;

    public static final String JSON_PROPERTY_OUTPUT_MIN_AMOUNT = "outputMinAmount";
    private String outputMinAmount;

    public static final String JSON_PROPERTY_OUTPUT_MAX_AMOUNT = "outputMaxAmount";
    private String outputMaxAmount;

    public static final String JSON_PROPERTY_OUTPUT_ASSET = "outputAsset";
    private String outputAsset;

    public static final String JSON_PROPERTY_ADDITIONAL_DATA = "additionalData";
    private ProviderAdditionalData additionalData;

    public static final String JSON_PROPERTY_PROVIDER_QUOTE_ID = "providerQuoteId";
    private UUID providerQuoteId;

    public static final String JSON_PROPERTY_EXPIRED_AT = "expiredAt";
    private OffsetDateTime expiredAt;

    public static final String JSON_PROPERTY_REQUIRED_ACTIONS = "requiredActions";
    private List<SwapRequiredActionsEnum> requiredActions = new ArrayList<>();

    public static final String JSON_PROPERTY_ESTIMATED_FEES = "estimatedFees";
    private QuoteFee estimatedFees;

    public WalletQuoteResponse() {}

    public WalletQuoteResponse protocol(SwapProviderProtocolsEnum protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get protocol
     *
     * @return protocol
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SwapProviderProtocolsEnum getProtocol() {
        return protocol;
    }

    @JsonProperty(JSON_PROPERTY_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProtocol(SwapProviderProtocolsEnum protocol) {
        this.protocol = protocol;
    }

    public WalletQuoteResponse inputAmount(String inputAmount) {
        this.inputAmount = inputAmount;
        return this;
    }

    /**
     * The amount of tokens the swapper will provide
     *
     * @return inputAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INPUT_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getInputAmount() {
        return inputAmount;
    }

    @JsonProperty(JSON_PROPERTY_INPUT_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInputAmount(String inputAmount) {
        this.inputAmount = inputAmount;
    }

    public WalletQuoteResponse inputAsset(String inputAsset) {
        this.inputAsset = inputAsset;
        return this;
    }

    /**
     * The id of the asset the swapper will provide
     *
     * @return inputAsset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getInputAsset() {
        return inputAsset;
    }

    @JsonProperty(JSON_PROPERTY_INPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInputAsset(String inputAsset) {
        this.inputAsset = inputAsset;
    }

    public WalletQuoteResponse slippageTolerance(BigDecimal slippageTolerance) {
        this.slippageTolerance = slippageTolerance;
        return this;
    }

    /**
     * The slippage tolerance is a percentage. The slippage tolerance is the maximum amount the
     * price can change between the time the transaction is submitted and the time it is executed
     *
     * @return slippageTolerance
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SLIPPAGE_TOLERANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getSlippageTolerance() {
        return slippageTolerance;
    }

    @JsonProperty(JSON_PROPERTY_SLIPPAGE_TOLERANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSlippageTolerance(BigDecimal slippageTolerance) {
        this.slippageTolerance = slippageTolerance;
    }

    public WalletQuoteResponse outputMinAmount(String outputMinAmount) {
        this.outputMinAmount = outputMinAmount;
        return this;
    }

    /**
     * The minimum amount of tokens the swapper will receive
     *
     * @return outputMinAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTPUT_MIN_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOutputMinAmount() {
        return outputMinAmount;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_MIN_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutputMinAmount(String outputMinAmount) {
        this.outputMinAmount = outputMinAmount;
    }

    public WalletQuoteResponse outputMaxAmount(String outputMaxAmount) {
        this.outputMaxAmount = outputMaxAmount;
        return this;
    }

    /**
     * Maximum amount of tokens that the swapper will receive
     *
     * @return outputMaxAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTPUT_MAX_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOutputMaxAmount() {
        return outputMaxAmount;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_MAX_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutputMaxAmount(String outputMaxAmount) {
        this.outputMaxAmount = outputMaxAmount;
    }

    public WalletQuoteResponse outputAsset(String outputAsset) {
        this.outputAsset = outputAsset;
        return this;
    }

    /**
     * The id of the asset the swapper will receive
     *
     * @return outputAsset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOutputAsset() {
        return outputAsset;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutputAsset(String outputAsset) {
        this.outputAsset = outputAsset;
    }

    public WalletQuoteResponse additionalData(ProviderAdditionalData additionalData) {
        this.additionalData = additionalData;
        return this;
    }

    /**
     * Get additionalData
     *
     * @return additionalData
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDITIONAL_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ProviderAdditionalData getAdditionalData() {
        return additionalData;
    }

    @JsonProperty(JSON_PROPERTY_ADDITIONAL_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAdditionalData(ProviderAdditionalData additionalData) {
        this.additionalData = additionalData;
    }

    public WalletQuoteResponse providerQuoteId(UUID providerQuoteId) {
        this.providerQuoteId = providerQuoteId;
        return this;
    }

    /**
     * An identifier that uniquely identifies the received quote
     *
     * @return providerQuoteId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROVIDER_QUOTE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getProviderQuoteId() {
        return providerQuoteId;
    }

    @JsonProperty(JSON_PROPERTY_PROVIDER_QUOTE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProviderQuoteId(UUID providerQuoteId) {
        this.providerQuoteId = providerQuoteId;
    }

    public WalletQuoteResponse expiredAt(OffsetDateTime expiredAt) {
        this.expiredAt = expiredAt;
        return this;
    }

    /**
     * When was the received &#x60;providerQuoteId&#x60; is expired (ISO Date time).
     *
     * @return expiredAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getExpiredAt() {
        return expiredAt;
    }

    @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExpiredAt(OffsetDateTime expiredAt) {
        this.expiredAt = expiredAt;
    }

    public WalletQuoteResponse requiredActions(List<SwapRequiredActionsEnum> requiredActions) {
        this.requiredActions = requiredActions;
        return this;
    }

    public WalletQuoteResponse addRequiredActionsItem(SwapRequiredActionsEnum requiredActionsItem) {
        if (this.requiredActions == null) {
            this.requiredActions = new ArrayList<>();
        }
        this.requiredActions.add(requiredActionsItem);
        return this;
    }

    /**
     * The required actions for completing a swap operation
     *
     * @return requiredActions
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUIRED_ACTIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<SwapRequiredActionsEnum> getRequiredActions() {
        return requiredActions;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRED_ACTIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequiredActions(List<SwapRequiredActionsEnum> requiredActions) {
        this.requiredActions = requiredActions;
    }

    public WalletQuoteResponse estimatedFees(QuoteFee estimatedFees) {
        this.estimatedFees = estimatedFees;
        return this;
    }

    /**
     * Get estimatedFees
     *
     * @return estimatedFees
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ESTIMATED_FEES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public QuoteFee getEstimatedFees() {
        return estimatedFees;
    }

    @JsonProperty(JSON_PROPERTY_ESTIMATED_FEES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEstimatedFees(QuoteFee estimatedFees) {
        this.estimatedFees = estimatedFees;
    }

    /** Return true if this WalletQuoteResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WalletQuoteResponse walletQuoteResponse = (WalletQuoteResponse) o;
        return Objects.equals(this.protocol, walletQuoteResponse.protocol)
                && Objects.equals(this.inputAmount, walletQuoteResponse.inputAmount)
                && Objects.equals(this.inputAsset, walletQuoteResponse.inputAsset)
                && Objects.equals(this.slippageTolerance, walletQuoteResponse.slippageTolerance)
                && Objects.equals(this.outputMinAmount, walletQuoteResponse.outputMinAmount)
                && Objects.equals(this.outputMaxAmount, walletQuoteResponse.outputMaxAmount)
                && Objects.equals(this.outputAsset, walletQuoteResponse.outputAsset)
                && Objects.equals(this.additionalData, walletQuoteResponse.additionalData)
                && Objects.equals(this.providerQuoteId, walletQuoteResponse.providerQuoteId)
                && Objects.equals(this.expiredAt, walletQuoteResponse.expiredAt)
                && Objects.equals(this.requiredActions, walletQuoteResponse.requiredActions)
                && Objects.equals(this.estimatedFees, walletQuoteResponse.estimatedFees);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                protocol,
                inputAmount,
                inputAsset,
                slippageTolerance,
                outputMinAmount,
                outputMaxAmount,
                outputAsset,
                additionalData,
                providerQuoteId,
                expiredAt,
                requiredActions,
                estimatedFees);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WalletQuoteResponse {\n");
        sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
        sb.append("    inputAmount: ").append(toIndentedString(inputAmount)).append("\n");
        sb.append("    inputAsset: ").append(toIndentedString(inputAsset)).append("\n");
        sb.append("    slippageTolerance: ")
                .append(toIndentedString(slippageTolerance))
                .append("\n");
        sb.append("    outputMinAmount: ").append(toIndentedString(outputMinAmount)).append("\n");
        sb.append("    outputMaxAmount: ").append(toIndentedString(outputMaxAmount)).append("\n");
        sb.append("    outputAsset: ").append(toIndentedString(outputAsset)).append("\n");
        sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
        sb.append("    providerQuoteId: ").append(toIndentedString(providerQuoteId)).append("\n");
        sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
        sb.append("    requiredActions: ").append(toIndentedString(requiredActions)).append("\n");
        sb.append("    estimatedFees: ").append(toIndentedString(estimatedFees)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `protocol` to the URL query string
        if (getProtocol() != null) {
            joiner.add(
                    String.format(
                            "%sprotocol%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getProtocol()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `inputAmount` to the URL query string
        if (getInputAmount() != null) {
            joiner.add(
                    String.format(
                            "%sinputAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getInputAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `inputAsset` to the URL query string
        if (getInputAsset() != null) {
            joiner.add(
                    String.format(
                            "%sinputAsset%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getInputAsset()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `slippageTolerance` to the URL query string
        if (getSlippageTolerance() != null) {
            joiner.add(
                    String.format(
                            "%sslippageTolerance%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getSlippageTolerance()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputMinAmount` to the URL query string
        if (getOutputMinAmount() != null) {
            joiner.add(
                    String.format(
                            "%soutputMinAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputMinAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputMaxAmount` to the URL query string
        if (getOutputMaxAmount() != null) {
            joiner.add(
                    String.format(
                            "%soutputMaxAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputMaxAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputAsset` to the URL query string
        if (getOutputAsset() != null) {
            joiner.add(
                    String.format(
                            "%soutputAsset%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputAsset()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `additionalData` to the URL query string
        if (getAdditionalData() != null) {
            joiner.add(getAdditionalData().toUrlQueryString(prefix + "additionalData" + suffix));
        }

        // add `providerQuoteId` to the URL query string
        if (getProviderQuoteId() != null) {
            joiner.add(
                    String.format(
                            "%sproviderQuoteId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getProviderQuoteId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `expiredAt` to the URL query string
        if (getExpiredAt() != null) {
            joiner.add(
                    String.format(
                            "%sexpiredAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getExpiredAt()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requiredActions` to the URL query string
        if (getRequiredActions() != null) {
            for (int i = 0; i < getRequiredActions().size(); i++) {
                if (getRequiredActions().get(i) != null) {
                    joiner.add(
                            String.format(
                                    "%srequiredActions%s%s=%s",
                                    prefix,
                                    suffix,
                                    "".equals(suffix)
                                            ? ""
                                            : String.format(
                                                    "%s%d%s", containerPrefix, i, containerSuffix),
                                    URLEncoder.encode(
                                                    String.valueOf(getRequiredActions().get(i)),
                                                    StandardCharsets.UTF_8)
                                            .replaceAll("\\+", "%20")));
                }
            }
        }

        // add `estimatedFees` to the URL query string
        if (getEstimatedFees() != null) {
            joiner.add(getEstimatedFees().toUrlQueryString(prefix + "estimatedFees" + suffix));
        }

        return joiner.toString();
    }
}
