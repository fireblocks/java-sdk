/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** ContractAttributes */
@JsonPropertyOrder({
    ContractAttributes.JSON_PROPERTY_USE_CASES,
    ContractAttributes.JSON_PROPERTY_STANDARDS,
    ContractAttributes.JSON_PROPERTY_AUDITOR
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ContractAttributes {
    public static final String JSON_PROPERTY_USE_CASES = "useCases";
    @jakarta.annotation.Nonnull private List<String> useCases = new ArrayList<>();

    public static final String JSON_PROPERTY_STANDARDS = "standards";
    @jakarta.annotation.Nonnull private List<String> standards = new ArrayList<>();

    public static final String JSON_PROPERTY_AUDITOR = "auditor";
    @jakarta.annotation.Nonnull private AuditorData auditor;

    public ContractAttributes() {}

    @JsonCreator
    public ContractAttributes(
            @JsonProperty(value = JSON_PROPERTY_USE_CASES, required = true) List<String> useCases,
            @JsonProperty(value = JSON_PROPERTY_STANDARDS, required = true) List<String> standards,
            @JsonProperty(value = JSON_PROPERTY_AUDITOR, required = true) AuditorData auditor) {
        this.useCases = useCases;
        this.standards = standards;
        this.auditor = auditor;
    }

    public ContractAttributes useCases(@jakarta.annotation.Nonnull List<String> useCases) {
        this.useCases = useCases;
        return this;
    }

    public ContractAttributes addUseCasesItem(String useCasesItem) {
        if (this.useCases == null) {
            this.useCases = new ArrayList<>();
        }
        this.useCases.add(useCasesItem);
        return this;
    }

    /**
     * Get useCases
     *
     * @return useCases
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_USE_CASES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getUseCases() {
        return useCases;
    }

    @JsonProperty(JSON_PROPERTY_USE_CASES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUseCases(@jakarta.annotation.Nonnull List<String> useCases) {
        this.useCases = useCases;
    }

    public ContractAttributes standards(@jakarta.annotation.Nonnull List<String> standards) {
        this.standards = standards;
        return this;
    }

    public ContractAttributes addStandardsItem(String standardsItem) {
        if (this.standards == null) {
            this.standards = new ArrayList<>();
        }
        this.standards.add(standardsItem);
        return this;
    }

    /**
     * Get standards
     *
     * @return standards
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STANDARDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getStandards() {
        return standards;
    }

    @JsonProperty(JSON_PROPERTY_STANDARDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStandards(@jakarta.annotation.Nonnull List<String> standards) {
        this.standards = standards;
    }

    public ContractAttributes auditor(@jakarta.annotation.Nonnull AuditorData auditor) {
        this.auditor = auditor;
        return this;
    }

    /**
     * Get auditor
     *
     * @return auditor
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AUDITOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AuditorData getAuditor() {
        return auditor;
    }

    @JsonProperty(JSON_PROPERTY_AUDITOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAuditor(@jakarta.annotation.Nonnull AuditorData auditor) {
        this.auditor = auditor;
    }

    /** Return true if this ContractAttributes object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractAttributes contractAttributes = (ContractAttributes) o;
        return Objects.equals(this.useCases, contractAttributes.useCases)
                && Objects.equals(this.standards, contractAttributes.standards)
                && Objects.equals(this.auditor, contractAttributes.auditor);
    }

    @Override
    public int hashCode() {
        return Objects.hash(useCases, standards, auditor);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContractAttributes {\n");
        sb.append("    useCases: ").append(toIndentedString(useCases)).append("\n");
        sb.append("    standards: ").append(toIndentedString(standards)).append("\n");
        sb.append("    auditor: ").append(toIndentedString(auditor)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `useCases` to the URL query string
        if (getUseCases() != null) {
            for (int i = 0; i < getUseCases().size(); i++) {
                joiner.add(
                        String.format(
                                "%suseCases%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getUseCases().get(i)))));
            }
        }

        // add `standards` to the URL query string
        if (getStandards() != null) {
            for (int i = 0; i < getStandards().size(); i++) {
                joiner.add(
                        String.format(
                                "%sstandards%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getStandards().get(i)))));
            }
        }

        // add `auditor` to the URL query string
        if (getAuditor() != null) {
            joiner.add(getAuditor().toUrlQueryString(prefix + "auditor" + suffix));
        }

        return joiner.toString();
    }
}
