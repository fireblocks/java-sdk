/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** SwapProvider */
@JsonPropertyOrder({
    SwapProvider.JSON_PROPERTY_ID,
    SwapProvider.JSON_PROPERTY_NAME,
    SwapProvider.JSON_PROPERTY_PROTOCOLS,
    SwapProvider.JSON_PROPERTY_CATEGORY,
    SwapProvider.JSON_PROPERTY_IS_TERMS_APPROVAL_REQUIRED,
    SwapProvider.JSON_PROPERTY_TERMS_OF_SERVICE_URL,
    SwapProvider.JSON_PROPERTY_IS_TERMS_OF_SERVICE_APPROVED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SwapProvider {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_PROTOCOLS = "protocols";
    private List<SwapProviderProtocolsEnum> protocols = new ArrayList<>();

    public static final String JSON_PROPERTY_CATEGORY = "category";
    private ProviderCategoryEnum category;

    public static final String JSON_PROPERTY_IS_TERMS_APPROVAL_REQUIRED = "isTermsApprovalRequired";
    private Boolean isTermsApprovalRequired;

    public static final String JSON_PROPERTY_TERMS_OF_SERVICE_URL = "termsOfServiceUrl";
    private String termsOfServiceUrl;

    public static final String JSON_PROPERTY_IS_TERMS_OF_SERVICE_APPROVED =
            "isTermsOfServiceApproved";
    private Boolean isTermsOfServiceApproved;

    public SwapProvider() {}

    public SwapProvider id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The ID of the provider
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public SwapProvider name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of the provider
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public SwapProvider protocols(List<SwapProviderProtocolsEnum> protocols) {
        this.protocols = protocols;
        return this;
    }

    public SwapProvider addProtocolsItem(SwapProviderProtocolsEnum protocolsItem) {
        if (this.protocols == null) {
            this.protocols = new ArrayList<>();
        }
        this.protocols.add(protocolsItem);
        return this;
    }

    /**
     * List of supported protocols. Protocols are specific per provider
     *
     * @return protocols
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROTOCOLS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<SwapProviderProtocolsEnum> getProtocols() {
        return protocols;
    }

    @JsonProperty(JSON_PROPERTY_PROTOCOLS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProtocols(List<SwapProviderProtocolsEnum> protocols) {
        this.protocols = protocols;
    }

    public SwapProvider category(ProviderCategoryEnum category) {
        this.category = category;
        return this;
    }

    /**
     * Get category
     *
     * @return category
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ProviderCategoryEnum getCategory() {
        return category;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCategory(ProviderCategoryEnum category) {
        this.category = category;
    }

    public SwapProvider isTermsApprovalRequired(Boolean isTermsApprovalRequired) {
        this.isTermsApprovalRequired = isTermsApprovalRequired;
        return this;
    }

    /**
     * Indicates whether the terms of service are required for the provider. if &#x60;true&#x60;,
     * the user must approve the terms of service before using the provider. otherwise,
     * &#x60;termsOfServiceUrl&#x60; and &#x60;isTermsOfServiceApproved&#x60; are not shown under
     * the provider data.
     *
     * @return isTermsApprovalRequired
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_IS_TERMS_APPROVAL_REQUIRED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getIsTermsApprovalRequired() {
        return isTermsApprovalRequired;
    }

    @JsonProperty(JSON_PROPERTY_IS_TERMS_APPROVAL_REQUIRED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIsTermsApprovalRequired(Boolean isTermsApprovalRequired) {
        this.isTermsApprovalRequired = isTermsApprovalRequired;
    }

    public SwapProvider termsOfServiceUrl(String termsOfServiceUrl) {
        this.termsOfServiceUrl = termsOfServiceUrl;
        return this;
    }

    /**
     * URL to the terms of service
     *
     * @return termsOfServiceUrl
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TERMS_OF_SERVICE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTermsOfServiceUrl() {
        return termsOfServiceUrl;
    }

    @JsonProperty(JSON_PROPERTY_TERMS_OF_SERVICE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTermsOfServiceUrl(String termsOfServiceUrl) {
        this.termsOfServiceUrl = termsOfServiceUrl;
    }

    public SwapProvider isTermsOfServiceApproved(Boolean isTermsOfServiceApproved) {
        this.isTermsOfServiceApproved = isTermsOfServiceApproved;
        return this;
    }

    /**
     * Indicates whether the terms of service are approved by the user
     *
     * @return isTermsOfServiceApproved
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_IS_TERMS_OF_SERVICE_APPROVED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIsTermsOfServiceApproved() {
        return isTermsOfServiceApproved;
    }

    @JsonProperty(JSON_PROPERTY_IS_TERMS_OF_SERVICE_APPROVED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsTermsOfServiceApproved(Boolean isTermsOfServiceApproved) {
        this.isTermsOfServiceApproved = isTermsOfServiceApproved;
    }

    /** Return true if this SwapProvider object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SwapProvider swapProvider = (SwapProvider) o;
        return Objects.equals(this.id, swapProvider.id)
                && Objects.equals(this.name, swapProvider.name)
                && Objects.equals(this.protocols, swapProvider.protocols)
                && Objects.equals(this.category, swapProvider.category)
                && Objects.equals(
                        this.isTermsApprovalRequired, swapProvider.isTermsApprovalRequired)
                && Objects.equals(this.termsOfServiceUrl, swapProvider.termsOfServiceUrl)
                && Objects.equals(
                        this.isTermsOfServiceApproved, swapProvider.isTermsOfServiceApproved);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                protocols,
                category,
                isTermsApprovalRequired,
                termsOfServiceUrl,
                isTermsOfServiceApproved);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SwapProvider {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    isTermsApprovalRequired: ")
                .append(toIndentedString(isTermsApprovalRequired))
                .append("\n");
        sb.append("    termsOfServiceUrl: ")
                .append(toIndentedString(termsOfServiceUrl))
                .append("\n");
        sb.append("    isTermsOfServiceApproved: ")
                .append(toIndentedString(isTermsOfServiceApproved))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `protocols` to the URL query string
        if (getProtocols() != null) {
            for (int i = 0; i < getProtocols().size(); i++) {
                if (getProtocols().get(i) != null) {
                    joiner.add(
                            String.format(
                                    "%sprotocols%s%s=%s",
                                    prefix,
                                    suffix,
                                    "".equals(suffix)
                                            ? ""
                                            : String.format(
                                                    "%s%d%s", containerPrefix, i, containerSuffix),
                                    URLEncoder.encode(
                                                    String.valueOf(getProtocols().get(i)),
                                                    StandardCharsets.UTF_8)
                                            .replaceAll("\\+", "%20")));
                }
            }
        }

        // add `category` to the URL query string
        if (getCategory() != null) {
            joiner.add(
                    String.format(
                            "%scategory%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getCategory()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `isTermsApprovalRequired` to the URL query string
        if (getIsTermsApprovalRequired() != null) {
            joiner.add(
                    String.format(
                            "%sisTermsApprovalRequired%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getIsTermsApprovalRequired()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `termsOfServiceUrl` to the URL query string
        if (getTermsOfServiceUrl() != null) {
            joiner.add(
                    String.format(
                            "%stermsOfServiceUrl%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getTermsOfServiceUrl()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `isTermsOfServiceApproved` to the URL query string
        if (getIsTermsOfServiceApproved() != null) {
            joiner.add(
                    String.format(
                            "%sisTermsOfServiceApproved%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getIsTermsOfServiceApproved()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
