/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** AddCosignerResponse */
@JsonPropertyOrder({
    AddCosignerResponse.JSON_PROPERTY_API_KEY_ID,
    AddCosignerResponse.JSON_PROPERTY_NAME,
    AddCosignerResponse.JSON_PROPERTY_EXISTING_COSIGNER,
    AddCosignerResponse.JSON_PROPERTY_PENDING_COSIGNER_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AddCosignerResponse {
    public static final String JSON_PROPERTY_API_KEY_ID = "apiKeyId";
    private UUID apiKeyId;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_EXISTING_COSIGNER = "existingCosigner";
    private Boolean existingCosigner = false;

    public static final String JSON_PROPERTY_PENDING_COSIGNER_ID = "pendingCosignerId";
    private UUID pendingCosignerId;

    public AddCosignerResponse() {}

    public AddCosignerResponse apiKeyId(UUID apiKeyId) {
        this.apiKeyId = apiKeyId;
        return this;
    }

    /**
     * The id of the API key to be paired with the cosigner
     *
     * @return apiKeyId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_API_KEY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getApiKeyId() {
        return apiKeyId;
    }

    @JsonProperty(JSON_PROPERTY_API_KEY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setApiKeyId(UUID apiKeyId) {
        this.apiKeyId = apiKeyId;
    }

    public AddCosignerResponse name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the cosigner
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public AddCosignerResponse existingCosigner(Boolean existingCosigner) {
        this.existingCosigner = existingCosigner;
        return this;
    }

    /**
     * Whether the cosigner already exists in another workspace
     *
     * @return existingCosigner
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXISTING_COSIGNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getExistingCosigner() {
        return existingCosigner;
    }

    @JsonProperty(JSON_PROPERTY_EXISTING_COSIGNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExistingCosigner(Boolean existingCosigner) {
        this.existingCosigner = existingCosigner;
    }

    public AddCosignerResponse pendingCosignerId(UUID pendingCosignerId) {
        this.pendingCosignerId = pendingCosignerId;
        return this;
    }

    /**
     * The unique identifier of a pending cosigner
     *
     * @return pendingCosignerId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PENDING_COSIGNER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getPendingCosignerId() {
        return pendingCosignerId;
    }

    @JsonProperty(JSON_PROPERTY_PENDING_COSIGNER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPendingCosignerId(UUID pendingCosignerId) {
        this.pendingCosignerId = pendingCosignerId;
    }

    /** Return true if this AddCosignerResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddCosignerResponse addCosignerResponse = (AddCosignerResponse) o;
        return Objects.equals(this.apiKeyId, addCosignerResponse.apiKeyId)
                && Objects.equals(this.name, addCosignerResponse.name)
                && Objects.equals(this.existingCosigner, addCosignerResponse.existingCosigner)
                && Objects.equals(this.pendingCosignerId, addCosignerResponse.pendingCosignerId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(apiKeyId, name, existingCosigner, pendingCosignerId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AddCosignerResponse {\n");
        sb.append("    apiKeyId: ").append(toIndentedString(apiKeyId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    existingCosigner: ").append(toIndentedString(existingCosigner)).append("\n");
        sb.append("    pendingCosignerId: ")
                .append(toIndentedString(pendingCosignerId))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `apiKeyId` to the URL query string
        if (getApiKeyId() != null) {
            joiner.add(
                    String.format(
                            "%sapiKeyId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getApiKeyId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `existingCosigner` to the URL query string
        if (getExistingCosigner() != null) {
            joiner.add(
                    String.format(
                            "%sexistingCosigner%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getExistingCosigner()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `pendingCosignerId` to the URL query string
        if (getPendingCosignerId() != null) {
            joiner.add(
                    String.format(
                            "%spendingCosignerId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getPendingCosignerId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
