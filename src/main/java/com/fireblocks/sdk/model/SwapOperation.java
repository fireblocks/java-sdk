/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** SwapOperation */
@JsonPropertyOrder({
    SwapOperation.JSON_PROPERTY_ID,
    SwapOperation.JSON_PROPERTY_ACCOUNT_ID,
    SwapOperation.JSON_PROPERTY_PROVIDER_ID,
    SwapOperation.JSON_PROPERTY_CATEGORY,
    SwapOperation.JSON_PROPERTY_PROTOCOL,
    SwapOperation.JSON_PROPERTY_STATUS,
    SwapOperation.JSON_PROPERTY_INPUT_AMOUNT,
    SwapOperation.JSON_PROPERTY_INPUT_ASSET,
    SwapOperation.JSON_PROPERTY_SLIPPAGE_TOLERANCE,
    SwapOperation.JSON_PROPERTY_OUTPUT_MIN_AMOUNT,
    SwapOperation.JSON_PROPERTY_OUTPUT_MAX_AMOUNT,
    SwapOperation.JSON_PROPERTY_OUTPUT_ASSET,
    SwapOperation.JSON_PROPERTY_OUTPUT_FINAL_AMOUNT,
    SwapOperation.JSON_PROPERTY_REQUIRED_ACTIONS,
    SwapOperation.JSON_PROPERTY_ERROR,
    SwapOperation.JSON_PROPERTY_CREATED_AT,
    SwapOperation.JSON_PROPERTY_UPDATED_AT,
    SwapOperation.JSON_PROPERTY_CREATED_BY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SwapOperation {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
    private String accountId;

    public static final String JSON_PROPERTY_PROVIDER_ID = "providerId";
    private String providerId;

    public static final String JSON_PROPERTY_CATEGORY = "category";
    private ProviderCategoryEnum category;

    public static final String JSON_PROPERTY_PROTOCOL = "protocol";
    private SwapProviderProtocolsEnum protocol;

    /**
     * **CREATED** – The swap request has been created but not yet started. **PENDING_USER_ACTION**
     * – Awaiting a user action (e.g. signature or approval). **PENDING_PROVIDER_ACTION** – Awaiting
     * the provider to process the request. **PROCESSING** – The swap is actively being executed
     * on‐chain. **COMPLETED** – The swap has finished successfully. **CANCELED** – The swap was
     * cancelled by user or provider before completion. **FAILED** – The swap attempted but
     * encountered an error.
     */
    public enum StatusEnum {
        CREATED("CREATED"),

        TRANSACTION_IN_PROGRESS("TRANSACTION_IN_PROGRESS"),

        PENDING_PROVIDER_ACTION("PENDING_PROVIDER_ACTION"),

        COMPLETED("COMPLETED"),

        CANCELED("CANCELED"),

        FAILED("FAILED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_INPUT_AMOUNT = "inputAmount";
    private String inputAmount;

    public static final String JSON_PROPERTY_INPUT_ASSET = "inputAsset";
    private String inputAsset;

    public static final String JSON_PROPERTY_SLIPPAGE_TOLERANCE = "slippageTolerance";
    private BigDecimal slippageTolerance;

    public static final String JSON_PROPERTY_OUTPUT_MIN_AMOUNT = "outputMinAmount";
    private String outputMinAmount;

    public static final String JSON_PROPERTY_OUTPUT_MAX_AMOUNT = "outputMaxAmount";
    private String outputMaxAmount;

    public static final String JSON_PROPERTY_OUTPUT_ASSET = "outputAsset";
    private String outputAsset;

    public static final String JSON_PROPERTY_OUTPUT_FINAL_AMOUNT = "outputFinalAmount";
    private String outputFinalAmount;

    public static final String JSON_PROPERTY_REQUIRED_ACTIONS = "requiredActions";
    private List<SwapRequiredAction> requiredActions = new ArrayList<>();

    public static final String JSON_PROPERTY_ERROR = "error";
    private SwapFlowError error;

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    private OffsetDateTime updatedAt;

    public static final String JSON_PROPERTY_CREATED_BY = "createdBy";
    private UUID createdBy;

    public SwapOperation() {}

    public SwapOperation id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The id of the swap operation
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public SwapOperation accountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * The id of the vault account or account id
     *
     * @return accountId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountId() {
        return accountId;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public SwapOperation providerId(String providerId) {
        this.providerId = providerId;
        return this;
    }

    /**
     * The ID of the provider
     *
     * @return providerId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getProviderId() {
        return providerId;
    }

    @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProviderId(String providerId) {
        this.providerId = providerId;
    }

    public SwapOperation category(ProviderCategoryEnum category) {
        this.category = category;
        return this;
    }

    /**
     * Get category
     *
     * @return category
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ProviderCategoryEnum getCategory() {
        return category;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCategory(ProviderCategoryEnum category) {
        this.category = category;
    }

    public SwapOperation protocol(SwapProviderProtocolsEnum protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get protocol
     *
     * @return protocol
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SwapProviderProtocolsEnum getProtocol() {
        return protocol;
    }

    @JsonProperty(JSON_PROPERTY_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProtocol(SwapProviderProtocolsEnum protocol) {
        this.protocol = protocol;
    }

    public SwapOperation status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * **CREATED** – The swap request has been created but not yet started. **PENDING_USER_ACTION**
     * – Awaiting a user action (e.g. signature or approval). **PENDING_PROVIDER_ACTION** – Awaiting
     * the provider to process the request. **PROCESSING** – The swap is actively being executed
     * on‐chain. **COMPLETED** – The swap has finished successfully. **CANCELED** – The swap was
     * cancelled by user or provider before completion. **FAILED** – The swap attempted but
     * encountered an error.
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public SwapOperation inputAmount(String inputAmount) {
        this.inputAmount = inputAmount;
        return this;
    }

    /**
     * The amount of tokens the swapper will provide
     *
     * @return inputAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INPUT_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getInputAmount() {
        return inputAmount;
    }

    @JsonProperty(JSON_PROPERTY_INPUT_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInputAmount(String inputAmount) {
        this.inputAmount = inputAmount;
    }

    public SwapOperation inputAsset(String inputAsset) {
        this.inputAsset = inputAsset;
        return this;
    }

    /**
     * The id of the asset the swapper will provide
     *
     * @return inputAsset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getInputAsset() {
        return inputAsset;
    }

    @JsonProperty(JSON_PROPERTY_INPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInputAsset(String inputAsset) {
        this.inputAsset = inputAsset;
    }

    public SwapOperation slippageTolerance(BigDecimal slippageTolerance) {
        this.slippageTolerance = slippageTolerance;
        return this;
    }

    /**
     * The slippage tolerance is a percentage. The slippage tolerance is the maximum amount the
     * price can change between the time the transaction is submitted and the time it is executed
     *
     * @return slippageTolerance
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SLIPPAGE_TOLERANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getSlippageTolerance() {
        return slippageTolerance;
    }

    @JsonProperty(JSON_PROPERTY_SLIPPAGE_TOLERANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSlippageTolerance(BigDecimal slippageTolerance) {
        this.slippageTolerance = slippageTolerance;
    }

    public SwapOperation outputMinAmount(String outputMinAmount) {
        this.outputMinAmount = outputMinAmount;
        return this;
    }

    /**
     * The minimum amount of tokens the swapper will receive
     *
     * @return outputMinAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTPUT_MIN_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOutputMinAmount() {
        return outputMinAmount;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_MIN_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutputMinAmount(String outputMinAmount) {
        this.outputMinAmount = outputMinAmount;
    }

    public SwapOperation outputMaxAmount(String outputMaxAmount) {
        this.outputMaxAmount = outputMaxAmount;
        return this;
    }

    /**
     * Maximum amount of tokens that the swapper will receive
     *
     * @return outputMaxAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTPUT_MAX_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOutputMaxAmount() {
        return outputMaxAmount;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_MAX_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutputMaxAmount(String outputMaxAmount) {
        this.outputMaxAmount = outputMaxAmount;
    }

    public SwapOperation outputAsset(String outputAsset) {
        this.outputAsset = outputAsset;
        return this;
    }

    /**
     * The id of the asset the swapper will receive
     *
     * @return outputAsset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OUTPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOutputAsset() {
        return outputAsset;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutputAsset(String outputAsset) {
        this.outputAsset = outputAsset;
    }

    public SwapOperation outputFinalAmount(String outputFinalAmount) {
        this.outputFinalAmount = outputFinalAmount;
        return this;
    }

    /**
     * Final amount of tokens that the swapper will receive
     *
     * @return outputFinalAmount
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OUTPUT_FINAL_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getOutputFinalAmount() {
        return outputFinalAmount;
    }

    @JsonProperty(JSON_PROPERTY_OUTPUT_FINAL_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOutputFinalAmount(String outputFinalAmount) {
        this.outputFinalAmount = outputFinalAmount;
    }

    public SwapOperation requiredActions(List<SwapRequiredAction> requiredActions) {
        this.requiredActions = requiredActions;
        return this;
    }

    public SwapOperation addRequiredActionsItem(SwapRequiredAction requiredActionsItem) {
        if (this.requiredActions == null) {
            this.requiredActions = new ArrayList<>();
        }
        this.requiredActions.add(requiredActionsItem);
        return this;
    }

    /**
     * The required actions for the swap, including the type of action, the status of the action,
     * and the transaction id
     *
     * @return requiredActions
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUIRED_ACTIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<SwapRequiredAction> getRequiredActions() {
        return requiredActions;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRED_ACTIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequiredActions(List<SwapRequiredAction> requiredActions) {
        this.requiredActions = requiredActions;
    }

    public SwapOperation error(SwapFlowError error) {
        this.error = error;
        return this;
    }

    /**
     * Get error
     *
     * @return error
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ERROR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SwapFlowError getError() {
        return error;
    }

    @JsonProperty(JSON_PROPERTY_ERROR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setError(SwapFlowError error) {
        this.error = error;
    }

    public SwapOperation createdAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The creation time of the swap operation (ISO Date time).
     *
     * @return createdAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public SwapOperation updatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The last update time of the swap operation (ISO Date time).
     *
     * @return updatedAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public SwapOperation createdBy(UUID createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Fireblocks user id that issued the swap
     *
     * @return createdBy
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATED_BY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getCreatedBy() {
        return createdBy;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_BY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedBy(UUID createdBy) {
        this.createdBy = createdBy;
    }

    /** Return true if this SwapOperation object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SwapOperation swapOperation = (SwapOperation) o;
        return Objects.equals(this.id, swapOperation.id)
                && Objects.equals(this.accountId, swapOperation.accountId)
                && Objects.equals(this.providerId, swapOperation.providerId)
                && Objects.equals(this.category, swapOperation.category)
                && Objects.equals(this.protocol, swapOperation.protocol)
                && Objects.equals(this.status, swapOperation.status)
                && Objects.equals(this.inputAmount, swapOperation.inputAmount)
                && Objects.equals(this.inputAsset, swapOperation.inputAsset)
                && Objects.equals(this.slippageTolerance, swapOperation.slippageTolerance)
                && Objects.equals(this.outputMinAmount, swapOperation.outputMinAmount)
                && Objects.equals(this.outputMaxAmount, swapOperation.outputMaxAmount)
                && Objects.equals(this.outputAsset, swapOperation.outputAsset)
                && Objects.equals(this.outputFinalAmount, swapOperation.outputFinalAmount)
                && Objects.equals(this.requiredActions, swapOperation.requiredActions)
                && Objects.equals(this.error, swapOperation.error)
                && Objects.equals(this.createdAt, swapOperation.createdAt)
                && Objects.equals(this.updatedAt, swapOperation.updatedAt)
                && Objects.equals(this.createdBy, swapOperation.createdBy);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                accountId,
                providerId,
                category,
                protocol,
                status,
                inputAmount,
                inputAsset,
                slippageTolerance,
                outputMinAmount,
                outputMaxAmount,
                outputAsset,
                outputFinalAmount,
                requiredActions,
                error,
                createdAt,
                updatedAt,
                createdBy);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SwapOperation {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    inputAmount: ").append(toIndentedString(inputAmount)).append("\n");
        sb.append("    inputAsset: ").append(toIndentedString(inputAsset)).append("\n");
        sb.append("    slippageTolerance: ")
                .append(toIndentedString(slippageTolerance))
                .append("\n");
        sb.append("    outputMinAmount: ").append(toIndentedString(outputMinAmount)).append("\n");
        sb.append("    outputMaxAmount: ").append(toIndentedString(outputMaxAmount)).append("\n");
        sb.append("    outputAsset: ").append(toIndentedString(outputAsset)).append("\n");
        sb.append("    outputFinalAmount: ")
                .append(toIndentedString(outputFinalAmount))
                .append("\n");
        sb.append("    requiredActions: ").append(toIndentedString(requiredActions)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `accountId` to the URL query string
        if (getAccountId() != null) {
            joiner.add(
                    String.format(
                            "%saccountId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getAccountId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `providerId` to the URL query string
        if (getProviderId() != null) {
            joiner.add(
                    String.format(
                            "%sproviderId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getProviderId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `category` to the URL query string
        if (getCategory() != null) {
            joiner.add(
                    String.format(
                            "%scategory%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getCategory()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `protocol` to the URL query string
        if (getProtocol() != null) {
            joiner.add(
                    String.format(
                            "%sprotocol%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getProtocol()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `inputAmount` to the URL query string
        if (getInputAmount() != null) {
            joiner.add(
                    String.format(
                            "%sinputAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getInputAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `inputAsset` to the URL query string
        if (getInputAsset() != null) {
            joiner.add(
                    String.format(
                            "%sinputAsset%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getInputAsset()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `slippageTolerance` to the URL query string
        if (getSlippageTolerance() != null) {
            joiner.add(
                    String.format(
                            "%sslippageTolerance%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getSlippageTolerance()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputMinAmount` to the URL query string
        if (getOutputMinAmount() != null) {
            joiner.add(
                    String.format(
                            "%soutputMinAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputMinAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputMaxAmount` to the URL query string
        if (getOutputMaxAmount() != null) {
            joiner.add(
                    String.format(
                            "%soutputMaxAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputMaxAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputAsset` to the URL query string
        if (getOutputAsset() != null) {
            joiner.add(
                    String.format(
                            "%soutputAsset%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputAsset()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `outputFinalAmount` to the URL query string
        if (getOutputFinalAmount() != null) {
            joiner.add(
                    String.format(
                            "%soutputFinalAmount%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOutputFinalAmount()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `requiredActions` to the URL query string
        if (getRequiredActions() != null) {
            for (int i = 0; i < getRequiredActions().size(); i++) {
                if (getRequiredActions().get(i) != null) {
                    joiner.add(
                            getRequiredActions()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%srequiredActions%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `error` to the URL query string
        if (getError() != null) {
            joiner.add(getError().toUrlQueryString(prefix + "error" + suffix));
        }

        // add `createdAt` to the URL query string
        if (getCreatedAt() != null) {
            joiner.add(
                    String.format(
                            "%screatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCreatedAt()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `updatedAt` to the URL query string
        if (getUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%supdatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getUpdatedAt()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `createdBy` to the URL query string
        if (getCreatedBy() != null) {
            joiner.add(
                    String.format(
                            "%screatedBy%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCreatedBy()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
