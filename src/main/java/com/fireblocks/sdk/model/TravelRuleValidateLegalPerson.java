/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** TravelRuleValidateLegalPerson */
@JsonPropertyOrder({
    TravelRuleValidateLegalPerson.JSON_PROPERTY_NAME,
    TravelRuleValidateLegalPerson.JSON_PROPERTY_GEOGRAPHIC_ADDRESS,
    TravelRuleValidateLegalPerson.JSON_PROPERTY_NATIONAL_IDENTIFICATION,
    TravelRuleValidateLegalPerson.JSON_PROPERTY_CUSTOMER_IDENTIFICATION,
    TravelRuleValidateLegalPerson.JSON_PROPERTY_CUSTOMER_NUMBER,
    TravelRuleValidateLegalPerson.JSON_PROPERTY_COUNTRY_OF_REGISTRATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TravelRuleValidateLegalPerson {
    public static final String JSON_PROPERTY_NAME = "name";
    private TravelRuleValidateLegalPersonNameIdentifier name;

    public static final String JSON_PROPERTY_GEOGRAPHIC_ADDRESS = "geographicAddress";
    private List<TravelRuleValidateGeographicAddress> geographicAddress;

    public static final String JSON_PROPERTY_NATIONAL_IDENTIFICATION = "nationalIdentification";
    private TravelRuleValidateNationalIdentification nationalIdentification;

    public static final String JSON_PROPERTY_CUSTOMER_IDENTIFICATION = "customerIdentification";
    private String customerIdentification;

    public static final String JSON_PROPERTY_CUSTOMER_NUMBER = "customerNumber";
    private String customerNumber;

    public static final String JSON_PROPERTY_COUNTRY_OF_REGISTRATION = "countryOfRegistration";
    private String countryOfRegistration;

    public TravelRuleValidateLegalPerson() {}

    public TravelRuleValidateLegalPerson name(TravelRuleValidateLegalPersonNameIdentifier name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TravelRuleValidateLegalPersonNameIdentifier getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(TravelRuleValidateLegalPersonNameIdentifier name) {
        this.name = name;
    }

    public TravelRuleValidateLegalPerson geographicAddress(
            List<TravelRuleValidateGeographicAddress> geographicAddress) {
        this.geographicAddress = geographicAddress;
        return this;
    }

    public TravelRuleValidateLegalPerson addGeographicAddressItem(
            TravelRuleValidateGeographicAddress geographicAddressItem) {
        if (this.geographicAddress == null) {
            this.geographicAddress = new ArrayList<>();
        }
        this.geographicAddress.add(geographicAddressItem);
        return this;
    }

    /**
     * The array of geographic addresses associated with the legal person.
     *
     * @return geographicAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_GEOGRAPHIC_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<TravelRuleValidateGeographicAddress> getGeographicAddress() {
        return geographicAddress;
    }

    @JsonProperty(JSON_PROPERTY_GEOGRAPHIC_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeographicAddress(List<TravelRuleValidateGeographicAddress> geographicAddress) {
        this.geographicAddress = geographicAddress;
    }

    public TravelRuleValidateLegalPerson nationalIdentification(
            TravelRuleValidateNationalIdentification nationalIdentification) {
        this.nationalIdentification = nationalIdentification;
        return this;
    }

    /**
     * Get nationalIdentification
     *
     * @return nationalIdentification
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TravelRuleValidateNationalIdentification getNationalIdentification() {
        return nationalIdentification;
    }

    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNationalIdentification(
            TravelRuleValidateNationalIdentification nationalIdentification) {
        this.nationalIdentification = nationalIdentification;
    }

    public TravelRuleValidateLegalPerson customerIdentification(String customerIdentification) {
        this.customerIdentification = customerIdentification;
        return this;
    }

    /**
     * A unique identifier that identifies the customer in the organization&#39;s context.
     *
     * @return customerIdentification
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CUSTOMER_IDENTIFICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCustomerIdentification() {
        return customerIdentification;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_IDENTIFICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustomerIdentification(String customerIdentification) {
        this.customerIdentification = customerIdentification;
    }

    public TravelRuleValidateLegalPerson customerNumber(String customerNumber) {
        this.customerNumber = customerNumber;
        return this;
    }

    /**
     * A distinct identifier that uniquely identifies the customer within the organization.
     *
     * @return customerNumber
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CUSTOMER_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCustomerNumber() {
        return customerNumber;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustomerNumber(String customerNumber) {
        this.customerNumber = customerNumber;
    }

    public TravelRuleValidateLegalPerson countryOfRegistration(String countryOfRegistration) {
        this.countryOfRegistration = countryOfRegistration;
        return this;
    }

    /**
     * The ISO-3166 Alpha-2 country code where the legal person is registered.
     *
     * @return countryOfRegistration
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COUNTRY_OF_REGISTRATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCountryOfRegistration() {
        return countryOfRegistration;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_OF_REGISTRATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCountryOfRegistration(String countryOfRegistration) {
        this.countryOfRegistration = countryOfRegistration;
    }

    /** Return true if this TravelRuleValidateLegalPerson object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TravelRuleValidateLegalPerson travelRuleValidateLegalPerson =
                (TravelRuleValidateLegalPerson) o;
        return Objects.equals(this.name, travelRuleValidateLegalPerson.name)
                && Objects.equals(
                        this.geographicAddress, travelRuleValidateLegalPerson.geographicAddress)
                && Objects.equals(
                        this.nationalIdentification,
                        travelRuleValidateLegalPerson.nationalIdentification)
                && Objects.equals(
                        this.customerIdentification,
                        travelRuleValidateLegalPerson.customerIdentification)
                && Objects.equals(this.customerNumber, travelRuleValidateLegalPerson.customerNumber)
                && Objects.equals(
                        this.countryOfRegistration,
                        travelRuleValidateLegalPerson.countryOfRegistration);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                name,
                geographicAddress,
                nationalIdentification,
                customerIdentification,
                customerNumber,
                countryOfRegistration);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TravelRuleValidateLegalPerson {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    geographicAddress: ")
                .append(toIndentedString(geographicAddress))
                .append("\n");
        sb.append("    nationalIdentification: ")
                .append(toIndentedString(nationalIdentification))
                .append("\n");
        sb.append("    customerIdentification: ")
                .append(toIndentedString(customerIdentification))
                .append("\n");
        sb.append("    customerNumber: ").append(toIndentedString(customerNumber)).append("\n");
        sb.append("    countryOfRegistration: ")
                .append(toIndentedString(countryOfRegistration))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(getName().toUrlQueryString(prefix + "name" + suffix));
        }

        // add `geographicAddress` to the URL query string
        if (getGeographicAddress() != null) {
            for (int i = 0; i < getGeographicAddress().size(); i++) {
                if (getGeographicAddress().get(i) != null) {
                    joiner.add(
                            getGeographicAddress()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sgeographicAddress%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `nationalIdentification` to the URL query string
        if (getNationalIdentification() != null) {
            joiner.add(
                    getNationalIdentification()
                            .toUrlQueryString(prefix + "nationalIdentification" + suffix));
        }

        // add `customerIdentification` to the URL query string
        if (getCustomerIdentification() != null) {
            joiner.add(
                    String.format(
                            "%scustomerIdentification%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCustomerIdentification()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `customerNumber` to the URL query string
        if (getCustomerNumber() != null) {
            joiner.add(
                    String.format(
                            "%scustomerNumber%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCustomerNumber()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `countryOfRegistration` to the URL query string
        if (getCountryOfRegistration() != null) {
            joiner.add(
                    String.format(
                            "%scountryOfRegistration%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCountryOfRegistration()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
