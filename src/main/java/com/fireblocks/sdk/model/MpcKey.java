/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** MpcKey */
@JsonPropertyOrder({
    MpcKey.JSON_PROPERTY_KEY_ID,
    MpcKey.JSON_PROPERTY_USER_ID,
    MpcKey.JSON_PROPERTY_ALGORITHM,
    MpcKey.JSON_PROPERTY_PLAYERS,
    MpcKey.JSON_PROPERTY_LAST_PREPROCESSED_INDEX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MpcKey {
    public static final String JSON_PROPERTY_KEY_ID = "keyId";
    private String keyId;

    public static final String JSON_PROPERTY_USER_ID = "userId";
    private String userId;

    public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
    private BigDecimal algorithm;

    public static final String JSON_PROPERTY_PLAYERS = "players";
    private List<Players> players = new ArrayList<>();

    public static final String JSON_PROPERTY_LAST_PREPROCESSED_INDEX = "lastPreprocessedIndex";
    private BigDecimal lastPreprocessedIndex;

    public MpcKey() {}

    public MpcKey keyId(String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * Get keyId
     *
     * @return keyId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_KEY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getKeyId() {
        return keyId;
    }

    @JsonProperty(JSON_PROPERTY_KEY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setKeyId(String keyId) {
        this.keyId = keyId;
    }

    public MpcKey userId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * The user id that owns the key
     *
     * @return userId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_USER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getUserId() {
        return userId;
    }

    @JsonProperty(JSON_PROPERTY_USER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUserId(String userId) {
        this.userId = userId;
    }

    public MpcKey algorithm(BigDecimal algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * The algorithm of the key
     *
     * @return algorithm
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getAlgorithm() {
        return algorithm;
    }

    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAlgorithm(BigDecimal algorithm) {
        this.algorithm = algorithm;
    }

    public MpcKey players(List<Players> players) {
        this.players = players;
        return this;
    }

    public MpcKey addPlayersItem(Players playersItem) {
        if (this.players == null) {
            this.players = new ArrayList<>();
        }
        this.players.add(playersItem);
        return this;
    }

    /**
     * The players that are associated with the key
     *
     * @return players
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PLAYERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<Players> getPlayers() {
        return players;
    }

    @JsonProperty(JSON_PROPERTY_PLAYERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPlayers(List<Players> players) {
        this.players = players;
    }

    public MpcKey lastPreprocessedIndex(BigDecimal lastPreprocessedIndex) {
        this.lastPreprocessedIndex = lastPreprocessedIndex;
        return this;
    }

    /**
     * The last index used on this key minimum: 0
     *
     * @return lastPreprocessedIndex
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LAST_PREPROCESSED_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getLastPreprocessedIndex() {
        return lastPreprocessedIndex;
    }

    @JsonProperty(JSON_PROPERTY_LAST_PREPROCESSED_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLastPreprocessedIndex(BigDecimal lastPreprocessedIndex) {
        this.lastPreprocessedIndex = lastPreprocessedIndex;
    }

    /** Return true if this MpcKey object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MpcKey mpcKey = (MpcKey) o;
        return Objects.equals(this.keyId, mpcKey.keyId)
                && Objects.equals(this.userId, mpcKey.userId)
                && Objects.equals(this.algorithm, mpcKey.algorithm)
                && Objects.equals(this.players, mpcKey.players)
                && Objects.equals(this.lastPreprocessedIndex, mpcKey.lastPreprocessedIndex);
    }

    @Override
    public int hashCode() {
        return Objects.hash(keyId, userId, algorithm, players, lastPreprocessedIndex);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MpcKey {\n");
        sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
        sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("    players: ").append(toIndentedString(players)).append("\n");
        sb.append("    lastPreprocessedIndex: ")
                .append(toIndentedString(lastPreprocessedIndex))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `keyId` to the URL query string
        if (getKeyId() != null) {
            joiner.add(
                    String.format(
                            "%skeyId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getKeyId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `userId` to the URL query string
        if (getUserId() != null) {
            joiner.add(
                    String.format(
                            "%suserId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getUserId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `algorithm` to the URL query string
        if (getAlgorithm() != null) {
            joiner.add(
                    String.format(
                            "%salgorithm%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getAlgorithm()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `players` to the URL query string
        if (getPlayers() != null) {
            for (int i = 0; i < getPlayers().size(); i++) {
                if (getPlayers().get(i) != null) {
                    joiner.add(
                            getPlayers()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%splayers%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `lastPreprocessedIndex` to the URL query string
        if (getLastPreprocessedIndex() != null) {
            joiner.add(
                    String.format(
                            "%slastPreprocessedIndex%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getLastPreprocessedIndex()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
