/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** SolanaInstruction */
@JsonPropertyOrder({
    SolanaInstruction.JSON_PROPERTY_NAME,
    SolanaInstruction.JSON_PROPERTY_DISCRIMINATOR,
    SolanaInstruction.JSON_PROPERTY_ACCOUNTS,
    SolanaInstruction.JSON_PROPERTY_ARGS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class SolanaInstruction {
    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_DISCRIMINATOR = "discriminator";
    @jakarta.annotation.Nonnull private List<BigDecimal> discriminator = new ArrayList<>();

    public static final String JSON_PROPERTY_ACCOUNTS = "accounts";
    @jakarta.annotation.Nonnull private List<SOLAccount> accounts = new ArrayList<>();

    public static final String JSON_PROPERTY_ARGS = "args";
    @jakarta.annotation.Nonnull private List<SolParameter> args = new ArrayList<>();

    public SolanaInstruction() {}

    @JsonCreator
    public SolanaInstruction(
            @JsonProperty(value = JSON_PROPERTY_NAME, required = true) String name,
            @JsonProperty(value = JSON_PROPERTY_DISCRIMINATOR, required = true)
                    List<BigDecimal> discriminator,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNTS, required = true)
                    List<SOLAccount> accounts,
            @JsonProperty(value = JSON_PROPERTY_ARGS, required = true) List<SolParameter> args) {
        this.name = name;
        this.discriminator = discriminator;
        this.accounts = accounts;
        this.args = args;
    }

    public SolanaInstruction name(@jakarta.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the instruction
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@jakarta.annotation.Nonnull String name) {
        this.name = name;
    }

    public SolanaInstruction discriminator(
            @jakarta.annotation.Nonnull List<BigDecimal> discriminator) {
        this.discriminator = discriminator;
        return this;
    }

    public SolanaInstruction addDiscriminatorItem(BigDecimal discriminatorItem) {
        if (this.discriminator == null) {
            this.discriminator = new ArrayList<>();
        }
        this.discriminator.add(discriminatorItem);
        return this;
    }

    /**
     * The discriminator for the instruction. Acts as a function selector
     *
     * @return discriminator
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DISCRIMINATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<BigDecimal> getDiscriminator() {
        return discriminator;
    }

    @JsonProperty(JSON_PROPERTY_DISCRIMINATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDiscriminator(@jakarta.annotation.Nonnull List<BigDecimal> discriminator) {
        this.discriminator = discriminator;
    }

    public SolanaInstruction accounts(@jakarta.annotation.Nonnull List<SOLAccount> accounts) {
        this.accounts = accounts;
        return this;
    }

    public SolanaInstruction addAccountsItem(SOLAccount accountsItem) {
        if (this.accounts == null) {
            this.accounts = new ArrayList<>();
        }
        this.accounts.add(accountsItem);
        return this;
    }

    /**
     * Get accounts
     *
     * @return accounts
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<SOLAccount> getAccounts() {
        return accounts;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccounts(@jakarta.annotation.Nonnull List<SOLAccount> accounts) {
        this.accounts = accounts;
    }

    public SolanaInstruction args(@jakarta.annotation.Nonnull List<SolParameter> args) {
        this.args = args;
        return this;
    }

    public SolanaInstruction addArgsItem(SolParameter argsItem) {
        if (this.args == null) {
            this.args = new ArrayList<>();
        }
        this.args.add(argsItem);
        return this;
    }

    /**
     * Get args
     *
     * @return args
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ARGS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<SolParameter> getArgs() {
        return args;
    }

    @JsonProperty(JSON_PROPERTY_ARGS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setArgs(@jakarta.annotation.Nonnull List<SolParameter> args) {
        this.args = args;
    }

    /** Return true if this SolanaInstruction object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SolanaInstruction solanaInstruction = (SolanaInstruction) o;
        return Objects.equals(this.name, solanaInstruction.name)
                && Objects.equals(this.discriminator, solanaInstruction.discriminator)
                && Objects.equals(this.accounts, solanaInstruction.accounts)
                && Objects.equals(this.args, solanaInstruction.args);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, discriminator, accounts, args);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SolanaInstruction {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    discriminator: ").append(toIndentedString(discriminator)).append("\n");
        sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
        sb.append("    args: ").append(toIndentedString(args)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `discriminator` to the URL query string
        if (getDiscriminator() != null) {
            for (int i = 0; i < getDiscriminator().size(); i++) {
                if (getDiscriminator().get(i) != null) {
                    joiner.add(
                            String.format(
                                    "%sdiscriminator%s%s=%s",
                                    prefix,
                                    suffix,
                                    "".equals(suffix)
                                            ? ""
                                            : String.format(
                                                    "%s%d%s", containerPrefix, i, containerSuffix),
                                    ApiClient.urlEncode(
                                            ApiClient.valueToString(getDiscriminator().get(i)))));
                }
            }
        }

        // add `accounts` to the URL query string
        if (getAccounts() != null) {
            for (int i = 0; i < getAccounts().size(); i++) {
                if (getAccounts().get(i) != null) {
                    joiner.add(
                            getAccounts()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%saccounts%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `args` to the URL query string
        if (getArgs() != null) {
            for (int i = 0; i < getArgs().size(); i++) {
                if (getArgs().get(i) != null) {
                    joiner.add(
                            getArgs()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sargs%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
