/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** Amount range configuration */
@JsonPropertyOrder({
    AmountRange.JSON_PROPERTY_MIN,
    AmountRange.JSON_PROPERTY_MAX,
    AmountRange.JSON_PROPERTY_CURRENCY
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AmountRange {
    public static final String JSON_PROPERTY_MIN = "min";
    @jakarta.annotation.Nonnull private String min;

    public static final String JSON_PROPERTY_MAX = "max";
    @jakarta.annotation.Nonnull private String max;

    public static final String JSON_PROPERTY_CURRENCY = "currency";
    @jakarta.annotation.Nonnull private String currency;

    public AmountRange() {}

    @JsonCreator
    public AmountRange(
            @JsonProperty(value = JSON_PROPERTY_MIN, required = true) String min,
            @JsonProperty(value = JSON_PROPERTY_MAX, required = true) String max,
            @JsonProperty(value = JSON_PROPERTY_CURRENCY, required = true) String currency) {
        this.min = min;
        this.max = max;
        this.currency = currency;
    }

    public AmountRange min(@jakarta.annotation.Nonnull String min) {
        this.min = min;
        return this;
    }

    /**
     * Minimum amount
     *
     * @return min
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMin() {
        return min;
    }

    @JsonProperty(JSON_PROPERTY_MIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMin(@jakarta.annotation.Nonnull String min) {
        this.min = min;
    }

    public AmountRange max(@jakarta.annotation.Nonnull String max) {
        this.max = max;
        return this;
    }

    /**
     * Maximum amount
     *
     * @return max
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MAX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMax() {
        return max;
    }

    @JsonProperty(JSON_PROPERTY_MAX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMax(@jakarta.annotation.Nonnull String max) {
        this.max = max;
    }

    public AmountRange currency(@jakarta.annotation.Nonnull String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Currency for the amount
     *
     * @return currency
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCurrency() {
        return currency;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCurrency(@jakarta.annotation.Nonnull String currency) {
        this.currency = currency;
    }

    /** Return true if this AmountRange object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AmountRange amountRange = (AmountRange) o;
        return Objects.equals(this.min, amountRange.min)
                && Objects.equals(this.max, amountRange.max)
                && Objects.equals(this.currency, amountRange.currency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(min, max, currency);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AmountRange {\n");
        sb.append("    min: ").append(toIndentedString(min)).append("\n");
        sb.append("    max: ").append(toIndentedString(max)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `min` to the URL query string
        if (getMin() != null) {
            joiner.add(
                    String.format(
                            "%smin%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getMin()))));
        }

        // add `max` to the URL query string
        if (getMax() != null) {
            joiner.add(
                    String.format(
                            "%smax%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getMax()))));
        }

        // add `currency` to the URL query string
        if (getCurrency() != null) {
            joiner.add(
                    String.format(
                            "%scurrency%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCurrency()))));
        }

        return joiner.toString();
    }
}
