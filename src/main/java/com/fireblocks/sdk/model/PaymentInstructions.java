/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** PaymentInstructions */
@JsonPropertyOrder({
    PaymentInstructions.JSON_PROPERTY_TYPE,
    PaymentInstructions.JSON_PROPERTY_ADDRESS,
    PaymentInstructions.JSON_PROPERTY_REFERENCE_ID
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class PaymentInstructions {
    /** Gets or Sets type */
    public enum TypeEnum {
        IBAN(String.valueOf("IBAN")),

        SWIFT(String.valueOf("SWIFT")),

        ACH(String.valueOf("ACH")),

        US_WIRE(String.valueOf("US_WIRE")),

        SPEI(String.valueOf("SPEI")),

        SEPA(String.valueOf("SEPA")),

        PIX(String.valueOf("PIX")),

        LOCAL_BANK_TRANSFER_AFRICA(String.valueOf("LOCAL_BANK_TRANSFER_AFRICA")),

        MOBILE_MONEY(String.valueOf("MOBILE_MONEY"));

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private TypeEnum type;

    public static final String JSON_PROPERTY_ADDRESS = "address";
    @jakarta.annotation.Nonnull private AccountHolderDetails address;

    public static final String JSON_PROPERTY_REFERENCE_ID = "referenceId";
    @jakarta.annotation.Nonnull private String referenceId;

    public PaymentInstructions() {}

    @JsonCreator
    public PaymentInstructions(
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) TypeEnum type,
            @JsonProperty(value = JSON_PROPERTY_ADDRESS, required = true)
                    AccountHolderDetails address,
            @JsonProperty(value = JSON_PROPERTY_REFERENCE_ID, required = true) String referenceId) {
        this.type = type;
        this.address = address;
        this.referenceId = referenceId;
    }

    public PaymentInstructions type(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
    }

    public PaymentInstructions address(@jakarta.annotation.Nonnull AccountHolderDetails address) {
        this.address = address;
        return this;
    }

    /**
     * Get address
     *
     * @return address
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AccountHolderDetails getAddress() {
        return address;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddress(@jakarta.annotation.Nonnull AccountHolderDetails address) {
        this.address = address;
    }

    public PaymentInstructions referenceId(@jakarta.annotation.Nonnull String referenceId) {
        this.referenceId = referenceId;
        return this;
    }

    /**
     * Get referenceId
     *
     * @return referenceId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REFERENCE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getReferenceId() {
        return referenceId;
    }

    @JsonProperty(JSON_PROPERTY_REFERENCE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setReferenceId(@jakarta.annotation.Nonnull String referenceId) {
        this.referenceId = referenceId;
    }

    /** Return true if this PaymentInstructions object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentInstructions paymentInstructions = (PaymentInstructions) o;
        return Objects.equals(this.type, paymentInstructions.type)
                && Objects.equals(this.address, paymentInstructions.address)
                && Objects.equals(this.referenceId, paymentInstructions.referenceId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, address, referenceId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentInstructions {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(getAddress().toUrlQueryString(prefix + "address" + suffix));
        }

        // add `referenceId` to the URL query string
        if (getReferenceId() != null) {
            joiner.add(
                    String.format(
                            "%sreferenceId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getReferenceId()))));
        }

        return joiner.toString();
    }
}
