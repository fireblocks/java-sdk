/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** TokenOwnershipResponse */
@JsonPropertyOrder({
    TokenOwnershipResponse.JSON_PROPERTY_ID,
    TokenOwnershipResponse.JSON_PROPERTY_TOKEN_ID,
    TokenOwnershipResponse.JSON_PROPERTY_STANDARD,
    TokenOwnershipResponse.JSON_PROPERTY_METADATA_U_R_I,
    TokenOwnershipResponse.JSON_PROPERTY_CACHED_METADATA_U_R_I,
    TokenOwnershipResponse.JSON_PROPERTY_MEDIA,
    TokenOwnershipResponse.JSON_PROPERTY_SPAM,
    TokenOwnershipResponse.JSON_PROPERTY_COLLECTION,
    TokenOwnershipResponse.JSON_PROPERTY_BALANCE,
    TokenOwnershipResponse.JSON_PROPERTY_VAULT_ACCOUNT_ID,
    TokenOwnershipResponse.JSON_PROPERTY_OWNERSHIP_START_TIME,
    TokenOwnershipResponse.JSON_PROPERTY_OWNERSHIP_LAST_UPDATE_TIME,
    TokenOwnershipResponse.JSON_PROPERTY_BLOCKCHAIN_DESCRIPTOR,
    TokenOwnershipResponse.JSON_PROPERTY_DESCRIPTION,
    TokenOwnershipResponse.JSON_PROPERTY_NAME,
    TokenOwnershipResponse.JSON_PROPERTY_NCW_ID,
    TokenOwnershipResponse.JSON_PROPERTY_NCW_ACCOUNT_ID,
    TokenOwnershipResponse.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class TokenOwnershipResponse {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_TOKEN_ID = "tokenId";
    @jakarta.annotation.Nonnull private String tokenId;

    public static final String JSON_PROPERTY_STANDARD = "standard";
    @jakarta.annotation.Nonnull private String standard;

    public static final String JSON_PROPERTY_METADATA_U_R_I = "metadataURI";
    @jakarta.annotation.Nullable private String metadataURI;

    public static final String JSON_PROPERTY_CACHED_METADATA_U_R_I = "cachedMetadataURI";
    @jakarta.annotation.Nullable private String cachedMetadataURI;

    public static final String JSON_PROPERTY_MEDIA = "media";
    @jakarta.annotation.Nullable private List<MediaEntityResponse> media = new ArrayList<>();

    public static final String JSON_PROPERTY_SPAM = "spam";
    @jakarta.annotation.Nullable private SpamOwnershipResponse spam;

    public static final String JSON_PROPERTY_COLLECTION = "collection";
    @jakarta.annotation.Nullable private TokenCollectionResponse collection;

    public static final String JSON_PROPERTY_BALANCE = "balance";
    @jakarta.annotation.Nonnull private String balance;

    public static final String JSON_PROPERTY_VAULT_ACCOUNT_ID = "vaultAccountId";
    @jakarta.annotation.Nullable private String vaultAccountId;

    public static final String JSON_PROPERTY_OWNERSHIP_START_TIME = "ownershipStartTime";
    @jakarta.annotation.Nonnull private BigDecimal ownershipStartTime;

    public static final String JSON_PROPERTY_OWNERSHIP_LAST_UPDATE_TIME = "ownershipLastUpdateTime";
    @jakarta.annotation.Nonnull private BigDecimal ownershipLastUpdateTime;

    /** Gets or Sets blockchainDescriptor */
    public enum BlockchainDescriptorEnum {
        ETH(String.valueOf("ETH")),

        ETH_TEST3(String.valueOf("ETH_TEST3")),

        ETH_TEST5(String.valueOf("ETH_TEST5")),

        ETH_TEST6(String.valueOf("ETH_TEST6")),

        POLYGON(String.valueOf("POLYGON")),

        POLYGON_TEST_MUMBAI(String.valueOf("POLYGON_TEST_MUMBAI")),

        AMOY_POLYGON_TEST(String.valueOf("AMOY_POLYGON_TEST")),

        XTZ(String.valueOf("XTZ")),

        XTZ_TEST(String.valueOf("XTZ_TEST")),

        BASECHAIN_ETH(String.valueOf("BASECHAIN_ETH")),

        BASECHAIN_ETH_TEST3(String.valueOf("BASECHAIN_ETH_TEST3")),

        BASECHAIN_ETH_TEST5(String.valueOf("BASECHAIN_ETH_TEST5")),

        ETHERLINK(String.valueOf("ETHERLINK")),

        ETHERLINK_TEST(String.valueOf("ETHERLINK_TEST")),

        MANTLE(String.valueOf("MANTLE")),

        MANTLE_TEST(String.valueOf("MANTLE_TEST")),

        GUN_GUNZILLA(String.valueOf("GUN_GUNZILLA")),

        GUN_GUNZILLA_TEST(String.valueOf("GUN_GUNZILLA_TEST")),

        ETH_SONEIUM(String.valueOf("ETH_SONEIUM")),

        SONEIUM_MINATO_TEST(String.valueOf("SONEIUM_MINATO_TEST")),

        IOTX_IOTEX(String.valueOf("IOTX_IOTEX")),

        KLAY_KAIA(String.valueOf("KLAY_KAIA")),

        KLAY_KAIA_TEST(String.valueOf("KLAY_KAIA_TEST")),

        APECHAIN(String.valueOf("APECHAIN")),

        APECHAIN_TEST(String.valueOf("APECHAIN_TEST"));

        private String value;

        BlockchainDescriptorEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static BlockchainDescriptorEnum fromValue(String value) {
            for (BlockchainDescriptorEnum b : BlockchainDescriptorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_BLOCKCHAIN_DESCRIPTOR = "blockchainDescriptor";
    @jakarta.annotation.Nonnull private BlockchainDescriptorEnum blockchainDescriptor;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    @jakarta.annotation.Nullable private String description;

    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nullable private String name;

    public static final String JSON_PROPERTY_NCW_ID = "ncwId";
    @jakarta.annotation.Nullable private String ncwId;

    public static final String JSON_PROPERTY_NCW_ACCOUNT_ID = "ncwAccountId";
    @jakarta.annotation.Nullable private String ncwAccountId;

    /** Owned Token&#39;s status */
    public enum StatusEnum {
        LISTED(String.valueOf("LISTED")),

        ARCHIVED(String.valueOf("ARCHIVED"));

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private StatusEnum status;

    public TokenOwnershipResponse() {}

    @JsonCreator
    public TokenOwnershipResponse(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_TOKEN_ID, required = true) String tokenId,
            @JsonProperty(value = JSON_PROPERTY_STANDARD, required = true) String standard,
            @JsonProperty(value = JSON_PROPERTY_BALANCE, required = true) String balance,
            @JsonProperty(value = JSON_PROPERTY_OWNERSHIP_START_TIME, required = true)
                    BigDecimal ownershipStartTime,
            @JsonProperty(value = JSON_PROPERTY_OWNERSHIP_LAST_UPDATE_TIME, required = true)
                    BigDecimal ownershipLastUpdateTime,
            @JsonProperty(value = JSON_PROPERTY_BLOCKCHAIN_DESCRIPTOR, required = true)
                    BlockchainDescriptorEnum blockchainDescriptor,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true) StatusEnum status) {
        this.id = id;
        this.tokenId = tokenId;
        this.standard = standard;
        this.balance = balance;
        this.ownershipStartTime = ownershipStartTime;
        this.ownershipLastUpdateTime = ownershipLastUpdateTime;
        this.blockchainDescriptor = blockchainDescriptor;
        this.status = status;
    }

    public TokenOwnershipResponse id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * The Fireblocks NFT asset id
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public TokenOwnershipResponse tokenId(@jakarta.annotation.Nonnull String tokenId) {
        this.tokenId = tokenId;
        return this;
    }

    /**
     * Token id within the contract/collection
     *
     * @return tokenId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOKEN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTokenId() {
        return tokenId;
    }

    @JsonProperty(JSON_PROPERTY_TOKEN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTokenId(@jakarta.annotation.Nonnull String tokenId) {
        this.tokenId = tokenId;
    }

    public TokenOwnershipResponse standard(@jakarta.annotation.Nonnull String standard) {
        this.standard = standard;
        return this;
    }

    /**
     * ERC721 / ERC1155
     *
     * @return standard
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STANDARD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getStandard() {
        return standard;
    }

    @JsonProperty(JSON_PROPERTY_STANDARD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStandard(@jakarta.annotation.Nonnull String standard) {
        this.standard = standard;
    }

    public TokenOwnershipResponse metadataURI(@jakarta.annotation.Nullable String metadataURI) {
        this.metadataURI = metadataURI;
        return this;
    }

    /**
     * URL of the original token JSON metadata
     *
     * @return metadataURI
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_METADATA_U_R_I)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMetadataURI() {
        return metadataURI;
    }

    @JsonProperty(JSON_PROPERTY_METADATA_U_R_I)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMetadataURI(@jakarta.annotation.Nullable String metadataURI) {
        this.metadataURI = metadataURI;
    }

    public TokenOwnershipResponse cachedMetadataURI(
            @jakarta.annotation.Nullable String cachedMetadataURI) {
        this.cachedMetadataURI = cachedMetadataURI;
        return this;
    }

    /**
     * URL of the cached token JSON metadata
     *
     * @return cachedMetadataURI
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CACHED_METADATA_U_R_I)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCachedMetadataURI() {
        return cachedMetadataURI;
    }

    @JsonProperty(JSON_PROPERTY_CACHED_METADATA_U_R_I)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCachedMetadataURI(@jakarta.annotation.Nullable String cachedMetadataURI) {
        this.cachedMetadataURI = cachedMetadataURI;
    }

    public TokenOwnershipResponse media(
            @jakarta.annotation.Nullable List<MediaEntityResponse> media) {
        this.media = media;
        return this;
    }

    public TokenOwnershipResponse addMediaItem(MediaEntityResponse mediaItem) {
        if (this.media == null) {
            this.media = new ArrayList<>();
        }
        this.media.add(mediaItem);
        return this;
    }

    /**
     * Media items extracted from metadata JSON
     *
     * @return media
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<MediaEntityResponse> getMedia() {
        return media;
    }

    @JsonProperty(JSON_PROPERTY_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMedia(@jakarta.annotation.Nullable List<MediaEntityResponse> media) {
        this.media = media;
    }

    public TokenOwnershipResponse spam(@jakarta.annotation.Nullable SpamOwnershipResponse spam) {
        this.spam = spam;
        return this;
    }

    /**
     * Owned Token&#39;s Spam status
     *
     * @return spam
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SPAM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SpamOwnershipResponse getSpam() {
        return spam;
    }

    @JsonProperty(JSON_PROPERTY_SPAM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSpam(@jakarta.annotation.Nullable SpamOwnershipResponse spam) {
        this.spam = spam;
    }

    public TokenOwnershipResponse collection(
            @jakarta.annotation.Nullable TokenCollectionResponse collection) {
        this.collection = collection;
        return this;
    }

    /**
     * Parent collection information
     *
     * @return collection
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COLLECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TokenCollectionResponse getCollection() {
        return collection;
    }

    @JsonProperty(JSON_PROPERTY_COLLECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCollection(@jakarta.annotation.Nullable TokenCollectionResponse collection) {
        this.collection = collection;
    }

    public TokenOwnershipResponse balance(@jakarta.annotation.Nonnull String balance) {
        this.balance = balance;
        return this;
    }

    /**
     * Get balance
     *
     * @return balance
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BALANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBalance() {
        return balance;
    }

    @JsonProperty(JSON_PROPERTY_BALANCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBalance(@jakarta.annotation.Nonnull String balance) {
        this.balance = balance;
    }

    public TokenOwnershipResponse vaultAccountId(
            @jakarta.annotation.Nullable String vaultAccountId) {
        this.vaultAccountId = vaultAccountId;
        return this;
    }

    /**
     * Get vaultAccountId
     *
     * @return vaultAccountId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getVaultAccountId() {
        return vaultAccountId;
    }

    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVaultAccountId(@jakarta.annotation.Nullable String vaultAccountId) {
        this.vaultAccountId = vaultAccountId;
    }

    public TokenOwnershipResponse ownershipStartTime(
            @jakarta.annotation.Nonnull BigDecimal ownershipStartTime) {
        this.ownershipStartTime = ownershipStartTime;
        return this;
    }

    /**
     * Get ownershipStartTime
     *
     * @return ownershipStartTime
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OWNERSHIP_START_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getOwnershipStartTime() {
        return ownershipStartTime;
    }

    @JsonProperty(JSON_PROPERTY_OWNERSHIP_START_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOwnershipStartTime(@jakarta.annotation.Nonnull BigDecimal ownershipStartTime) {
        this.ownershipStartTime = ownershipStartTime;
    }

    public TokenOwnershipResponse ownershipLastUpdateTime(
            @jakarta.annotation.Nonnull BigDecimal ownershipLastUpdateTime) {
        this.ownershipLastUpdateTime = ownershipLastUpdateTime;
        return this;
    }

    /**
     * Get ownershipLastUpdateTime
     *
     * @return ownershipLastUpdateTime
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OWNERSHIP_LAST_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getOwnershipLastUpdateTime() {
        return ownershipLastUpdateTime;
    }

    @JsonProperty(JSON_PROPERTY_OWNERSHIP_LAST_UPDATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOwnershipLastUpdateTime(
            @jakarta.annotation.Nonnull BigDecimal ownershipLastUpdateTime) {
        this.ownershipLastUpdateTime = ownershipLastUpdateTime;
    }

    public TokenOwnershipResponse blockchainDescriptor(
            @jakarta.annotation.Nonnull BlockchainDescriptorEnum blockchainDescriptor) {
        this.blockchainDescriptor = blockchainDescriptor;
        return this;
    }

    /**
     * Get blockchainDescriptor
     *
     * @return blockchainDescriptor
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BlockchainDescriptorEnum getBlockchainDescriptor() {
        return blockchainDescriptor;
    }

    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBlockchainDescriptor(
            @jakarta.annotation.Nonnull BlockchainDescriptorEnum blockchainDescriptor) {
        this.blockchainDescriptor = blockchainDescriptor;
    }

    public TokenOwnershipResponse description(@jakarta.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(@jakarta.annotation.Nullable String description) {
        this.description = description;
    }

    public TokenOwnershipResponse name(@jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public TokenOwnershipResponse ncwId(@jakarta.annotation.Nullable String ncwId) {
        this.ncwId = ncwId;
        return this;
    }

    /**
     * Ownership Non-Custodial Wallet ID
     *
     * @return ncwId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NCW_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNcwId() {
        return ncwId;
    }

    @JsonProperty(JSON_PROPERTY_NCW_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNcwId(@jakarta.annotation.Nullable String ncwId) {
        this.ncwId = ncwId;
    }

    public TokenOwnershipResponse ncwAccountId(@jakarta.annotation.Nullable String ncwAccountId) {
        this.ncwAccountId = ncwAccountId;
        return this;
    }

    /**
     * Ownership Non-Custodial Wallet&#39;s account ID
     *
     * @return ncwAccountId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NCW_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNcwAccountId() {
        return ncwAccountId;
    }

    @JsonProperty(JSON_PROPERTY_NCW_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNcwAccountId(@jakarta.annotation.Nullable String ncwAccountId) {
        this.ncwAccountId = ncwAccountId;
    }

    public TokenOwnershipResponse status(@jakarta.annotation.Nonnull StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Owned Token&#39;s status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
        this.status = status;
    }

    /** Return true if this TokenOwnershipResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TokenOwnershipResponse tokenOwnershipResponse = (TokenOwnershipResponse) o;
        return Objects.equals(this.id, tokenOwnershipResponse.id)
                && Objects.equals(this.tokenId, tokenOwnershipResponse.tokenId)
                && Objects.equals(this.standard, tokenOwnershipResponse.standard)
                && Objects.equals(this.metadataURI, tokenOwnershipResponse.metadataURI)
                && Objects.equals(this.cachedMetadataURI, tokenOwnershipResponse.cachedMetadataURI)
                && Objects.equals(this.media, tokenOwnershipResponse.media)
                && Objects.equals(this.spam, tokenOwnershipResponse.spam)
                && Objects.equals(this.collection, tokenOwnershipResponse.collection)
                && Objects.equals(this.balance, tokenOwnershipResponse.balance)
                && Objects.equals(this.vaultAccountId, tokenOwnershipResponse.vaultAccountId)
                && Objects.equals(
                        this.ownershipStartTime, tokenOwnershipResponse.ownershipStartTime)
                && Objects.equals(
                        this.ownershipLastUpdateTime,
                        tokenOwnershipResponse.ownershipLastUpdateTime)
                && Objects.equals(
                        this.blockchainDescriptor, tokenOwnershipResponse.blockchainDescriptor)
                && Objects.equals(this.description, tokenOwnershipResponse.description)
                && Objects.equals(this.name, tokenOwnershipResponse.name)
                && Objects.equals(this.ncwId, tokenOwnershipResponse.ncwId)
                && Objects.equals(this.ncwAccountId, tokenOwnershipResponse.ncwAccountId)
                && Objects.equals(this.status, tokenOwnershipResponse.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                tokenId,
                standard,
                metadataURI,
                cachedMetadataURI,
                media,
                spam,
                collection,
                balance,
                vaultAccountId,
                ownershipStartTime,
                ownershipLastUpdateTime,
                blockchainDescriptor,
                description,
                name,
                ncwId,
                ncwAccountId,
                status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TokenOwnershipResponse {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
        sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
        sb.append("    metadataURI: ").append(toIndentedString(metadataURI)).append("\n");
        sb.append("    cachedMetadataURI: ")
                .append(toIndentedString(cachedMetadataURI))
                .append("\n");
        sb.append("    media: ").append(toIndentedString(media)).append("\n");
        sb.append("    spam: ").append(toIndentedString(spam)).append("\n");
        sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
        sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
        sb.append("    vaultAccountId: ").append(toIndentedString(vaultAccountId)).append("\n");
        sb.append("    ownershipStartTime: ")
                .append(toIndentedString(ownershipStartTime))
                .append("\n");
        sb.append("    ownershipLastUpdateTime: ")
                .append(toIndentedString(ownershipLastUpdateTime))
                .append("\n");
        sb.append("    blockchainDescriptor: ")
                .append(toIndentedString(blockchainDescriptor))
                .append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    ncwId: ").append(toIndentedString(ncwId)).append("\n");
        sb.append("    ncwAccountId: ").append(toIndentedString(ncwAccountId)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `tokenId` to the URL query string
        if (getTokenId() != null) {
            joiner.add(
                    String.format(
                            "%stokenId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTokenId()))));
        }

        // add `standard` to the URL query string
        if (getStandard() != null) {
            joiner.add(
                    String.format(
                            "%sstandard%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStandard()))));
        }

        // add `metadataURI` to the URL query string
        if (getMetadataURI() != null) {
            joiner.add(
                    String.format(
                            "%smetadataURI%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getMetadataURI()))));
        }

        // add `cachedMetadataURI` to the URL query string
        if (getCachedMetadataURI() != null) {
            joiner.add(
                    String.format(
                            "%scachedMetadataURI%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCachedMetadataURI()))));
        }

        // add `media` to the URL query string
        if (getMedia() != null) {
            for (int i = 0; i < getMedia().size(); i++) {
                if (getMedia().get(i) != null) {
                    joiner.add(
                            getMedia()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%smedia%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `spam` to the URL query string
        if (getSpam() != null) {
            joiner.add(getSpam().toUrlQueryString(prefix + "spam" + suffix));
        }

        // add `collection` to the URL query string
        if (getCollection() != null) {
            joiner.add(getCollection().toUrlQueryString(prefix + "collection" + suffix));
        }

        // add `balance` to the URL query string
        if (getBalance() != null) {
            joiner.add(
                    String.format(
                            "%sbalance%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBalance()))));
        }

        // add `vaultAccountId` to the URL query string
        if (getVaultAccountId() != null) {
            joiner.add(
                    String.format(
                            "%svaultAccountId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getVaultAccountId()))));
        }

        // add `ownershipStartTime` to the URL query string
        if (getOwnershipStartTime() != null) {
            joiner.add(
                    String.format(
                            "%sownershipStartTime%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOwnershipStartTime()))));
        }

        // add `ownershipLastUpdateTime` to the URL query string
        if (getOwnershipLastUpdateTime() != null) {
            joiner.add(
                    String.format(
                            "%sownershipLastUpdateTime%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getOwnershipLastUpdateTime()))));
        }

        // add `blockchainDescriptor` to the URL query string
        if (getBlockchainDescriptor() != null) {
            joiner.add(
                    String.format(
                            "%sblockchainDescriptor%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getBlockchainDescriptor()))));
        }

        // add `description` to the URL query string
        if (getDescription() != null) {
            joiner.add(
                    String.format(
                            "%sdescription%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `ncwId` to the URL query string
        if (getNcwId() != null) {
            joiner.add(
                    String.format(
                            "%sncwId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getNcwId()))));
        }

        // add `ncwAccountId` to the URL query string
        if (getNcwAccountId() != null) {
            joiner.add(
                    String.format(
                            "%sncwAccountId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getNcwAccountId()))));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        return joiner.toString();
    }
}
