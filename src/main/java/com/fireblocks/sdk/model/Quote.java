/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import com.fireblocks.sdk.JSON;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

/** Quote */
@JsonPropertyOrder({
    Quote.JSON_PROPERTY_VIA,
    Quote.JSON_PROPERTY_ID,
    Quote.JSON_PROPERTY_TYPE,
    Quote.JSON_PROPERTY_QUOTE_ASSET_ID,
    Quote.JSON_PROPERTY_BASE_ASSET_ID,
    Quote.JSON_PROPERTY_BASE_AMOUNT,
    Quote.JSON_PROPERTY_QUOTE_AMOUNT,
    Quote.JSON_PROPERTY_PRICE_IMPACT,
    Quote.JSON_PROPERTY_QUOTE_MIN_AMOUNT,
    Quote.JSON_PROPERTY_EXECUTION_STEPS,
    Quote.JSON_PROPERTY_GENERAL_FEES,
    Quote.JSON_PROPERTY_SIDE,
    Quote.JSON_PROPERTY_EXPIRES_AT
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
@JsonIgnoreProperties(
        value = "type", // ignore manually set type, it will be automatically generated by Jackson
        // during serialization
        allowSetters = true // allows the type to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "type",
        visible = true)
public class Quote {
    public static final String JSON_PROPERTY_VIA = "via";
    @jakarta.annotation.Nonnull private AccessType via;

    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    /** Indicates this is an indicative quote */
    public enum TypeEnum {
        INDICATIVE(String.valueOf("INDICATIVE"));

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private TypeEnum type;

    public static final String JSON_PROPERTY_QUOTE_ASSET_ID = "quoteAssetId";
    @jakarta.annotation.Nonnull private String quoteAssetId;

    public static final String JSON_PROPERTY_BASE_ASSET_ID = "baseAssetId";
    @jakarta.annotation.Nonnull private String baseAssetId;

    public static final String JSON_PROPERTY_BASE_AMOUNT = "baseAmount";
    @jakarta.annotation.Nonnull private String baseAmount;

    public static final String JSON_PROPERTY_QUOTE_AMOUNT = "quoteAmount";
    @jakarta.annotation.Nonnull private String quoteAmount;

    public static final String JSON_PROPERTY_PRICE_IMPACT = "priceImpact";
    @jakarta.annotation.Nullable private BigDecimal priceImpact;

    public static final String JSON_PROPERTY_QUOTE_MIN_AMOUNT = "quoteMinAmount";
    @jakarta.annotation.Nullable private String quoteMinAmount;

    public static final String JSON_PROPERTY_EXECUTION_STEPS = "executionSteps";
    @jakarta.annotation.Nullable private List<ExecutionStepDetails> executionSteps;

    public static final String JSON_PROPERTY_GENERAL_FEES = "generalFees";
    @jakarta.annotation.Nullable private List<Fee> generalFees;

    /** Side of the order */
    public enum SideEnum {
        BUY(String.valueOf("BUY")),

        SELL(String.valueOf("SELL"));

        private String value;

        SideEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SideEnum fromValue(String value) {
            for (SideEnum b : SideEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_SIDE = "side";
    @jakarta.annotation.Nonnull private SideEnum side;

    public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
    @jakarta.annotation.Nonnull private OffsetDateTime expiresAt;

    public Quote() {}

    @JsonCreator
    public Quote(
            @JsonProperty(value = JSON_PROPERTY_VIA, required = true) AccessType via,
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) TypeEnum type,
            @JsonProperty(value = JSON_PROPERTY_QUOTE_ASSET_ID, required = true)
                    String quoteAssetId,
            @JsonProperty(value = JSON_PROPERTY_BASE_ASSET_ID, required = true) String baseAssetId,
            @JsonProperty(value = JSON_PROPERTY_BASE_AMOUNT, required = true) String baseAmount,
            @JsonProperty(value = JSON_PROPERTY_QUOTE_AMOUNT, required = true) String quoteAmount,
            @JsonProperty(value = JSON_PROPERTY_SIDE, required = true) SideEnum side,
            @JsonProperty(value = JSON_PROPERTY_EXPIRES_AT, required = true)
                    OffsetDateTime expiresAt) {
        this.via = via;
        this.id = id;
        this.type = type;
        this.quoteAssetId = quoteAssetId;
        this.baseAssetId = baseAssetId;
        this.baseAmount = baseAmount;
        this.quoteAmount = quoteAmount;
        this.side = side;
        this.expiresAt = expiresAt;
    }

    public Quote via(@jakarta.annotation.Nonnull AccessType via) {
        this.via = via;
        return this;
    }

    /**
     * Get via
     *
     * @return via
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VIA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AccessType getVia() {
        return via;
    }

    @JsonProperty(JSON_PROPERTY_VIA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVia(@jakarta.annotation.Nonnull AccessType via) {
        this.via = via;
    }

    public Quote id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public Quote type(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Indicates this is an indicative quote
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
    }

    public Quote quoteAssetId(@jakarta.annotation.Nonnull String quoteAssetId) {
        this.quoteAssetId = quoteAssetId;
        return this;
    }

    /**
     * Get quoteAssetId
     *
     * @return quoteAssetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getQuoteAssetId() {
        return quoteAssetId;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQuoteAssetId(@jakarta.annotation.Nonnull String quoteAssetId) {
        this.quoteAssetId = quoteAssetId;
    }

    public Quote baseAssetId(@jakarta.annotation.Nonnull String baseAssetId) {
        this.baseAssetId = baseAssetId;
        return this;
    }

    /**
     * Get baseAssetId
     *
     * @return baseAssetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBaseAssetId() {
        return baseAssetId;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAssetId(@jakarta.annotation.Nonnull String baseAssetId) {
        this.baseAssetId = baseAssetId;
    }

    public Quote baseAmount(@jakarta.annotation.Nonnull String baseAmount) {
        this.baseAmount = baseAmount;
        return this;
    }

    /**
     * Get baseAmount
     *
     * @return baseAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBaseAmount() {
        return baseAmount;
    }

    @JsonProperty(JSON_PROPERTY_BASE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAmount(@jakarta.annotation.Nonnull String baseAmount) {
        this.baseAmount = baseAmount;
    }

    public Quote quoteAmount(@jakarta.annotation.Nonnull String quoteAmount) {
        this.quoteAmount = quoteAmount;
        return this;
    }

    /**
     * Get quoteAmount
     *
     * @return quoteAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getQuoteAmount() {
        return quoteAmount;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQuoteAmount(@jakarta.annotation.Nonnull String quoteAmount) {
        this.quoteAmount = quoteAmount;
    }

    public Quote priceImpact(@jakarta.annotation.Nullable BigDecimal priceImpact) {
        this.priceImpact = priceImpact;
        return this;
    }

    /**
     * Get priceImpact
     *
     * @return priceImpact
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PRICE_IMPACT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getPriceImpact() {
        return priceImpact;
    }

    @JsonProperty(JSON_PROPERTY_PRICE_IMPACT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPriceImpact(@jakarta.annotation.Nullable BigDecimal priceImpact) {
        this.priceImpact = priceImpact;
    }

    public Quote quoteMinAmount(@jakarta.annotation.Nullable String quoteMinAmount) {
        this.quoteMinAmount = quoteMinAmount;
        return this;
    }

    /**
     * Get quoteMinAmount
     *
     * @return quoteMinAmount
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUOTE_MIN_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getQuoteMinAmount() {
        return quoteMinAmount;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_MIN_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuoteMinAmount(@jakarta.annotation.Nullable String quoteMinAmount) {
        this.quoteMinAmount = quoteMinAmount;
    }

    public Quote executionSteps(
            @jakarta.annotation.Nullable List<ExecutionStepDetails> executionSteps) {
        this.executionSteps = executionSteps;
        return this;
    }

    public Quote addExecutionStepsItem(ExecutionStepDetails executionStepsItem) {
        if (this.executionSteps == null) {
            this.executionSteps = new ArrayList<>();
        }
        this.executionSteps.add(executionStepsItem);
        return this;
    }

    /**
     * Get executionSteps
     *
     * @return executionSteps
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXECUTION_STEPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<ExecutionStepDetails> getExecutionSteps() {
        return executionSteps;
    }

    @JsonProperty(JSON_PROPERTY_EXECUTION_STEPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExecutionSteps(
            @jakarta.annotation.Nullable List<ExecutionStepDetails> executionSteps) {
        this.executionSteps = executionSteps;
    }

    public Quote generalFees(@jakarta.annotation.Nullable List<Fee> generalFees) {
        this.generalFees = generalFees;
        return this;
    }

    public Quote addGeneralFeesItem(Fee generalFeesItem) {
        if (this.generalFees == null) {
            this.generalFees = new ArrayList<>();
        }
        this.generalFees.add(generalFeesItem);
        return this;
    }

    /**
     * Get generalFees
     *
     * @return generalFees
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_GENERAL_FEES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Fee> getGeneralFees() {
        return generalFees;
    }

    @JsonProperty(JSON_PROPERTY_GENERAL_FEES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeneralFees(@jakarta.annotation.Nullable List<Fee> generalFees) {
        this.generalFees = generalFees;
    }

    public Quote side(@jakarta.annotation.Nonnull SideEnum side) {
        this.side = side;
        return this;
    }

    /**
     * Side of the order
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SIDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SideEnum getSide() {
        return side;
    }

    @JsonProperty(JSON_PROPERTY_SIDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSide(@jakarta.annotation.Nonnull SideEnum side) {
        this.side = side;
    }

    public Quote expiresAt(@jakarta.annotation.Nonnull OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * ISO 8601 timestamp of the expiration time of the quote.
     *
     * @return expiresAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getExpiresAt() {
        return expiresAt;
    }

    @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExpiresAt(@jakarta.annotation.Nonnull OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
    }

    /** Return true if this Quote object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Quote quote = (Quote) o;
        return Objects.equals(this.via, quote.via)
                && Objects.equals(this.id, quote.id)
                && Objects.equals(this.type, quote.type)
                && Objects.equals(this.quoteAssetId, quote.quoteAssetId)
                && Objects.equals(this.baseAssetId, quote.baseAssetId)
                && Objects.equals(this.baseAmount, quote.baseAmount)
                && Objects.equals(this.quoteAmount, quote.quoteAmount)
                && Objects.equals(this.priceImpact, quote.priceImpact)
                && Objects.equals(this.quoteMinAmount, quote.quoteMinAmount)
                && Objects.equals(this.executionSteps, quote.executionSteps)
                && Objects.equals(this.generalFees, quote.generalFees)
                && Objects.equals(this.side, quote.side)
                && Objects.equals(this.expiresAt, quote.expiresAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                via,
                id,
                type,
                quoteAssetId,
                baseAssetId,
                baseAmount,
                quoteAmount,
                priceImpact,
                quoteMinAmount,
                executionSteps,
                generalFees,
                side,
                expiresAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Quote {\n");
        sb.append("    via: ").append(toIndentedString(via)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    quoteAssetId: ").append(toIndentedString(quoteAssetId)).append("\n");
        sb.append("    baseAssetId: ").append(toIndentedString(baseAssetId)).append("\n");
        sb.append("    baseAmount: ").append(toIndentedString(baseAmount)).append("\n");
        sb.append("    quoteAmount: ").append(toIndentedString(quoteAmount)).append("\n");
        sb.append("    priceImpact: ").append(toIndentedString(priceImpact)).append("\n");
        sb.append("    quoteMinAmount: ").append(toIndentedString(quoteMinAmount)).append("\n");
        sb.append("    executionSteps: ").append(toIndentedString(executionSteps)).append("\n");
        sb.append("    generalFees: ").append(toIndentedString(generalFees)).append("\n");
        sb.append("    side: ").append(toIndentedString(side)).append("\n");
        sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `via` to the URL query string
        if (getVia() != null) {
            joiner.add(getVia().toUrlQueryString(prefix + "via" + suffix));
        }

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `quoteAssetId` to the URL query string
        if (getQuoteAssetId() != null) {
            joiner.add(
                    String.format(
                            "%squoteAssetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteAssetId()))));
        }

        // add `baseAssetId` to the URL query string
        if (getBaseAssetId() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAssetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBaseAssetId()))));
        }

        // add `baseAmount` to the URL query string
        if (getBaseAmount() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAmount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBaseAmount()))));
        }

        // add `quoteAmount` to the URL query string
        if (getQuoteAmount() != null) {
            joiner.add(
                    String.format(
                            "%squoteAmount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteAmount()))));
        }

        // add `priceImpact` to the URL query string
        if (getPriceImpact() != null) {
            joiner.add(
                    String.format(
                            "%spriceImpact%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPriceImpact()))));
        }

        // add `quoteMinAmount` to the URL query string
        if (getQuoteMinAmount() != null) {
            joiner.add(
                    String.format(
                            "%squoteMinAmount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getQuoteMinAmount()))));
        }

        // add `executionSteps` to the URL query string
        if (getExecutionSteps() != null) {
            for (int i = 0; i < getExecutionSteps().size(); i++) {
                if (getExecutionSteps().get(i) != null) {
                    joiner.add(
                            getExecutionSteps()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sexecutionSteps%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `generalFees` to the URL query string
        if (getGeneralFees() != null) {
            for (int i = 0; i < getGeneralFees().size(); i++) {
                if (getGeneralFees().get(i) != null) {
                    joiner.add(
                            getGeneralFees()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sgeneralFees%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `side` to the URL query string
        if (getSide() != null) {
            joiner.add(
                    String.format(
                            "%sside%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSide()))));
        }

        // add `expiresAt` to the URL query string
        if (getExpiresAt() != null) {
            joiner.add(
                    String.format(
                            "%sexpiresAt%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getExpiresAt()))));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("Quote", Quote.class);
        JSON.registerDiscriminator(Quote.class, "type", mappings);
    }
}
