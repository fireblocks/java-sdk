/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** Asset */
@JsonPropertyOrder({
    Asset.JSON_PROPERTY_ID,
    Asset.JSON_PROPERTY_LEGACY_ID,
    Asset.JSON_PROPERTY_BLOCKCHAIN_ID,
    Asset.JSON_PROPERTY_DISPLAY_NAME,
    Asset.JSON_PROPERTY_DISPLAY_SYMBOL,
    Asset.JSON_PROPERTY_ASSET_CLASS,
    Asset.JSON_PROPERTY_ONCHAIN,
    Asset.JSON_PROPERTY_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Asset {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_LEGACY_ID = "legacyId";
    private String legacyId;

    public static final String JSON_PROPERTY_BLOCKCHAIN_ID = "blockchainId";
    private String blockchainId;

    public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
    private String displayName;

    public static final String JSON_PROPERTY_DISPLAY_SYMBOL = "displaySymbol";
    private String displaySymbol;

    public static final String JSON_PROPERTY_ASSET_CLASS = "assetClass";
    private AssetClass assetClass;

    public static final String JSON_PROPERTY_ONCHAIN = "onchain";
    private AssetDetailsOnchain onchain;

    public static final String JSON_PROPERTY_METADATA = "metadata";
    private AssetDetailsMetadata metadata;

    public Asset() {}

    public Asset id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The ID of the asset
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public Asset legacyId(String legacyId) {
        this.legacyId = legacyId;
        return this;
    }

    /**
     * The Legacy ID of the asset
     *
     * @return legacyId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LEGACY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getLegacyId() {
        return legacyId;
    }

    @JsonProperty(JSON_PROPERTY_LEGACY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLegacyId(String legacyId) {
        this.legacyId = legacyId;
    }

    public Asset blockchainId(String blockchainId) {
        this.blockchainId = blockchainId;
        return this;
    }

    /**
     * The ID of the asset&#39;s blockchain
     *
     * @return blockchainId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBlockchainId() {
        return blockchainId;
    }

    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlockchainId(String blockchainId) {
        this.blockchainId = blockchainId;
    }

    public Asset displayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Asset&#39;s display name
     *
     * @return displayName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getDisplayName() {
        return displayName;
    }

    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Asset displaySymbol(String displaySymbol) {
        this.displaySymbol = displaySymbol;
        return this;
    }

    /**
     * Asset&#39;s display symbol
     *
     * @return displaySymbol
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DISPLAY_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getDisplaySymbol() {
        return displaySymbol;
    }

    @JsonProperty(JSON_PROPERTY_DISPLAY_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDisplaySymbol(String displaySymbol) {
        this.displaySymbol = displaySymbol;
    }

    public Asset assetClass(AssetClass assetClass) {
        this.assetClass = assetClass;
        return this;
    }

    /**
     * Get assetClass
     *
     * @return assetClass
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET_CLASS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AssetClass getAssetClass() {
        return assetClass;
    }

    @JsonProperty(JSON_PROPERTY_ASSET_CLASS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAssetClass(AssetClass assetClass) {
        this.assetClass = assetClass;
    }

    public Asset onchain(AssetDetailsOnchain onchain) {
        this.onchain = onchain;
        return this;
    }

    /**
     * Get onchain
     *
     * @return onchain
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ONCHAIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AssetDetailsOnchain getOnchain() {
        return onchain;
    }

    @JsonProperty(JSON_PROPERTY_ONCHAIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOnchain(AssetDetailsOnchain onchain) {
        this.onchain = onchain;
    }

    public Asset metadata(AssetDetailsMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get metadata
     *
     * @return metadata
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_METADATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AssetDetailsMetadata getMetadata() {
        return metadata;
    }

    @JsonProperty(JSON_PROPERTY_METADATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMetadata(AssetDetailsMetadata metadata) {
        this.metadata = metadata;
    }

    /** Return true if this Asset object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Asset asset = (Asset) o;
        return Objects.equals(this.id, asset.id)
                && Objects.equals(this.legacyId, asset.legacyId)
                && Objects.equals(this.blockchainId, asset.blockchainId)
                && Objects.equals(this.displayName, asset.displayName)
                && Objects.equals(this.displaySymbol, asset.displaySymbol)
                && Objects.equals(this.assetClass, asset.assetClass)
                && Objects.equals(this.onchain, asset.onchain)
                && Objects.equals(this.metadata, asset.metadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                legacyId,
                blockchainId,
                displayName,
                displaySymbol,
                assetClass,
                onchain,
                metadata);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Asset {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    legacyId: ").append(toIndentedString(legacyId)).append("\n");
        sb.append("    blockchainId: ").append(toIndentedString(blockchainId)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    displaySymbol: ").append(toIndentedString(displaySymbol)).append("\n");
        sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
        sb.append("    onchain: ").append(toIndentedString(onchain)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `legacyId` to the URL query string
        if (getLegacyId() != null) {
            joiner.add(
                    String.format(
                            "%slegacyId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getLegacyId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `blockchainId` to the URL query string
        if (getBlockchainId() != null) {
            joiner.add(
                    String.format(
                            "%sblockchainId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBlockchainId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `displayName` to the URL query string
        if (getDisplayName() != null) {
            joiner.add(
                    String.format(
                            "%sdisplayName%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDisplayName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `displaySymbol` to the URL query string
        if (getDisplaySymbol() != null) {
            joiner.add(
                    String.format(
                            "%sdisplaySymbol%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDisplaySymbol()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `assetClass` to the URL query string
        if (getAssetClass() != null) {
            joiner.add(
                    String.format(
                            "%sassetClass%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getAssetClass()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `onchain` to the URL query string
        if (getOnchain() != null) {
            joiner.add(getOnchain().toUrlQueryString(prefix + "onchain" + suffix));
        }

        // add `metadata` to the URL query string
        if (getMetadata() != null) {
            joiner.add(getMetadata().toUrlQueryString(prefix + "metadata" + suffix));
        }

        return joiner.toString();
    }
}
