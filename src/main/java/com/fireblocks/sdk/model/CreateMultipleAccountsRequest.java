/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** CreateMultipleAccountsRequest */
@JsonPropertyOrder({
    CreateMultipleAccountsRequest.JSON_PROPERTY_COUNT,
    CreateMultipleAccountsRequest.JSON_PROPERTY_BASE_ASSET_IDS,
    CreateMultipleAccountsRequest.JSON_PROPERTY_NAMES,
    CreateMultipleAccountsRequest.JSON_PROPERTY_VAULT_ACCOUNT_NAMES_STARTING_INDEX,
    CreateMultipleAccountsRequest.JSON_PROPERTY_PREFIX
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class CreateMultipleAccountsRequest {
    public static final String JSON_PROPERTY_COUNT = "count";
    @jakarta.annotation.Nonnull private Integer count;

    public static final String JSON_PROPERTY_BASE_ASSET_IDS = "baseAssetIds";
    @jakarta.annotation.Nonnull private List<String> baseAssetIds;

    public static final String JSON_PROPERTY_NAMES = "names";
    @jakarta.annotation.Nullable private List<String> names;

    public static final String JSON_PROPERTY_VAULT_ACCOUNT_NAMES_STARTING_INDEX =
            "vaultAccountNamesStartingIndex";
    @jakarta.annotation.Nullable private Integer vaultAccountNamesStartingIndex;

    public static final String JSON_PROPERTY_PREFIX = "prefix";
    @jakarta.annotation.Nullable private String prefix;

    public CreateMultipleAccountsRequest() {}

    @JsonCreator
    public CreateMultipleAccountsRequest(
            @JsonProperty(value = JSON_PROPERTY_COUNT, required = true) Integer count,
            @JsonProperty(value = JSON_PROPERTY_BASE_ASSET_IDS, required = true)
                    List<String> baseAssetIds) {
        this.count = count;
        this.baseAssetIds = baseAssetIds;
    }

    public CreateMultipleAccountsRequest count(@jakarta.annotation.Nonnull Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Count
     *
     * @return count
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getCount() {
        return count;
    }

    @JsonProperty(JSON_PROPERTY_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCount(@jakarta.annotation.Nonnull Integer count) {
        this.count = count;
    }

    public CreateMultipleAccountsRequest baseAssetIds(
            @jakarta.annotation.Nonnull List<String> baseAssetIds) {
        this.baseAssetIds = baseAssetIds;
        return this;
    }

    public CreateMultipleAccountsRequest addBaseAssetIdsItem(String baseAssetIdsItem) {
        if (this.baseAssetIds == null) {
            this.baseAssetIds = new ArrayList<>();
        }
        this.baseAssetIds.add(baseAssetIdsItem);
        return this;
    }

    /**
     * Array of base asset IDs
     *
     * @return baseAssetIds
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_ASSET_IDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getBaseAssetIds() {
        return baseAssetIds;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET_IDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAssetIds(@jakarta.annotation.Nonnull List<String> baseAssetIds) {
        this.baseAssetIds = baseAssetIds;
    }

    public CreateMultipleAccountsRequest names(@jakarta.annotation.Nullable List<String> names) {
        this.names = names;
        return this;
    }

    public CreateMultipleAccountsRequest addNamesItem(String namesItem) {
        if (this.names == null) {
            this.names = new ArrayList<>();
        }
        this.names.add(namesItem);
        return this;
    }

    /**
     * Names to assign to vault accounts. if vaultAccountNamesStartingIndex or prefix is used
     * it&#39;ll fail
     *
     * @return names
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAMES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getNames() {
        return names;
    }

    @JsonProperty(JSON_PROPERTY_NAMES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNames(@jakarta.annotation.Nullable List<String> names) {
        this.names = names;
    }

    public CreateMultipleAccountsRequest vaultAccountNamesStartingIndex(
            @jakarta.annotation.Nullable Integer vaultAccountNamesStartingIndex) {
        this.vaultAccountNamesStartingIndex = vaultAccountNamesStartingIndex;
        return this;
    }

    /**
     * Copy vault accounts names starting from this index. If names array is used it&#39;ll fail
     *
     * @return vaultAccountNamesStartingIndex
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_NAMES_STARTING_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getVaultAccountNamesStartingIndex() {
        return vaultAccountNamesStartingIndex;
    }

    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_NAMES_STARTING_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVaultAccountNamesStartingIndex(
            @jakarta.annotation.Nullable Integer vaultAccountNamesStartingIndex) {
        this.vaultAccountNamesStartingIndex = vaultAccountNamesStartingIndex;
    }

    public CreateMultipleAccountsRequest prefix(@jakarta.annotation.Nullable String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * When copying from existing vault accounts (vaultAccountNamesStartingIndex) then adding a
     * prefix to the names. If names array is used it&#39;ll fail
     *
     * @return prefix
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PREFIX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPrefix() {
        return prefix;
    }

    @JsonProperty(JSON_PROPERTY_PREFIX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrefix(@jakarta.annotation.Nullable String prefix) {
        this.prefix = prefix;
    }

    /** Return true if this CreateMultipleAccountsRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMultipleAccountsRequest createMultipleAccountsRequest =
                (CreateMultipleAccountsRequest) o;
        return Objects.equals(this.count, createMultipleAccountsRequest.count)
                && Objects.equals(this.baseAssetIds, createMultipleAccountsRequest.baseAssetIds)
                && Objects.equals(this.names, createMultipleAccountsRequest.names)
                && Objects.equals(
                        this.vaultAccountNamesStartingIndex,
                        createMultipleAccountsRequest.vaultAccountNamesStartingIndex)
                && Objects.equals(this.prefix, createMultipleAccountsRequest.prefix);
    }

    @Override
    public int hashCode() {
        return Objects.hash(count, baseAssetIds, names, vaultAccountNamesStartingIndex, prefix);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateMultipleAccountsRequest {\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("    baseAssetIds: ").append(toIndentedString(baseAssetIds)).append("\n");
        sb.append("    names: ").append(toIndentedString(names)).append("\n");
        sb.append("    vaultAccountNamesStartingIndex: ")
                .append(toIndentedString(vaultAccountNamesStartingIndex))
                .append("\n");
        sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `count` to the URL query string
        if (getCount() != null) {
            joiner.add(
                    String.format(
                            "%scount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCount()))));
        }

        // add `baseAssetIds` to the URL query string
        if (getBaseAssetIds() != null) {
            for (int i = 0; i < getBaseAssetIds().size(); i++) {
                joiner.add(
                        String.format(
                                "%sbaseAssetIds%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getBaseAssetIds().get(i)))));
            }
        }

        // add `names` to the URL query string
        if (getNames() != null) {
            for (int i = 0; i < getNames().size(); i++) {
                joiner.add(
                        String.format(
                                "%snames%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(ApiClient.valueToString(getNames().get(i)))));
            }
        }

        // add `vaultAccountNamesStartingIndex` to the URL query string
        if (getVaultAccountNamesStartingIndex() != null) {
            joiner.add(
                    String.format(
                            "%svaultAccountNamesStartingIndex%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getVaultAccountNamesStartingIndex()))));
        }

        // add `prefix` to the URL query string
        if (getPrefix() != null) {
            joiner.add(
                    String.format(
                            "%sprefix%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPrefix()))));
        }

        return joiner.toString();
    }
}
