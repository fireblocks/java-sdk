/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** EmbeddedWalletAssetResponse */
@JsonPropertyOrder({
    EmbeddedWalletAssetResponse.JSON_PROPERTY_ID,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_SYMBOL,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_NAME,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_DECIMALS,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_NETWORK_PROTOCOL,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_TESTNET,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_HAS_FEE,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_BASE_ASSET,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_ETH_NETWORK,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_ETH_CONTRACT_ADDRESS,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_ISSUER_ADDRESS,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_BLOCKCHAIN_SYMBOL,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_DEPRECATED,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_COIN_TYPE,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_BLOCKCHAIN,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_BLOCKCHAIN_DISPLAY_NAME,
    EmbeddedWalletAssetResponse.JSON_PROPERTY_ALGORITHM
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EmbeddedWalletAssetResponse {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_SYMBOL = "symbol";
    private String symbol;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_DECIMALS = "decimals";
    private BigDecimal decimals;

    public static final String JSON_PROPERTY_NETWORK_PROTOCOL = "networkProtocol";
    private String networkProtocol;

    public static final String JSON_PROPERTY_TESTNET = "testnet";
    private Boolean testnet;

    public static final String JSON_PROPERTY_HAS_FEE = "hasFee";
    private Boolean hasFee;

    public static final String JSON_PROPERTY_BASE_ASSET = "baseAsset";
    private String baseAsset;

    public static final String JSON_PROPERTY_ETH_NETWORK = "ethNetwork";
    private String ethNetwork;

    public static final String JSON_PROPERTY_ETH_CONTRACT_ADDRESS = "ethContractAddress";
    private String ethContractAddress;

    public static final String JSON_PROPERTY_ISSUER_ADDRESS = "issuerAddress";
    private String issuerAddress;

    public static final String JSON_PROPERTY_BLOCKCHAIN_SYMBOL = "blockchainSymbol";
    private String blockchainSymbol;

    public static final String JSON_PROPERTY_DEPRECATED = "deprecated";
    private Boolean deprecated;

    public static final String JSON_PROPERTY_COIN_TYPE = "coinType";
    private BigDecimal coinType;

    public static final String JSON_PROPERTY_BLOCKCHAIN = "blockchain";
    private String blockchain;

    public static final String JSON_PROPERTY_BLOCKCHAIN_DISPLAY_NAME = "blockchainDisplayName";
    private String blockchainDisplayName;

    /** Gets or Sets algorithm */
    public enum AlgorithmEnum {
        ECDSA_SECP256K1("MPC_ECDSA_SECP256K1"),

        EDDSA_ED25519("MPC_EDDSA_ED25519");

        private String value;

        AlgorithmEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AlgorithmEnum fromValue(String value) {
            for (AlgorithmEnum b : AlgorithmEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
    private AlgorithmEnum algorithm;

    public EmbeddedWalletAssetResponse() {}

    public EmbeddedWalletAssetResponse id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public EmbeddedWalletAssetResponse symbol(String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * The asset symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSymbol() {
        return symbol;
    }

    @JsonProperty(JSON_PROPERTY_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    public EmbeddedWalletAssetResponse name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The asset name
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public EmbeddedWalletAssetResponse decimals(BigDecimal decimals) {
        this.decimals = decimals;
        return this;
    }

    /**
     * Number of decimals
     *
     * @return decimals
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DECIMALS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getDecimals() {
        return decimals;
    }

    @JsonProperty(JSON_PROPERTY_DECIMALS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDecimals(BigDecimal decimals) {
        this.decimals = decimals;
    }

    public EmbeddedWalletAssetResponse networkProtocol(String networkProtocol) {
        this.networkProtocol = networkProtocol;
        return this;
    }

    /**
     * Netowrk protocol of the blockchain (BTC, ETH)
     *
     * @return networkProtocol
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NETWORK_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getNetworkProtocol() {
        return networkProtocol;
    }

    @JsonProperty(JSON_PROPERTY_NETWORK_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNetworkProtocol(String networkProtocol) {
        this.networkProtocol = networkProtocol;
    }

    public EmbeddedWalletAssetResponse testnet(Boolean testnet) {
        this.testnet = testnet;
        return this;
    }

    /**
     * Is in testnet
     *
     * @return testnet
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TESTNET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getTestnet() {
        return testnet;
    }

    @JsonProperty(JSON_PROPERTY_TESTNET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTestnet(Boolean testnet) {
        this.testnet = testnet;
    }

    public EmbeddedWalletAssetResponse hasFee(Boolean hasFee) {
        this.hasFee = hasFee;
        return this;
    }

    /**
     * Has fee
     *
     * @return hasFee
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_HAS_FEE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getHasFee() {
        return hasFee;
    }

    @JsonProperty(JSON_PROPERTY_HAS_FEE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setHasFee(Boolean hasFee) {
        this.hasFee = hasFee;
    }

    public EmbeddedWalletAssetResponse baseAsset(String baseAsset) {
        this.baseAsset = baseAsset;
        return this;
    }

    /**
     * Base asset symbol BTC_TEST, ETH_TEST5)
     *
     * @return baseAsset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BASE_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBaseAsset() {
        return baseAsset;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBaseAsset(String baseAsset) {
        this.baseAsset = baseAsset;
    }

    public EmbeddedWalletAssetResponse ethNetwork(String ethNetwork) {
        this.ethNetwork = ethNetwork;
        return this;
    }

    /**
     * Get ethNetwork
     *
     * @return ethNetwork
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ETH_NETWORK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getEthNetwork() {
        return ethNetwork;
    }

    @JsonProperty(JSON_PROPERTY_ETH_NETWORK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEthNetwork(String ethNetwork) {
        this.ethNetwork = ethNetwork;
    }

    public EmbeddedWalletAssetResponse ethContractAddress(String ethContractAddress) {
        this.ethContractAddress = ethContractAddress;
        return this;
    }

    /**
     * Get ethContractAddress
     *
     * @return ethContractAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ETH_CONTRACT_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getEthContractAddress() {
        return ethContractAddress;
    }

    @JsonProperty(JSON_PROPERTY_ETH_CONTRACT_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEthContractAddress(String ethContractAddress) {
        this.ethContractAddress = ethContractAddress;
    }

    public EmbeddedWalletAssetResponse issuerAddress(String issuerAddress) {
        this.issuerAddress = issuerAddress;
        return this;
    }

    /**
     * The address of the issuer of this token. Will be part of the identifier of this token on
     * chain.
     *
     * @return issuerAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ISSUER_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getIssuerAddress() {
        return issuerAddress;
    }

    @JsonProperty(JSON_PROPERTY_ISSUER_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIssuerAddress(String issuerAddress) {
        this.issuerAddress = issuerAddress;
    }

    public EmbeddedWalletAssetResponse blockchainSymbol(String blockchainSymbol) {
        this.blockchainSymbol = blockchainSymbol;
        return this;
    }

    /**
     * Name of blockchain
     *
     * @return blockchainSymbol
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBlockchainSymbol() {
        return blockchainSymbol;
    }

    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlockchainSymbol(String blockchainSymbol) {
        this.blockchainSymbol = blockchainSymbol;
    }

    public EmbeddedWalletAssetResponse deprecated(Boolean deprecated) {
        this.deprecated = deprecated;
        return this;
    }

    /**
     * Is blockchain deprecated
     *
     * @return deprecated
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DEPRECATED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getDeprecated() {
        return deprecated;
    }

    @JsonProperty(JSON_PROPERTY_DEPRECATED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeprecated(Boolean deprecated) {
        this.deprecated = deprecated;
    }

    public EmbeddedWalletAssetResponse coinType(BigDecimal coinType) {
        this.coinType = coinType;
        return this;
    }

    /**
     * Unique identifier of an asset (0 for BTC, 60 for ETH, etc.)
     *
     * @return coinType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COIN_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getCoinType() {
        return coinType;
    }

    @JsonProperty(JSON_PROPERTY_COIN_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCoinType(BigDecimal coinType) {
        this.coinType = coinType;
    }

    public EmbeddedWalletAssetResponse blockchain(String blockchain) {
        this.blockchain = blockchain;
        return this;
    }

    /**
     * The blockchain native asset id which the token is deployed on
     *
     * @return blockchain
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBlockchain() {
        return blockchain;
    }

    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBlockchain(String blockchain) {
        this.blockchain = blockchain;
    }

    public EmbeddedWalletAssetResponse blockchainDisplayName(String blockchainDisplayName) {
        this.blockchainDisplayName = blockchainDisplayName;
        return this;
    }

    /**
     * Name of blockchain
     *
     * @return blockchainDisplayName
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBlockchainDisplayName() {
        return blockchainDisplayName;
    }

    @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlockchainDisplayName(String blockchainDisplayName) {
        this.blockchainDisplayName = blockchainDisplayName;
    }

    public EmbeddedWalletAssetResponse algorithm(AlgorithmEnum algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get algorithm
     *
     * @return algorithm
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AlgorithmEnum getAlgorithm() {
        return algorithm;
    }

    @JsonProperty(JSON_PROPERTY_ALGORITHM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAlgorithm(AlgorithmEnum algorithm) {
        this.algorithm = algorithm;
    }

    /** Return true if this EmbeddedWalletAssetResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbeddedWalletAssetResponse embeddedWalletAssetResponse = (EmbeddedWalletAssetResponse) o;
        return Objects.equals(this.id, embeddedWalletAssetResponse.id)
                && Objects.equals(this.symbol, embeddedWalletAssetResponse.symbol)
                && Objects.equals(this.name, embeddedWalletAssetResponse.name)
                && Objects.equals(this.decimals, embeddedWalletAssetResponse.decimals)
                && Objects.equals(this.networkProtocol, embeddedWalletAssetResponse.networkProtocol)
                && Objects.equals(this.testnet, embeddedWalletAssetResponse.testnet)
                && Objects.equals(this.hasFee, embeddedWalletAssetResponse.hasFee)
                && Objects.equals(this.baseAsset, embeddedWalletAssetResponse.baseAsset)
                && Objects.equals(this.ethNetwork, embeddedWalletAssetResponse.ethNetwork)
                && Objects.equals(
                        this.ethContractAddress, embeddedWalletAssetResponse.ethContractAddress)
                && Objects.equals(this.issuerAddress, embeddedWalletAssetResponse.issuerAddress)
                && Objects.equals(
                        this.blockchainSymbol, embeddedWalletAssetResponse.blockchainSymbol)
                && Objects.equals(this.deprecated, embeddedWalletAssetResponse.deprecated)
                && Objects.equals(this.coinType, embeddedWalletAssetResponse.coinType)
                && Objects.equals(this.blockchain, embeddedWalletAssetResponse.blockchain)
                && Objects.equals(
                        this.blockchainDisplayName,
                        embeddedWalletAssetResponse.blockchainDisplayName)
                && Objects.equals(this.algorithm, embeddedWalletAssetResponse.algorithm);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                symbol,
                name,
                decimals,
                networkProtocol,
                testnet,
                hasFee,
                baseAsset,
                ethNetwork,
                ethContractAddress,
                issuerAddress,
                blockchainSymbol,
                deprecated,
                coinType,
                blockchain,
                blockchainDisplayName,
                algorithm);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmbeddedWalletAssetResponse {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
        sb.append("    networkProtocol: ").append(toIndentedString(networkProtocol)).append("\n");
        sb.append("    testnet: ").append(toIndentedString(testnet)).append("\n");
        sb.append("    hasFee: ").append(toIndentedString(hasFee)).append("\n");
        sb.append("    baseAsset: ").append(toIndentedString(baseAsset)).append("\n");
        sb.append("    ethNetwork: ").append(toIndentedString(ethNetwork)).append("\n");
        sb.append("    ethContractAddress: ")
                .append(toIndentedString(ethContractAddress))
                .append("\n");
        sb.append("    issuerAddress: ").append(toIndentedString(issuerAddress)).append("\n");
        sb.append("    blockchainSymbol: ").append(toIndentedString(blockchainSymbol)).append("\n");
        sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
        sb.append("    coinType: ").append(toIndentedString(coinType)).append("\n");
        sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
        sb.append("    blockchainDisplayName: ")
                .append(toIndentedString(blockchainDisplayName))
                .append("\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `symbol` to the URL query string
        if (getSymbol() != null) {
            joiner.add(
                    String.format(
                            "%ssymbol%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getSymbol()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `decimals` to the URL query string
        if (getDecimals() != null) {
            joiner.add(
                    String.format(
                            "%sdecimals%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getDecimals()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `networkProtocol` to the URL query string
        if (getNetworkProtocol() != null) {
            joiner.add(
                    String.format(
                            "%snetworkProtocol%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getNetworkProtocol()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `testnet` to the URL query string
        if (getTestnet() != null) {
            joiner.add(
                    String.format(
                            "%stestnet%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getTestnet()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `hasFee` to the URL query string
        if (getHasFee() != null) {
            joiner.add(
                    String.format(
                            "%shasFee%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getHasFee()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `baseAsset` to the URL query string
        if (getBaseAsset() != null) {
            joiner.add(
                    String.format(
                            "%sbaseAsset%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBaseAsset()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `ethNetwork` to the URL query string
        if (getEthNetwork() != null) {
            joiner.add(
                    String.format(
                            "%sethNetwork%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getEthNetwork()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `ethContractAddress` to the URL query string
        if (getEthContractAddress() != null) {
            joiner.add(
                    String.format(
                            "%sethContractAddress%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getEthContractAddress()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `issuerAddress` to the URL query string
        if (getIssuerAddress() != null) {
            joiner.add(
                    String.format(
                            "%sissuerAddress%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getIssuerAddress()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `blockchainSymbol` to the URL query string
        if (getBlockchainSymbol() != null) {
            joiner.add(
                    String.format(
                            "%sblockchainSymbol%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBlockchainSymbol()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `deprecated` to the URL query string
        if (getDeprecated() != null) {
            joiner.add(
                    String.format(
                            "%sdeprecated%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDeprecated()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `coinType` to the URL query string
        if (getCoinType() != null) {
            joiner.add(
                    String.format(
                            "%scoinType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getCoinType()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `blockchain` to the URL query string
        if (getBlockchain() != null) {
            joiner.add(
                    String.format(
                            "%sblockchain%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBlockchain()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `blockchainDisplayName` to the URL query string
        if (getBlockchainDisplayName() != null) {
            joiner.add(
                    String.format(
                            "%sblockchainDisplayName%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getBlockchainDisplayName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `algorithm` to the URL query string
        if (getAlgorithm() != null) {
            joiner.add(
                    String.format(
                            "%salgorithm%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getAlgorithm()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
