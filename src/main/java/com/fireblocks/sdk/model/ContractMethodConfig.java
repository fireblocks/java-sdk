/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** Contract method configuration */
@JsonPropertyOrder({
    ContractMethodConfig.JSON_PROPERTY_METHOD_CALLS,
    ContractMethodConfig.JSON_PROPERTY_OPERATOR,
    ContractMethodConfig.JSON_PROPERTY_PAYLOAD_SUFFIX
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ContractMethodConfig {
    public static final String JSON_PROPERTY_METHOD_CALLS = "methodCalls";
    @jakarta.annotation.Nonnull private List<String> methodCalls;

    /** Operator for method calls */
    public enum OperatorEnum {
        EITHER(String.valueOf("EITHER")),

        EXACT(String.valueOf("EXACT"));

        private String value;

        OperatorEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OperatorEnum fromValue(String value) {
            for (OperatorEnum b : OperatorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_OPERATOR = "operator";
    @jakarta.annotation.Nonnull private OperatorEnum operator;

    public static final String JSON_PROPERTY_PAYLOAD_SUFFIX = "payloadSuffix";
    @jakarta.annotation.Nullable private String payloadSuffix;

    public ContractMethodConfig() {}

    @JsonCreator
    public ContractMethodConfig(
            @JsonProperty(value = JSON_PROPERTY_METHOD_CALLS, required = true)
                    List<String> methodCalls,
            @JsonProperty(value = JSON_PROPERTY_OPERATOR, required = true) OperatorEnum operator) {
        this.methodCalls = methodCalls;
        this.operator = operator;
    }

    public ContractMethodConfig methodCalls(@jakarta.annotation.Nonnull List<String> methodCalls) {
        this.methodCalls = methodCalls;
        return this;
    }

    public ContractMethodConfig addMethodCallsItem(String methodCallsItem) {
        if (this.methodCalls == null) {
            this.methodCalls = new ArrayList<>();
        }
        this.methodCalls.add(methodCallsItem);
        return this;
    }

    /**
     * Get methodCalls
     *
     * @return methodCalls
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_METHOD_CALLS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getMethodCalls() {
        return methodCalls;
    }

    @JsonProperty(JSON_PROPERTY_METHOD_CALLS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMethodCalls(@jakarta.annotation.Nonnull List<String> methodCalls) {
        this.methodCalls = methodCalls;
    }

    public ContractMethodConfig operator(@jakarta.annotation.Nonnull OperatorEnum operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Operator for method calls
     *
     * @return operator
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OperatorEnum getOperator() {
        return operator;
    }

    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOperator(@jakarta.annotation.Nonnull OperatorEnum operator) {
        this.operator = operator;
    }

    public ContractMethodConfig payloadSuffix(@jakarta.annotation.Nullable String payloadSuffix) {
        this.payloadSuffix = payloadSuffix;
        return this;
    }

    /**
     * Payload suffix for method calls
     *
     * @return payloadSuffix
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAYLOAD_SUFFIX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPayloadSuffix() {
        return payloadSuffix;
    }

    @JsonProperty(JSON_PROPERTY_PAYLOAD_SUFFIX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayloadSuffix(@jakarta.annotation.Nullable String payloadSuffix) {
        this.payloadSuffix = payloadSuffix;
    }

    /** Return true if this ContractMethodConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractMethodConfig contractMethodConfig = (ContractMethodConfig) o;
        return Objects.equals(this.methodCalls, contractMethodConfig.methodCalls)
                && Objects.equals(this.operator, contractMethodConfig.operator)
                && Objects.equals(this.payloadSuffix, contractMethodConfig.payloadSuffix);
    }

    @Override
    public int hashCode() {
        return Objects.hash(methodCalls, operator, payloadSuffix);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContractMethodConfig {\n");
        sb.append("    methodCalls: ").append(toIndentedString(methodCalls)).append("\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("    payloadSuffix: ").append(toIndentedString(payloadSuffix)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `methodCalls` to the URL query string
        if (getMethodCalls() != null) {
            for (int i = 0; i < getMethodCalls().size(); i++) {
                joiner.add(
                        String.format(
                                "%smethodCalls%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getMethodCalls().get(i)))));
            }
        }

        // add `operator` to the URL query string
        if (getOperator() != null) {
            joiner.add(
                    String.format(
                            "%soperator%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOperator()))));
        }

        // add `payloadSuffix` to the URL query string
        if (getPayloadSuffix() != null) {
            joiner.add(
                    String.format(
                            "%spayloadSuffix%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPayloadSuffix()))));
        }

        return joiner.toString();
    }
}
