/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** Ownership proof related to the originator of the transaction. */
@JsonPropertyOrder({
    TravelRuleOwnershipProof.JSON_PROPERTY_TYPE,
    TravelRuleOwnershipProof.JSON_PROPERTY_PROOF,
    TravelRuleOwnershipProof.JSON_PROPERTY_ATTESTATION,
    TravelRuleOwnershipProof.JSON_PROPERTY_ADDRESS,
    TravelRuleOwnershipProof.JSON_PROPERTY_WALLET_PROVIDER,
    TravelRuleOwnershipProof.JSON_PROPERTY_URL,
    TravelRuleOwnershipProof.JSON_PROPERTY_CONFIRMED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TravelRuleOwnershipProof {
    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public static final String JSON_PROPERTY_PROOF = "proof";
    private String proof;

    public static final String JSON_PROPERTY_ATTESTATION = "attestation";
    private String attestation;

    public static final String JSON_PROPERTY_ADDRESS = "address";
    private String address;

    public static final String JSON_PROPERTY_WALLET_PROVIDER = "wallet_provider";
    private String walletProvider;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_CONFIRMED = "confirmed";
    private Boolean confirmed;

    public TravelRuleOwnershipProof() {}

    public TravelRuleOwnershipProof type(String type) {
        this.type = type;
        return this;
    }

    /**
     * The type of ownership proof. Example values: - &#x60;eip-191&#x60;: Ethereum signature proof
     * - &#x60;eip-712&#x60;: Ethereum typed data signature proof - &#x60;bip-137&#x60;: Bitcoin
     * signature proof - &#x60;microtransfer&#x60;: Microtransaction (Satoshi test) -
     * &#x60;screenshot&#x60;: Uploaded screenshot of the wallet - &#x60;self-declaration&#x60;:
     * Checkbox attestation of ownership
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    public TravelRuleOwnershipProof proof(String proof) {
        this.proof = proof;
        return this;
    }

    /**
     * The cryptographic signature, transaction hash, or other proof depending on the type.
     * Examples: - For &#x60;eip-191&#x60;: &#x60;0x3dd4a17a...ce4a2bcd1b&#x60; - For
     * &#x60;microtransfer&#x60;: The transaction hash &#x60;H3V8GXBy39Dz...tr3TSTkY&#x3D;&#x60;
     *
     * @return proof
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROOF)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProof() {
        return proof;
    }

    @JsonProperty(JSON_PROPERTY_PROOF)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProof(String proof) {
        this.proof = proof;
    }

    public TravelRuleOwnershipProof attestation(String attestation) {
        this.attestation = attestation;
        return this;
    }

    /**
     * A human-readable statement of wallet ownership. Required for signature proofs and
     * self-declarations. Examples: - &#x60;I certify that ETH account 0x896B...0b9b belongs to
     * me.&#x60; - &#x60;I hereby declare that the blockchain address
     * 0xa437bEed902AF9338B7DEB23848e195d85019510 is under my control.&#x60;
     *
     * @return attestation
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ATTESTATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAttestation() {
        return attestation;
    }

    @JsonProperty(JSON_PROPERTY_ATTESTATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAttestation(String attestation) {
        this.attestation = attestation;
    }

    public TravelRuleOwnershipProof address(String address) {
        this.address = address;
        return this;
    }

    /**
     * The wallet address being verified. Examples: - For Ethereum: &#x60;0x896B...0b9b&#x60; - For
     * Bitcoin: &#x60;1442...dxhsQ&#x60;
     *
     * @return address
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAddress() {
        return address;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAddress(String address) {
        this.address = address;
    }

    public TravelRuleOwnershipProof walletProvider(String walletProvider) {
        this.walletProvider = walletProvider;
        return this;
    }

    /**
     * The wallet provider or method used for verification. Examples: - For Metamask:
     * &#x60;Metamask&#x60; - For manual signature: &#x60;manual&#x60;
     *
     * @return walletProvider
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WALLET_PROVIDER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getWalletProvider() {
        return walletProvider;
    }

    @JsonProperty(JSON_PROPERTY_WALLET_PROVIDER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWalletProvider(String walletProvider) {
        this.walletProvider = walletProvider;
    }

    public TravelRuleOwnershipProof url(String url) {
        this.url = url;
        return this;
    }

    /**
     * The URL for the uploaded screenshot (for &#x60;screenshot&#x60; proof types only). Example:
     * &#x60;https://example.com/uploaded_image.png&#x60;
     *
     * @return url
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(String url) {
        this.url = url;
    }

    public TravelRuleOwnershipProof confirmed(Boolean confirmed) {
        this.confirmed = confirmed;
        return this;
    }

    /**
     * Whether the user confirmed ownership of the wallet (for &#x60;self-declaration&#x60; proofs).
     * Example: &#x60;true&#x60;
     *
     * @return confirmed
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CONFIRMED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getConfirmed() {
        return confirmed;
    }

    @JsonProperty(JSON_PROPERTY_CONFIRMED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConfirmed(Boolean confirmed) {
        this.confirmed = confirmed;
    }

    /** Return true if this TravelRuleOwnershipProof object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TravelRuleOwnershipProof travelRuleOwnershipProof = (TravelRuleOwnershipProof) o;
        return Objects.equals(this.type, travelRuleOwnershipProof.type)
                && Objects.equals(this.proof, travelRuleOwnershipProof.proof)
                && Objects.equals(this.attestation, travelRuleOwnershipProof.attestation)
                && Objects.equals(this.address, travelRuleOwnershipProof.address)
                && Objects.equals(this.walletProvider, travelRuleOwnershipProof.walletProvider)
                && Objects.equals(this.url, travelRuleOwnershipProof.url)
                && Objects.equals(this.confirmed, travelRuleOwnershipProof.confirmed);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, proof, attestation, address, walletProvider, url, confirmed);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TravelRuleOwnershipProof {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    proof: ").append(toIndentedString(proof)).append("\n");
        sb.append("    attestation: ").append(toIndentedString(attestation)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    walletProvider: ").append(toIndentedString(walletProvider)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `proof` to the URL query string
        if (getProof() != null) {
            joiner.add(
                    String.format(
                            "%sproof%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getProof()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `attestation` to the URL query string
        if (getAttestation() != null) {
            joiner.add(
                    String.format(
                            "%sattestation%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getAttestation()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(
                    String.format(
                            "%saddress%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getAddress()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `wallet_provider` to the URL query string
        if (getWalletProvider() != null) {
            joiner.add(
                    String.format(
                            "%swallet_provider%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getWalletProvider()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `url` to the URL query string
        if (getUrl() != null) {
            joiner.add(
                    String.format(
                            "%surl%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getUrl()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `confirmed` to the URL query string
        if (getConfirmed() != null) {
            joiner.add(
                    String.format(
                            "%sconfirmed%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getConfirmed()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
