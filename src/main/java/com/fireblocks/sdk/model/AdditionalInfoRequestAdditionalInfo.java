/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fireblocks.sdk.JSON;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
@JsonDeserialize(
        using =
                AdditionalInfoRequestAdditionalInfo.AdditionalInfoRequestAdditionalInfoDeserializer
                        .class)
@JsonSerialize(
        using =
                AdditionalInfoRequestAdditionalInfo.AdditionalInfoRequestAdditionalInfoSerializer
                        .class)
public class AdditionalInfoRequestAdditionalInfo extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(AdditionalInfoRequestAdditionalInfo.class.getName());

    public static class AdditionalInfoRequestAdditionalInfoSerializer
            extends StdSerializer<AdditionalInfoRequestAdditionalInfo> {
        public AdditionalInfoRequestAdditionalInfoSerializer(
                Class<AdditionalInfoRequestAdditionalInfo> t) {
            super(t);
        }

        public AdditionalInfoRequestAdditionalInfoSerializer() {
            this(null);
        }

        @Override
        public void serialize(
                AdditionalInfoRequestAdditionalInfo value,
                JsonGenerator jgen,
                SerializerProvider provider)
                throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AdditionalInfoRequestAdditionalInfoDeserializer
            extends StdDeserializer<AdditionalInfoRequestAdditionalInfo> {
        public AdditionalInfoRequestAdditionalInfoDeserializer() {
            this(AdditionalInfoRequestAdditionalInfo.class);
        }

        public AdditionalInfoRequestAdditionalInfoDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AdditionalInfoRequestAdditionalInfo deserialize(
                JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize AbaPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (AbaPaymentInfo.class.equals(Integer.class)
                        || AbaPaymentInfo.class.equals(Long.class)
                        || AbaPaymentInfo.class.equals(Float.class)
                        || AbaPaymentInfo.class.equals(Double.class)
                        || AbaPaymentInfo.class.equals(Boolean.class)
                        || AbaPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((AbaPaymentInfo.class.equals(Integer.class)
                                                || AbaPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((AbaPaymentInfo.class.equals(Float.class)
                                                || AbaPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (AbaPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (AbaPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AbaPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AbaPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AbaPaymentInfo'", e);
            }

            // deserialize AchPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (AchPaymentInfo.class.equals(Integer.class)
                        || AchPaymentInfo.class.equals(Long.class)
                        || AchPaymentInfo.class.equals(Float.class)
                        || AchPaymentInfo.class.equals(Double.class)
                        || AchPaymentInfo.class.equals(Boolean.class)
                        || AchPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((AchPaymentInfo.class.equals(Integer.class)
                                                || AchPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((AchPaymentInfo.class.equals(Float.class)
                                                || AchPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (AchPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (AchPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AchPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AchPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AchPaymentInfo'", e);
            }

            // deserialize IbanPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (IbanPaymentInfo.class.equals(Integer.class)
                        || IbanPaymentInfo.class.equals(Long.class)
                        || IbanPaymentInfo.class.equals(Float.class)
                        || IbanPaymentInfo.class.equals(Double.class)
                        || IbanPaymentInfo.class.equals(Boolean.class)
                        || IbanPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((IbanPaymentInfo.class.equals(Integer.class)
                                                || IbanPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((IbanPaymentInfo.class.equals(Float.class)
                                                || IbanPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (IbanPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (IbanPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(IbanPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'IbanPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'IbanPaymentInfo'", e);
            }

            // deserialize LbtPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (LbtPaymentInfo.class.equals(Integer.class)
                        || LbtPaymentInfo.class.equals(Long.class)
                        || LbtPaymentInfo.class.equals(Float.class)
                        || LbtPaymentInfo.class.equals(Double.class)
                        || LbtPaymentInfo.class.equals(Boolean.class)
                        || LbtPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((LbtPaymentInfo.class.equals(Integer.class)
                                                || LbtPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((LbtPaymentInfo.class.equals(Float.class)
                                                || LbtPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (LbtPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (LbtPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(LbtPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'LbtPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'LbtPaymentInfo'", e);
            }

            // deserialize MomoPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (MomoPaymentInfo.class.equals(Integer.class)
                        || MomoPaymentInfo.class.equals(Long.class)
                        || MomoPaymentInfo.class.equals(Float.class)
                        || MomoPaymentInfo.class.equals(Double.class)
                        || MomoPaymentInfo.class.equals(Boolean.class)
                        || MomoPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((MomoPaymentInfo.class.equals(Integer.class)
                                                || MomoPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((MomoPaymentInfo.class.equals(Float.class)
                                                || MomoPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (MomoPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (MomoPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(MomoPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'MomoPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'MomoPaymentInfo'", e);
            }

            // deserialize PixPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PixPaymentInfo.class.equals(Integer.class)
                        || PixPaymentInfo.class.equals(Long.class)
                        || PixPaymentInfo.class.equals(Float.class)
                        || PixPaymentInfo.class.equals(Double.class)
                        || PixPaymentInfo.class.equals(Boolean.class)
                        || PixPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((PixPaymentInfo.class.equals(Integer.class)
                                                || PixPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((PixPaymentInfo.class.equals(Float.class)
                                                || PixPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (PixPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (PixPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PixPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PixPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PixPaymentInfo'", e);
            }

            // deserialize SepaPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (SepaPaymentInfo.class.equals(Integer.class)
                        || SepaPaymentInfo.class.equals(Long.class)
                        || SepaPaymentInfo.class.equals(Float.class)
                        || SepaPaymentInfo.class.equals(Double.class)
                        || SepaPaymentInfo.class.equals(Boolean.class)
                        || SepaPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((SepaPaymentInfo.class.equals(Integer.class)
                                                || SepaPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((SepaPaymentInfo.class.equals(Float.class)
                                                || SepaPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (SepaPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (SepaPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SepaPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SepaPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SepaPaymentInfo'", e);
            }

            // deserialize SpeiAdvancedPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (SpeiAdvancedPaymentInfo.class.equals(Integer.class)
                        || SpeiAdvancedPaymentInfo.class.equals(Long.class)
                        || SpeiAdvancedPaymentInfo.class.equals(Float.class)
                        || SpeiAdvancedPaymentInfo.class.equals(Double.class)
                        || SpeiAdvancedPaymentInfo.class.equals(Boolean.class)
                        || SpeiAdvancedPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((SpeiAdvancedPaymentInfo.class.equals(Integer.class)
                                                || SpeiAdvancedPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((SpeiAdvancedPaymentInfo.class.equals(Float.class)
                                                || SpeiAdvancedPaymentInfo.class.equals(
                                                        Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (SpeiAdvancedPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (SpeiAdvancedPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized =
                            tree.traverse(jp.getCodec()).readValueAs(SpeiAdvancedPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SpeiAdvancedPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(
                        Level.FINER,
                        "Input data does not match schema 'SpeiAdvancedPaymentInfo'",
                        e);
            }

            // deserialize SpeiBasicPaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (SpeiBasicPaymentInfo.class.equals(Integer.class)
                        || SpeiBasicPaymentInfo.class.equals(Long.class)
                        || SpeiBasicPaymentInfo.class.equals(Float.class)
                        || SpeiBasicPaymentInfo.class.equals(Double.class)
                        || SpeiBasicPaymentInfo.class.equals(Boolean.class)
                        || SpeiBasicPaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((SpeiBasicPaymentInfo.class.equals(Integer.class)
                                                || SpeiBasicPaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((SpeiBasicPaymentInfo.class.equals(Float.class)
                                                || SpeiBasicPaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (SpeiBasicPaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (SpeiBasicPaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized =
                            tree.traverse(jp.getCodec()).readValueAs(SpeiBasicPaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SpeiBasicPaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SpeiBasicPaymentInfo'", e);
            }

            // deserialize UsWirePaymentInfo
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (UsWirePaymentInfo.class.equals(Integer.class)
                        || UsWirePaymentInfo.class.equals(Long.class)
                        || UsWirePaymentInfo.class.equals(Float.class)
                        || UsWirePaymentInfo.class.equals(Double.class)
                        || UsWirePaymentInfo.class.equals(Boolean.class)
                        || UsWirePaymentInfo.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((UsWirePaymentInfo.class.equals(Integer.class)
                                                || UsWirePaymentInfo.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((UsWirePaymentInfo.class.equals(Float.class)
                                                || UsWirePaymentInfo.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (UsWirePaymentInfo.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (UsWirePaymentInfo.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized =
                            tree.traverse(jp.getCodec()).readValueAs(UsWirePaymentInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'UsWirePaymentInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'UsWirePaymentInfo'", e);
            }

            if (match == 1) {
                AdditionalInfoRequestAdditionalInfo ret = new AdditionalInfoRequestAdditionalInfo();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(
                    String.format(
                            "Failed deserialization for AdditionalInfoRequestAdditionalInfo: %d"
                                    + " classes match result, expected 1",
                            match));
        }

        /** Handle deserialization of the 'null' value. */
        @Override
        public AdditionalInfoRequestAdditionalInfo getNullValue(DeserializationContext ctxt)
                throws JsonMappingException {
            throw new JsonMappingException(
                    ctxt.getParser(), "AdditionalInfoRequestAdditionalInfo cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public AdditionalInfoRequestAdditionalInfo() {
        super("oneOf", Boolean.FALSE);
    }

    public AdditionalInfoRequestAdditionalInfo(AbaPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(AchPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(IbanPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(LbtPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(MomoPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(PixPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(SepaPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(SpeiAdvancedPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(SpeiBasicPaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AdditionalInfoRequestAdditionalInfo(UsWirePaymentInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AbaPaymentInfo", AbaPaymentInfo.class);
        schemas.put("AchPaymentInfo", AchPaymentInfo.class);
        schemas.put("IbanPaymentInfo", IbanPaymentInfo.class);
        schemas.put("LbtPaymentInfo", LbtPaymentInfo.class);
        schemas.put("MomoPaymentInfo", MomoPaymentInfo.class);
        schemas.put("PixPaymentInfo", PixPaymentInfo.class);
        schemas.put("SepaPaymentInfo", SepaPaymentInfo.class);
        schemas.put("SpeiAdvancedPaymentInfo", SpeiAdvancedPaymentInfo.class);
        schemas.put("SpeiBasicPaymentInfo", SpeiBasicPaymentInfo.class);
        schemas.put("UsWirePaymentInfo", UsWirePaymentInfo.class);
        JSON.registerDescendants(
                AdditionalInfoRequestAdditionalInfo.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AdditionalInfoRequestAdditionalInfo.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: AbaPaymentInfo, AchPaymentInfo, IbanPaymentInfo,
     * LbtPaymentInfo, MomoPaymentInfo, PixPaymentInfo, SepaPaymentInfo, SpeiAdvancedPaymentInfo,
     * SpeiBasicPaymentInfo, UsWirePaymentInfo
     *
     * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be
     * a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AbaPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AchPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(IbanPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(LbtPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(MomoPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PixPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SepaPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SpeiAdvancedPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SpeiBasicPaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(UsWirePaymentInfo.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be AbaPaymentInfo, AchPaymentInfo, IbanPaymentInfo,"
                        + " LbtPaymentInfo, MomoPaymentInfo, PixPaymentInfo, SepaPaymentInfo,"
                        + " SpeiAdvancedPaymentInfo, SpeiBasicPaymentInfo, UsWirePaymentInfo");
    }

    /**
     * Get the actual instance, which can be the following: AbaPaymentInfo, AchPaymentInfo,
     * IbanPaymentInfo, LbtPaymentInfo, MomoPaymentInfo, PixPaymentInfo, SepaPaymentInfo,
     * SpeiAdvancedPaymentInfo, SpeiBasicPaymentInfo, UsWirePaymentInfo
     *
     * @return The actual instance (AbaPaymentInfo, AchPaymentInfo, IbanPaymentInfo, LbtPaymentInfo,
     *     MomoPaymentInfo, PixPaymentInfo, SepaPaymentInfo, SpeiAdvancedPaymentInfo,
     *     SpeiBasicPaymentInfo, UsWirePaymentInfo)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AbaPaymentInfo`. If the actual instance is not `AbaPaymentInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AbaPaymentInfo`
     * @throws ClassCastException if the instance is not `AbaPaymentInfo`
     */
    public AbaPaymentInfo getAbaPaymentInfo() throws ClassCastException {
        return (AbaPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `AchPaymentInfo`. If the actual instance is not `AchPaymentInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AchPaymentInfo`
     * @throws ClassCastException if the instance is not `AchPaymentInfo`
     */
    public AchPaymentInfo getAchPaymentInfo() throws ClassCastException {
        return (AchPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `IbanPaymentInfo`. If the actual instance is not
     * `IbanPaymentInfo`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `IbanPaymentInfo`
     * @throws ClassCastException if the instance is not `IbanPaymentInfo`
     */
    public IbanPaymentInfo getIbanPaymentInfo() throws ClassCastException {
        return (IbanPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `LbtPaymentInfo`. If the actual instance is not `LbtPaymentInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LbtPaymentInfo`
     * @throws ClassCastException if the instance is not `LbtPaymentInfo`
     */
    public LbtPaymentInfo getLbtPaymentInfo() throws ClassCastException {
        return (LbtPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MomoPaymentInfo`. If the actual instance is not
     * `MomoPaymentInfo`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MomoPaymentInfo`
     * @throws ClassCastException if the instance is not `MomoPaymentInfo`
     */
    public MomoPaymentInfo getMomoPaymentInfo() throws ClassCastException {
        return (MomoPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `PixPaymentInfo`. If the actual instance is not `PixPaymentInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PixPaymentInfo`
     * @throws ClassCastException if the instance is not `PixPaymentInfo`
     */
    public PixPaymentInfo getPixPaymentInfo() throws ClassCastException {
        return (PixPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `SepaPaymentInfo`. If the actual instance is not
     * `SepaPaymentInfo`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `SepaPaymentInfo`
     * @throws ClassCastException if the instance is not `SepaPaymentInfo`
     */
    public SepaPaymentInfo getSepaPaymentInfo() throws ClassCastException {
        return (SepaPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `SpeiAdvancedPaymentInfo`. If the actual instance is not
     * `SpeiAdvancedPaymentInfo`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `SpeiAdvancedPaymentInfo`
     * @throws ClassCastException if the instance is not `SpeiAdvancedPaymentInfo`
     */
    public SpeiAdvancedPaymentInfo getSpeiAdvancedPaymentInfo() throws ClassCastException {
        return (SpeiAdvancedPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `SpeiBasicPaymentInfo`. If the actual instance is not
     * `SpeiBasicPaymentInfo`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `SpeiBasicPaymentInfo`
     * @throws ClassCastException if the instance is not `SpeiBasicPaymentInfo`
     */
    public SpeiBasicPaymentInfo getSpeiBasicPaymentInfo() throws ClassCastException {
        return (SpeiBasicPaymentInfo) super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsWirePaymentInfo`. If the actual instance is not
     * `UsWirePaymentInfo`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsWirePaymentInfo`
     * @throws ClassCastException if the instance is not `UsWirePaymentInfo`
     */
    public UsWirePaymentInfo getUsWirePaymentInfo() throws ClassCastException {
        return (UsWirePaymentInfo) super.getActualInstance();
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        if (getActualInstance() instanceof IbanPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((IbanPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_0" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof AbaPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((AbaPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_1" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof SpeiBasicPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((SpeiBasicPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_2" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof SpeiAdvancedPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((SpeiAdvancedPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_3" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof PixPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((PixPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_4" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof SepaPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((SepaPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_5" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof AchPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((AchPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_6" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof UsWirePaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((UsWirePaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_7" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof MomoPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((MomoPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_8" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof LbtPaymentInfo) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((LbtPaymentInfo) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_9" + suffix));
            }
            return joiner.toString();
        }
        return null;
    }
}
