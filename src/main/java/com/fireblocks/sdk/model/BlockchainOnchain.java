/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** BlockchainOnchain */
@JsonPropertyOrder({
    BlockchainOnchain.JSON_PROPERTY_PROTOCOL,
    BlockchainOnchain.JSON_PROPERTY_CHAIN_ID,
    BlockchainOnchain.JSON_PROPERTY_TEST,
    BlockchainOnchain.JSON_PROPERTY_SIGNING_ALGO
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class BlockchainOnchain {
    public static final String JSON_PROPERTY_PROTOCOL = "protocol";
    @jakarta.annotation.Nonnull private String protocol;

    public static final String JSON_PROPERTY_CHAIN_ID = "chainId";
    @jakarta.annotation.Nullable private String chainId;

    public static final String JSON_PROPERTY_TEST = "test";
    @jakarta.annotation.Nonnull private Boolean test;

    /** Signing alghorithm */
    public enum SigningAlgoEnum {
        ECDSA_SECP256_K1(String.valueOf("ECDSA_SECP256K1")),

        EDDSA_ED25519(String.valueOf("EDDSA_ED25519"));

        private String value;

        SigningAlgoEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SigningAlgoEnum fromValue(String value) {
            for (SigningAlgoEnum b : SigningAlgoEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_SIGNING_ALGO = "signingAlgo";
    @jakarta.annotation.Nonnull private SigningAlgoEnum signingAlgo;

    public BlockchainOnchain() {}

    @JsonCreator
    public BlockchainOnchain(
            @JsonProperty(value = JSON_PROPERTY_PROTOCOL, required = true) String protocol,
            @JsonProperty(value = JSON_PROPERTY_TEST, required = true) Boolean test,
            @JsonProperty(value = JSON_PROPERTY_SIGNING_ALGO, required = true)
                    SigningAlgoEnum signingAlgo) {
        this.protocol = protocol;
        this.test = test;
        this.signingAlgo = signingAlgo;
    }

    public BlockchainOnchain protocol(@jakarta.annotation.Nonnull String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * The protocol of the blockchain
     *
     * @return protocol
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getProtocol() {
        return protocol;
    }

    @JsonProperty(JSON_PROPERTY_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProtocol(@jakarta.annotation.Nonnull String protocol) {
        this.protocol = protocol;
    }

    public BlockchainOnchain chainId(@jakarta.annotation.Nullable String chainId) {
        this.chainId = chainId;
        return this;
    }

    /**
     * Network/chain ID
     *
     * @return chainId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CHAIN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getChainId() {
        return chainId;
    }

    @JsonProperty(JSON_PROPERTY_CHAIN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setChainId(@jakarta.annotation.Nullable String chainId) {
        this.chainId = chainId;
    }

    public BlockchainOnchain test(@jakarta.annotation.Nonnull Boolean test) {
        this.test = test;
        return this;
    }

    /**
     * Is test blockchain
     *
     * @return test
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TEST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getTest() {
        return test;
    }

    @JsonProperty(JSON_PROPERTY_TEST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTest(@jakarta.annotation.Nonnull Boolean test) {
        this.test = test;
    }

    public BlockchainOnchain signingAlgo(@jakarta.annotation.Nonnull SigningAlgoEnum signingAlgo) {
        this.signingAlgo = signingAlgo;
        return this;
    }

    /**
     * Signing alghorithm
     *
     * @return signingAlgo
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SIGNING_ALGO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SigningAlgoEnum getSigningAlgo() {
        return signingAlgo;
    }

    @JsonProperty(JSON_PROPERTY_SIGNING_ALGO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSigningAlgo(@jakarta.annotation.Nonnull SigningAlgoEnum signingAlgo) {
        this.signingAlgo = signingAlgo;
    }

    /** Return true if this BlockchainOnchain object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BlockchainOnchain blockchainOnchain = (BlockchainOnchain) o;
        return Objects.equals(this.protocol, blockchainOnchain.protocol)
                && Objects.equals(this.chainId, blockchainOnchain.chainId)
                && Objects.equals(this.test, blockchainOnchain.test)
                && Objects.equals(this.signingAlgo, blockchainOnchain.signingAlgo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(protocol, chainId, test, signingAlgo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BlockchainOnchain {\n");
        sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
        sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
        sb.append("    test: ").append(toIndentedString(test)).append("\n");
        sb.append("    signingAlgo: ").append(toIndentedString(signingAlgo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `protocol` to the URL query string
        if (getProtocol() != null) {
            joiner.add(
                    String.format(
                            "%sprotocol%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getProtocol()))));
        }

        // add `chainId` to the URL query string
        if (getChainId() != null) {
            joiner.add(
                    String.format(
                            "%schainId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getChainId()))));
        }

        // add `test` to the URL query string
        if (getTest() != null) {
            joiner.add(
                    String.format(
                            "%stest%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTest()))));
        }

        // add `signingAlgo` to the URL query string
        if (getSigningAlgo() != null) {
            joiner.add(
                    String.format(
                            "%ssigningAlgo%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSigningAlgo()))));
        }

        return joiner.toString();
    }
}
