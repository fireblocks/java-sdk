/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fireblocks.sdk.JSON;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
@JsonDeserialize(
        using = LegacySrcOrDestAttributesInner.LegacySrcOrDestAttributesInnerDeserializer.class)
@JsonSerialize(
        using = LegacySrcOrDestAttributesInner.LegacySrcOrDestAttributesInnerSerializer.class)
public class LegacySrcOrDestAttributesInner extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(LegacySrcOrDestAttributesInner.class.getName());

    public static class LegacySrcOrDestAttributesInnerSerializer
            extends StdSerializer<LegacySrcOrDestAttributesInner> {
        public LegacySrcOrDestAttributesInnerSerializer(Class<LegacySrcOrDestAttributesInner> t) {
            super(t);
        }

        public LegacySrcOrDestAttributesInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(
                LegacySrcOrDestAttributesInner value,
                JsonGenerator jgen,
                SerializerProvider provider)
                throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class LegacySrcOrDestAttributesInnerDeserializer
            extends StdDeserializer<LegacySrcOrDestAttributesInner> {
        public LegacySrcOrDestAttributesInnerDeserializer() {
            this(LegacySrcOrDestAttributesInner.class);
        }

        public LegacySrcOrDestAttributesInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public LegacySrcOrDestAttributesInner deserialize(
                JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize LegacyPolicySrcOrDestSubType
            try {
                deserialized =
                        tree.traverse(jp.getCodec())
                                .readValueAs(LegacyPolicySrcOrDestSubType.class);
                LegacySrcOrDestAttributesInner ret = new LegacySrcOrDestAttributesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(
                        Level.FINER,
                        "Input data does not match 'LegacySrcOrDestAttributesInner'",
                        e);
            }

            // deserialize LegacyPolicySrcOrDestType
            try {
                deserialized =
                        tree.traverse(jp.getCodec()).readValueAs(LegacyPolicySrcOrDestType.class);
                LegacySrcOrDestAttributesInner ret = new LegacySrcOrDestAttributesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(
                        Level.FINER,
                        "Input data does not match 'LegacySrcOrDestAttributesInner'",
                        e);
            }

            // deserialize String
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(String.class);
                LegacySrcOrDestAttributesInner ret = new LegacySrcOrDestAttributesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(
                        Level.FINER,
                        "Input data does not match 'LegacySrcOrDestAttributesInner'",
                        e);
            }

            throw new IOException(
                    String.format(
                            "Failed deserialization for LegacySrcOrDestAttributesInner: no match"
                                    + " found"));
        }

        /** Handle deserialization of the 'null' value. */
        @Override
        public LegacySrcOrDestAttributesInner getNullValue(DeserializationContext ctxt)
                throws JsonMappingException {
            throw new JsonMappingException(
                    ctxt.getParser(), "LegacySrcOrDestAttributesInner cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public LegacySrcOrDestAttributesInner() {
        super("anyOf", Boolean.FALSE);
    }

    public LegacySrcOrDestAttributesInner(LegacyPolicySrcOrDestSubType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LegacySrcOrDestAttributesInner(LegacyPolicySrcOrDestType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LegacySrcOrDestAttributesInner(String o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("LegacyPolicySrcOrDestSubType", LegacyPolicySrcOrDestSubType.class);
        schemas.put("LegacyPolicySrcOrDestType", LegacyPolicySrcOrDestType.class);
        schemas.put("String", String.class);
        JSON.registerDescendants(
                LegacySrcOrDestAttributesInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return LegacySrcOrDestAttributesInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check the instance parameter is valid
     * against the anyOf child schemas: LegacyPolicySrcOrDestSubType, LegacyPolicySrcOrDestType,
     * String
     *
     * <p>It could be an instance of the 'anyOf' schemas. The anyOf child schemas may themselves be
     * a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(
                LegacyPolicySrcOrDestSubType.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(LegacyPolicySrcOrDestType.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(String.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be LegacyPolicySrcOrDestSubType,"
                        + " LegacyPolicySrcOrDestType, String");
    }

    /**
     * Get the actual instance, which can be the following: LegacyPolicySrcOrDestSubType,
     * LegacyPolicySrcOrDestType, String
     *
     * @return The actual instance (LegacyPolicySrcOrDestSubType, LegacyPolicySrcOrDestType, String)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `LegacyPolicySrcOrDestSubType`. If the actual instance is not
     * `LegacyPolicySrcOrDestSubType`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `LegacyPolicySrcOrDestSubType`
     * @throws ClassCastException if the instance is not `LegacyPolicySrcOrDestSubType`
     */
    public LegacyPolicySrcOrDestSubType getLegacyPolicySrcOrDestSubType()
            throws ClassCastException {
        return (LegacyPolicySrcOrDestSubType) super.getActualInstance();
    }

    /**
     * Get the actual instance of `LegacyPolicySrcOrDestType`. If the actual instance is not
     * `LegacyPolicySrcOrDestType`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `LegacyPolicySrcOrDestType`
     * @throws ClassCastException if the instance is not `LegacyPolicySrcOrDestType`
     */
    public LegacyPolicySrcOrDestType getLegacyPolicySrcOrDestType() throws ClassCastException {
        return (LegacyPolicySrcOrDestType) super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String) super.getActualInstance();
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        return null;
    }
}
