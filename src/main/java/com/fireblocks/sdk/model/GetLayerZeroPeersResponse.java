/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** GetLayerZeroPeersResponse */
@JsonPropertyOrder({
    GetLayerZeroPeersResponse.JSON_PROPERTY_ADAPTER_TOKEN_LINK_ID,
    GetLayerZeroPeersResponse.JSON_PROPERTY_ADAPTER_ADDRESS,
    GetLayerZeroPeersResponse.JSON_PROPERTY_PEERS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class GetLayerZeroPeersResponse {
    public static final String JSON_PROPERTY_ADAPTER_TOKEN_LINK_ID = "adapterTokenLinkId";
    @jakarta.annotation.Nonnull private UUID adapterTokenLinkId;

    public static final String JSON_PROPERTY_ADAPTER_ADDRESS = "adapterAddress";
    @jakarta.annotation.Nonnull private String adapterAddress;

    public static final String JSON_PROPERTY_PEERS = "peers";
    @jakarta.annotation.Nonnull private List<PeerAdapterInfo> peers = new ArrayList<>();

    public GetLayerZeroPeersResponse() {}

    @JsonCreator
    public GetLayerZeroPeersResponse(
            @JsonProperty(value = JSON_PROPERTY_ADAPTER_TOKEN_LINK_ID, required = true)
                    UUID adapterTokenLinkId,
            @JsonProperty(value = JSON_PROPERTY_ADAPTER_ADDRESS, required = true)
                    String adapterAddress,
            @JsonProperty(value = JSON_PROPERTY_PEERS, required = true)
                    List<PeerAdapterInfo> peers) {
        this.adapterTokenLinkId = adapterTokenLinkId;
        this.adapterAddress = adapterAddress;
        this.peers = peers;
    }

    public GetLayerZeroPeersResponse adapterTokenLinkId(
            @jakarta.annotation.Nonnull UUID adapterTokenLinkId) {
        this.adapterTokenLinkId = adapterTokenLinkId;
        return this;
    }

    /**
     * The token link id of the adapter
     *
     * @return adapterTokenLinkId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADAPTER_TOKEN_LINK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getAdapterTokenLinkId() {
        return adapterTokenLinkId;
    }

    @JsonProperty(JSON_PROPERTY_ADAPTER_TOKEN_LINK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAdapterTokenLinkId(@jakarta.annotation.Nonnull UUID adapterTokenLinkId) {
        this.adapterTokenLinkId = adapterTokenLinkId;
    }

    public GetLayerZeroPeersResponse adapterAddress(
            @jakarta.annotation.Nonnull String adapterAddress) {
        this.adapterAddress = adapterAddress;
        return this;
    }

    /**
     * The adapter address
     *
     * @return adapterAddress
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADAPTER_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAdapterAddress() {
        return adapterAddress;
    }

    @JsonProperty(JSON_PROPERTY_ADAPTER_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAdapterAddress(@jakarta.annotation.Nonnull String adapterAddress) {
        this.adapterAddress = adapterAddress;
    }

    public GetLayerZeroPeersResponse peers(
            @jakarta.annotation.Nonnull List<PeerAdapterInfo> peers) {
        this.peers = peers;
        return this;
    }

    public GetLayerZeroPeersResponse addPeersItem(PeerAdapterInfo peersItem) {
        if (this.peers == null) {
            this.peers = new ArrayList<>();
        }
        this.peers.add(peersItem);
        return this;
    }

    /**
     * The peers for the adapter
     *
     * @return peers
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PEERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<PeerAdapterInfo> getPeers() {
        return peers;
    }

    @JsonProperty(JSON_PROPERTY_PEERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPeers(@jakarta.annotation.Nonnull List<PeerAdapterInfo> peers) {
        this.peers = peers;
    }

    /** Return true if this GetLayerZeroPeersResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLayerZeroPeersResponse getLayerZeroPeersResponse = (GetLayerZeroPeersResponse) o;
        return Objects.equals(this.adapterTokenLinkId, getLayerZeroPeersResponse.adapterTokenLinkId)
                && Objects.equals(this.adapterAddress, getLayerZeroPeersResponse.adapterAddress)
                && Objects.equals(this.peers, getLayerZeroPeersResponse.peers);
    }

    @Override
    public int hashCode() {
        return Objects.hash(adapterTokenLinkId, adapterAddress, peers);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetLayerZeroPeersResponse {\n");
        sb.append("    adapterTokenLinkId: ")
                .append(toIndentedString(adapterTokenLinkId))
                .append("\n");
        sb.append("    adapterAddress: ").append(toIndentedString(adapterAddress)).append("\n");
        sb.append("    peers: ").append(toIndentedString(peers)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `adapterTokenLinkId` to the URL query string
        if (getAdapterTokenLinkId() != null) {
            joiner.add(
                    String.format(
                            "%sadapterTokenLinkId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAdapterTokenLinkId()))));
        }

        // add `adapterAddress` to the URL query string
        if (getAdapterAddress() != null) {
            joiner.add(
                    String.format(
                            "%sadapterAddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAdapterAddress()))));
        }

        // add `peers` to the URL query string
        if (getPeers() != null) {
            for (int i = 0; i < getPeers().size(); i++) {
                if (getPeers().get(i) != null) {
                    joiner.add(
                            getPeers()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%speers%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
