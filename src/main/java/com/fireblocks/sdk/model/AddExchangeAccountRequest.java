/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** AddExchangeAccountRequest */
@JsonPropertyOrder({
    AddExchangeAccountRequest.JSON_PROPERTY_EXCHANGE_TYPE,
    AddExchangeAccountRequest.JSON_PROPERTY_NAME,
    AddExchangeAccountRequest.JSON_PROPERTY_CREDS,
    AddExchangeAccountRequest.JSON_PROPERTY_KEY,
    AddExchangeAccountRequest.JSON_PROPERTY_MAIN_ACCOUNT_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AddExchangeAccountRequest {
    public static final String JSON_PROPERTY_EXCHANGE_TYPE = "exchangeType";
    private ExchangeType exchangeType;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_CREDS = "creds";
    private String creds;

    public static final String JSON_PROPERTY_KEY = "key";
    private String key;

    public static final String JSON_PROPERTY_MAIN_ACCOUNT_ID = "mainAccountId";
    private String mainAccountId;

    public AddExchangeAccountRequest() {}

    public AddExchangeAccountRequest exchangeType(ExchangeType exchangeType) {
        this.exchangeType = exchangeType;
        return this;
    }

    /**
     * Get exchangeType
     *
     * @return exchangeType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXCHANGE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ExchangeType getExchangeType() {
        return exchangeType;
    }

    @JsonProperty(JSON_PROPERTY_EXCHANGE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExchangeType(ExchangeType exchangeType) {
        this.exchangeType = exchangeType;
    }

    public AddExchangeAccountRequest name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Display name of the exchange account
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public AddExchangeAccountRequest creds(String creds) {
        this.creds = creds;
        return this;
    }

    /**
     * Encrypted credentials
     *
     * @return creds
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCreds() {
        return creds;
    }

    @JsonProperty(JSON_PROPERTY_CREDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCreds(String creds) {
        this.creds = creds;
    }

    public AddExchangeAccountRequest key(String key) {
        this.key = key;
        return this;
    }

    /**
     * Api key of the exchange
     *
     * @return key
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getKey() {
        return key;
    }

    @JsonProperty(JSON_PROPERTY_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setKey(String key) {
        this.key = key;
    }

    public AddExchangeAccountRequest mainAccountId(String mainAccountId) {
        this.mainAccountId = mainAccountId;
        return this;
    }

    /**
     * Optional - main account id of the exchange
     *
     * @return mainAccountId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MAIN_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMainAccountId() {
        return mainAccountId;
    }

    @JsonProperty(JSON_PROPERTY_MAIN_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMainAccountId(String mainAccountId) {
        this.mainAccountId = mainAccountId;
    }

    /** Return true if this AddExchangeAccountRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddExchangeAccountRequest addExchangeAccountRequest = (AddExchangeAccountRequest) o;
        return Objects.equals(this.exchangeType, addExchangeAccountRequest.exchangeType)
                && Objects.equals(this.name, addExchangeAccountRequest.name)
                && Objects.equals(this.creds, addExchangeAccountRequest.creds)
                && Objects.equals(this.key, addExchangeAccountRequest.key)
                && Objects.equals(this.mainAccountId, addExchangeAccountRequest.mainAccountId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exchangeType, name, creds, key, mainAccountId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AddExchangeAccountRequest {\n");
        sb.append("    exchangeType: ").append(toIndentedString(exchangeType)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    creds: ").append(toIndentedString(creds)).append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    mainAccountId: ").append(toIndentedString(mainAccountId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `exchangeType` to the URL query string
        if (getExchangeType() != null) {
            joiner.add(
                    String.format(
                            "%sexchangeType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getExchangeType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `creds` to the URL query string
        if (getCreds() != null) {
            joiner.add(
                    String.format(
                            "%screds%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getCreds()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `key` to the URL query string
        if (getKey() != null) {
            joiner.add(
                    String.format(
                            "%skey%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getKey()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `mainAccountId` to the URL query string
        if (getMainAccountId() != null) {
            joiner.add(
                    String.format(
                            "%smainAccountId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getMainAccountId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
