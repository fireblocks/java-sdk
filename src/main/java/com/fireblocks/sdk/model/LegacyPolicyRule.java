/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** Policy rule which is enforced on transactions */
@JsonPropertyOrder({
    LegacyPolicyRule.JSON_PROPERTY_OPERATOR,
    LegacyPolicyRule.JSON_PROPERTY_OPERATORS,
    LegacyPolicyRule.JSON_PROPERTY_TRANSACTION_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_DESIGNATED_SIGNER,
    LegacyPolicyRule.JSON_PROPERTY_DESIGNATED_SIGNERS,
    LegacyPolicyRule.JSON_PROPERTY_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_ACTION,
    LegacyPolicyRule.JSON_PROPERTY_ASSET,
    LegacyPolicyRule.JSON_PROPERTY_SRC_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_SRC_SUB_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_SRC_ID,
    LegacyPolicyRule.JSON_PROPERTY_SRC,
    LegacyPolicyRule.JSON_PROPERTY_DST_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_DST_SUB_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_DST_ID,
    LegacyPolicyRule.JSON_PROPERTY_DST,
    LegacyPolicyRule.JSON_PROPERTY_DST_ADDRESS_TYPE,
    LegacyPolicyRule.JSON_PROPERTY_AMOUNT_CURRENCY,
    LegacyPolicyRule.JSON_PROPERTY_AMOUNT_SCOPE,
    LegacyPolicyRule.JSON_PROPERTY_AMOUNT,
    LegacyPolicyRule.JSON_PROPERTY_PERIOD_SEC,
    LegacyPolicyRule.JSON_PROPERTY_AUTHORIZERS,
    LegacyPolicyRule.JSON_PROPERTY_AUTHORIZERS_COUNT,
    LegacyPolicyRule.JSON_PROPERTY_AUTHORIZATION_GROUPS,
    LegacyPolicyRule.JSON_PROPERTY_AMOUNT_AGGREGATION,
    LegacyPolicyRule.JSON_PROPERTY_RAW_MESSAGE_SIGNING,
    LegacyPolicyRule.JSON_PROPERTY_APPLY_FOR_APPROVE,
    LegacyPolicyRule.JSON_PROPERTY_APPLY_FOR_TYPED_MESSAGE,
    LegacyPolicyRule.JSON_PROPERTY_EXTERNAL_DESCRIPTOR
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class LegacyPolicyRule {
    public static final String JSON_PROPERTY_OPERATOR = "operator";
    @jakarta.annotation.Nullable private String operator;

    public static final String JSON_PROPERTY_OPERATORS = "operators";
    @jakarta.annotation.Nullable private LegacyPolicyRuleOperators operators;

    /**
     * Defines the type of transaction to which the rule applies. * TRANSFER - Default. Transfers
     * funds from one account to another * CONTRACT_CALL - Calls a smart contract, mainly for DeFi
     * operations. * APPROVE - Allows a smart contract to withdraw from a designated wallet. * MINT
     * - Perform a mint operation (increase supply) on a supported token * BURN - Perform a burn
     * operation (reduce supply) on a supported token * SUPPLY - Use for DeFi to lend assets *
     * REDEEM - Use for DeFi to get lending back * STAKE - Allows you to allocate and lock certain
     * assets for earning staking rewards. * RAW - An off-chain message with no predefined format,
     * use it to sign any message with your private key. * TYPED_MESSAGE - An off-chain message type
     * that follows a predefined format, used to sign specific messages that are not actual
     * transactions. * PROGRAM_CALL - In Solana refers to invoking on-chain programs (smart
     * contracts) to execute transactions and interact with the blockchain.
     */
    public enum TransactionTypeEnum {
        TRANSFER(String.valueOf("TRANSFER")),

        CONTRACT_CALL(String.valueOf("CONTRACT_CALL")),

        APPROVE(String.valueOf("APPROVE")),

        MINT(String.valueOf("MINT")),

        BURN(String.valueOf("BURN")),

        SUPPLY(String.valueOf("SUPPLY")),

        REDEEM(String.valueOf("REDEEM")),

        STAKE(String.valueOf("STAKE")),

        RAW(String.valueOf("RAW")),

        TYPED_MESSAGE(String.valueOf("TYPED_MESSAGE")),

        PROGRAM_CALL(String.valueOf("PROGRAM_CALL"));

        private String value;

        TransactionTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TransactionTypeEnum fromValue(String value) {
            for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
    @jakarta.annotation.Nullable private TransactionTypeEnum transactionType;

    public static final String JSON_PROPERTY_DESIGNATED_SIGNER = "designatedSigner";
    @jakarta.annotation.Nullable private String designatedSigner;

    public static final String JSON_PROPERTY_DESIGNATED_SIGNERS = "designatedSigners";
    @jakarta.annotation.Nullable private LegacyPolicyRuleDesignatedSigners designatedSigners;

    /** Policy rule type */
    public enum TypeEnum {
        TRANSFER(String.valueOf("TRANSFER"));

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private TypeEnum type;

    /**
     * Defines what occurs when a transaction meets the rule&#39;s criteria * ALLOW - The
     * transaction goes through and can be signed without requiring additional approvals * BLOCK -
     * The transaction is automatically blocked * 2-TIER - Only these users or user groups can
     * approve If any of them reject the transaction before the required approval threshold is met,
     * the transaction doesn&#39;t go through The list of entities are set is
     * \&quot;authorizationGroups\&quot; field
     */
    public enum ActionEnum {
        ALLOW(String.valueOf("ALLOW")),

        BLOCK(String.valueOf("BLOCK")),

        _2_TIER(String.valueOf("2-TIER"));

        private String value;

        ActionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ActionEnum fromValue(String value) {
            for (ActionEnum b : ActionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ACTION = "action";
    @jakarta.annotation.Nonnull private ActionEnum action;

    public static final String JSON_PROPERTY_ASSET = "asset";
    @jakarta.annotation.Nonnull private String asset;

    public static final String JSON_PROPERTY_SRC_TYPE = "srcType";
    @jakarta.annotation.Nullable private LegacyPolicySrcOrDestType srcType;

    public static final String JSON_PROPERTY_SRC_SUB_TYPE = "srcSubType";
    @jakarta.annotation.Nullable private LegacyPolicySrcOrDestSubType srcSubType;

    public static final String JSON_PROPERTY_SRC_ID = "srcId";
    @jakarta.annotation.Nullable private String srcId;

    public static final String JSON_PROPERTY_SRC = "src";
    @jakarta.annotation.Nullable private LegacyPolicyRuleSrc src;

    public static final String JSON_PROPERTY_DST_TYPE = "dstType";
    @jakarta.annotation.Nullable private LegacyPolicySrcOrDestType dstType;

    public static final String JSON_PROPERTY_DST_SUB_TYPE = "dstSubType";
    @jakarta.annotation.Nullable private LegacyPolicySrcOrDestSubType dstSubType;

    public static final String JSON_PROPERTY_DST_ID = "dstId";
    @jakarta.annotation.Nullable private String dstId;

    public static final String JSON_PROPERTY_DST = "dst";
    @jakarta.annotation.Nullable private LegacyPolicyRuleDst dst;

    /**
     * Defines whether the destination to which you are sending funds must be whitelisted, to allow
     * one-time transfers to non-whitelisted external addresses, or both. By default, you can only
     * transfer to an external address after itâ€™s whitelisted. * WHITELISTED - Can only be sent to
     * whitelisted addresses. * ONE_TIME - Can only be sent to non-whitelisted external addresses. *
     * \&quot;*\&quot; - can be sent to whitelisted addresses or non-whitelisted external
     */
    public enum DstAddressTypeEnum {
        WHITELISTED(String.valueOf("WHITELISTED")),

        ONE_TIME(String.valueOf("ONE_TIME")),

        STAR(String.valueOf("*"));

        private String value;

        DstAddressTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DstAddressTypeEnum fromValue(String value) {
            for (DstAddressTypeEnum b : DstAddressTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_DST_ADDRESS_TYPE = "dstAddressType";
    @jakarta.annotation.Nullable private DstAddressTypeEnum dstAddressType;

    /**
     * * USD - Limits the amount of any asset users can transfer based on the USD equivalent of the
     * asset. * EUR - Limits the amount of any asset users can transfer based on the EURO equivalent
     * of the asset. * NATIVE - Limits the amount of an asset a user can transfer when using a
     * specific asset.
     */
    public enum AmountCurrencyEnum {
        USD(String.valueOf("USD")),

        EUR(String.valueOf("EUR")),

        NATIVE(String.valueOf("NATIVE"));

        private String value;

        AmountCurrencyEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AmountCurrencyEnum fromValue(String value) {
            for (AmountCurrencyEnum b : AmountCurrencyEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_AMOUNT_CURRENCY = "amountCurrency";
    @jakarta.annotation.Nonnull private AmountCurrencyEnum amountCurrency;

    /**
     * * SINGLE_TX - limit applies to a single transaction * TIMEFRAME - limit applies to all
     * transactions within the defined time period
     */
    public enum AmountScopeEnum {
        SINGLE_TX(String.valueOf("SINGLE_TX")),

        TIMEFRAME(String.valueOf("TIMEFRAME"));

        private String value;

        AmountScopeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AmountScopeEnum fromValue(String value) {
            for (AmountScopeEnum b : AmountScopeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_AMOUNT_SCOPE = "amountScope";
    @jakarta.annotation.Nonnull private AmountScopeEnum amountScope;

    public static final String JSON_PROPERTY_AMOUNT = "amount";
    @jakarta.annotation.Nonnull private LegacyPolicyRuleAmount amount;

    public static final String JSON_PROPERTY_PERIOD_SEC = "periodSec";
    @jakarta.annotation.Nonnull private BigDecimal periodSec;

    public static final String JSON_PROPERTY_AUTHORIZERS = "authorizers";
    @jakarta.annotation.Nullable private List<String> authorizers = new ArrayList<>();

    public static final String JSON_PROPERTY_AUTHORIZERS_COUNT = "authorizersCount";
    @jakarta.annotation.Nullable private BigDecimal authorizersCount;

    public static final String JSON_PROPERTY_AUTHORIZATION_GROUPS = "authorizationGroups";
    @jakarta.annotation.Nullable private LegacyPolicyRuleAuthorizationGroups authorizationGroups;

    public static final String JSON_PROPERTY_AMOUNT_AGGREGATION = "amountAggregation";
    @jakarta.annotation.Nullable private LegacyPolicyRuleAmountAggregation amountAggregation;

    public static final String JSON_PROPERTY_RAW_MESSAGE_SIGNING = "rawMessageSigning";
    @jakarta.annotation.Nullable private LegacyPolicyRuleRawMessageSigning rawMessageSigning;

    public static final String JSON_PROPERTY_APPLY_FOR_APPROVE = "applyForApprove";
    @jakarta.annotation.Nullable private Boolean applyForApprove;

    public static final String JSON_PROPERTY_APPLY_FOR_TYPED_MESSAGE = "applyForTypedMessage";
    @jakarta.annotation.Nullable private Boolean applyForTypedMessage;

    public static final String JSON_PROPERTY_EXTERNAL_DESCRIPTOR = "externalDescriptor";
    @jakarta.annotation.Nullable private String externalDescriptor;

    public LegacyPolicyRule() {}

    @JsonCreator
    public LegacyPolicyRule(
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) TypeEnum type,
            @JsonProperty(value = JSON_PROPERTY_ACTION, required = true) ActionEnum action,
            @JsonProperty(value = JSON_PROPERTY_ASSET, required = true) String asset,
            @JsonProperty(value = JSON_PROPERTY_AMOUNT_CURRENCY, required = true)
                    AmountCurrencyEnum amountCurrency,
            @JsonProperty(value = JSON_PROPERTY_AMOUNT_SCOPE, required = true)
                    AmountScopeEnum amountScope,
            @JsonProperty(value = JSON_PROPERTY_AMOUNT, required = true)
                    LegacyPolicyRuleAmount amount,
            @JsonProperty(value = JSON_PROPERTY_PERIOD_SEC, required = true) BigDecimal periodSec) {
        this.type = type;
        this.action = action;
        this.asset = asset;
        this.amountCurrency = amountCurrency;
        this.amountScope = amountScope;
        this.amount = amount;
        this.periodSec = periodSec;
    }

    public LegacyPolicyRule operator(@jakarta.annotation.Nullable String operator) {
        this.operator = operator;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;operators\&quot;) | Defines users who can initiate the type
     * of transaction to which the rule applies. options are * \&quot;*\&quot; - All users are
     * allowed * Specific User id
     *
     * @return operator
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getOperator() {
        return operator;
    }

    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOperator(@jakarta.annotation.Nullable String operator) {
        this.operator = operator;
    }

    public LegacyPolicyRule operators(
            @jakarta.annotation.Nullable LegacyPolicyRuleOperators operators) {
        this.operators = operators;
        return this;
    }

    /**
     * Get operators
     *
     * @return operators
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OPERATORS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleOperators getOperators() {
        return operators;
    }

    @JsonProperty(JSON_PROPERTY_OPERATORS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOperators(@jakarta.annotation.Nullable LegacyPolicyRuleOperators operators) {
        this.operators = operators;
    }

    public LegacyPolicyRule transactionType(
            @jakarta.annotation.Nullable TransactionTypeEnum transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Defines the type of transaction to which the rule applies. * TRANSFER - Default. Transfers
     * funds from one account to another * CONTRACT_CALL - Calls a smart contract, mainly for DeFi
     * operations. * APPROVE - Allows a smart contract to withdraw from a designated wallet. * MINT
     * - Perform a mint operation (increase supply) on a supported token * BURN - Perform a burn
     * operation (reduce supply) on a supported token * SUPPLY - Use for DeFi to lend assets *
     * REDEEM - Use for DeFi to get lending back * STAKE - Allows you to allocate and lock certain
     * assets for earning staking rewards. * RAW - An off-chain message with no predefined format,
     * use it to sign any message with your private key. * TYPED_MESSAGE - An off-chain message type
     * that follows a predefined format, used to sign specific messages that are not actual
     * transactions. * PROGRAM_CALL - In Solana refers to invoking on-chain programs (smart
     * contracts) to execute transactions and interact with the blockchain.
     *
     * @return transactionType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TransactionTypeEnum getTransactionType() {
        return transactionType;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTransactionType(
            @jakarta.annotation.Nullable TransactionTypeEnum transactionType) {
        this.transactionType = transactionType;
    }

    public LegacyPolicyRule designatedSigner(@jakarta.annotation.Nullable String designatedSigner) {
        this.designatedSigner = designatedSigner;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;designatedSigners\&quot;) Id representing the user who signs
     * transactions that match a specific rule
     *
     * @return designatedSigner
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESIGNATED_SIGNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDesignatedSigner() {
        return designatedSigner;
    }

    @JsonProperty(JSON_PROPERTY_DESIGNATED_SIGNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDesignatedSigner(@jakarta.annotation.Nullable String designatedSigner) {
        this.designatedSigner = designatedSigner;
    }

    public LegacyPolicyRule designatedSigners(
            @jakarta.annotation.Nullable LegacyPolicyRuleDesignatedSigners designatedSigners) {
        this.designatedSigners = designatedSigners;
        return this;
    }

    /**
     * Get designatedSigners
     *
     * @return designatedSigners
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESIGNATED_SIGNERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleDesignatedSigners getDesignatedSigners() {
        return designatedSigners;
    }

    @JsonProperty(JSON_PROPERTY_DESIGNATED_SIGNERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDesignatedSigners(
            @jakarta.annotation.Nullable LegacyPolicyRuleDesignatedSigners designatedSigners) {
        this.designatedSigners = designatedSigners;
    }

    public LegacyPolicyRule type(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Policy rule type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
        this.type = type;
    }

    public LegacyPolicyRule action(@jakarta.annotation.Nonnull ActionEnum action) {
        this.action = action;
        return this;
    }

    /**
     * Defines what occurs when a transaction meets the rule&#39;s criteria * ALLOW - The
     * transaction goes through and can be signed without requiring additional approvals * BLOCK -
     * The transaction is automatically blocked * 2-TIER - Only these users or user groups can
     * approve If any of them reject the transaction before the required approval threshold is met,
     * the transaction doesn&#39;t go through The list of entities are set is
     * \&quot;authorizationGroups\&quot; field
     *
     * @return action
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ActionEnum getAction() {
        return action;
    }

    @JsonProperty(JSON_PROPERTY_ACTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAction(@jakarta.annotation.Nonnull ActionEnum action) {
        this.action = action;
    }

    public LegacyPolicyRule asset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Defines the type of asset being transacted, options are * \&quot;*\&quot; - All assets *
     * Specific asset
     *
     * @return asset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAsset() {
        return asset;
    }

    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAsset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
    }

    public LegacyPolicyRule srcType(
            @jakarta.annotation.Nullable LegacyPolicySrcOrDestType srcType) {
        this.srcType = srcType;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;src\&quot;) source account type
     *
     * @return srcType
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SRC_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicySrcOrDestType getSrcType() {
        return srcType;
    }

    @JsonProperty(JSON_PROPERTY_SRC_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSrcType(@jakarta.annotation.Nullable LegacyPolicySrcOrDestType srcType) {
        this.srcType = srcType;
    }

    public LegacyPolicyRule srcSubType(
            @jakarta.annotation.Nullable LegacyPolicySrcOrDestSubType srcSubType) {
        this.srcSubType = srcSubType;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;src\&quot;) source sub account type
     *
     * @return srcSubType
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SRC_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicySrcOrDestSubType getSrcSubType() {
        return srcSubType;
    }

    @JsonProperty(JSON_PROPERTY_SRC_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSrcSubType(
            @jakarta.annotation.Nullable LegacyPolicySrcOrDestSubType srcSubType) {
        this.srcSubType = srcSubType;
    }

    public LegacyPolicyRule srcId(@jakarta.annotation.Nullable String srcId) {
        this.srcId = srcId;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;src\&quot;) source account id
     *
     * @return srcId
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SRC_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSrcId() {
        return srcId;
    }

    @JsonProperty(JSON_PROPERTY_SRC_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSrcId(@jakarta.annotation.Nullable String srcId) {
        this.srcId = srcId;
    }

    public LegacyPolicyRule src(@jakarta.annotation.Nullable LegacyPolicyRuleSrc src) {
        this.src = src;
        return this;
    }

    /**
     * Get src
     *
     * @return src
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SRC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleSrc getSrc() {
        return src;
    }

    @JsonProperty(JSON_PROPERTY_SRC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSrc(@jakarta.annotation.Nullable LegacyPolicyRuleSrc src) {
        this.src = src;
    }

    public LegacyPolicyRule dstType(
            @jakarta.annotation.Nullable LegacyPolicySrcOrDestType dstType) {
        this.dstType = dstType;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;dst\&quot;) destination account type
     *
     * @return dstType
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DST_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicySrcOrDestType getDstType() {
        return dstType;
    }

    @JsonProperty(JSON_PROPERTY_DST_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDstType(@jakarta.annotation.Nullable LegacyPolicySrcOrDestType dstType) {
        this.dstType = dstType;
    }

    public LegacyPolicyRule dstSubType(
            @jakarta.annotation.Nullable LegacyPolicySrcOrDestSubType dstSubType) {
        this.dstSubType = dstSubType;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;dst\&quot;) destination sub account type
     *
     * @return dstSubType
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DST_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicySrcOrDestSubType getDstSubType() {
        return dstSubType;
    }

    @JsonProperty(JSON_PROPERTY_DST_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDstSubType(
            @jakarta.annotation.Nullable LegacyPolicySrcOrDestSubType dstSubType) {
        this.dstSubType = dstSubType;
    }

    public LegacyPolicyRule dstId(@jakarta.annotation.Nullable String dstId) {
        this.dstId = dstId;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;dst\&quot;) destination account id
     *
     * @return dstId
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DST_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDstId() {
        return dstId;
    }

    @JsonProperty(JSON_PROPERTY_DST_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDstId(@jakarta.annotation.Nullable String dstId) {
        this.dstId = dstId;
    }

    public LegacyPolicyRule dst(@jakarta.annotation.Nullable LegacyPolicyRuleDst dst) {
        this.dst = dst;
        return this;
    }

    /**
     * Get dst
     *
     * @return dst
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleDst getDst() {
        return dst;
    }

    @JsonProperty(JSON_PROPERTY_DST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDst(@jakarta.annotation.Nullable LegacyPolicyRuleDst dst) {
        this.dst = dst;
    }

    public LegacyPolicyRule dstAddressType(
            @jakarta.annotation.Nullable DstAddressTypeEnum dstAddressType) {
        this.dstAddressType = dstAddressType;
        return this;
    }

    /**
     * Defines whether the destination to which you are sending funds must be whitelisted, to allow
     * one-time transfers to non-whitelisted external addresses, or both. By default, you can only
     * transfer to an external address after itâ€™s whitelisted. * WHITELISTED - Can only be sent to
     * whitelisted addresses. * ONE_TIME - Can only be sent to non-whitelisted external addresses. *
     * \&quot;*\&quot; - can be sent to whitelisted addresses or non-whitelisted external
     *
     * @return dstAddressType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DST_ADDRESS_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DstAddressTypeEnum getDstAddressType() {
        return dstAddressType;
    }

    @JsonProperty(JSON_PROPERTY_DST_ADDRESS_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDstAddressType(@jakarta.annotation.Nullable DstAddressTypeEnum dstAddressType) {
        this.dstAddressType = dstAddressType;
    }

    public LegacyPolicyRule amountCurrency(
            @jakarta.annotation.Nonnull AmountCurrencyEnum amountCurrency) {
        this.amountCurrency = amountCurrency;
        return this;
    }

    /**
     * * USD - Limits the amount of any asset users can transfer based on the USD equivalent of the
     * asset. * EUR - Limits the amount of any asset users can transfer based on the EURO equivalent
     * of the asset. * NATIVE - Limits the amount of an asset a user can transfer when using a
     * specific asset.
     *
     * @return amountCurrency
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AmountCurrencyEnum getAmountCurrency() {
        return amountCurrency;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmountCurrency(@jakarta.annotation.Nonnull AmountCurrencyEnum amountCurrency) {
        this.amountCurrency = amountCurrency;
    }

    public LegacyPolicyRule amountScope(@jakarta.annotation.Nonnull AmountScopeEnum amountScope) {
        this.amountScope = amountScope;
        return this;
    }

    /**
     * * SINGLE_TX - limit applies to a single transaction * TIMEFRAME - limit applies to all
     * transactions within the defined time period
     *
     * @return amountScope
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT_SCOPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AmountScopeEnum getAmountScope() {
        return amountScope;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT_SCOPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmountScope(@jakarta.annotation.Nonnull AmountScopeEnum amountScope) {
        this.amountScope = amountScope;
    }

    public LegacyPolicyRule amount(@jakarta.annotation.Nonnull LegacyPolicyRuleAmount amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public LegacyPolicyRuleAmount getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(@jakarta.annotation.Nonnull LegacyPolicyRuleAmount amount) {
        this.amount = amount;
    }

    public LegacyPolicyRule periodSec(@jakarta.annotation.Nonnull BigDecimal periodSec) {
        this.periodSec = periodSec;
        return this;
    }

    /**
     * Time period in seconds applied by the amountScope field to accumulate transferred amounts in
     * transactions that match the rule, until the total exceeds the value you specify under
     * Minimum. When the specified amount is reached within that period, whether by one or many
     * transactions, further transactions in that period either fail or require more approvals.
     *
     * @return periodSec
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PERIOD_SEC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getPeriodSec() {
        return periodSec;
    }

    @JsonProperty(JSON_PROPERTY_PERIOD_SEC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPeriodSec(@jakarta.annotation.Nonnull BigDecimal periodSec) {
        this.periodSec = periodSec;
    }

    public LegacyPolicyRule authorizers(@jakarta.annotation.Nullable List<String> authorizers) {
        this.authorizers = authorizers;
        return this;
    }

    public LegacyPolicyRule addAuthorizersItem(String authorizersItem) {
        if (this.authorizers == null) {
            this.authorizers = new ArrayList<>();
        }
        this.authorizers.add(authorizersItem);
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;authorizationGroups\&quot;) Allowed entities which can
     * approves a transaction
     *
     * @return authorizers
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AUTHORIZERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getAuthorizers() {
        return authorizers;
    }

    @JsonProperty(JSON_PROPERTY_AUTHORIZERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthorizers(@jakarta.annotation.Nullable List<String> authorizers) {
        this.authorizers = authorizers;
    }

    public LegacyPolicyRule authorizersCount(
            @jakarta.annotation.Nullable BigDecimal authorizersCount) {
        this.authorizersCount = authorizersCount;
        return this;
    }

    /**
     * (deprecated - replaced by \&quot;authorizationGroups\&quot;) Min amount of entities which are
     * needed to approve a transaction
     *
     * @return authorizersCount
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AUTHORIZERS_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getAuthorizersCount() {
        return authorizersCount;
    }

    @JsonProperty(JSON_PROPERTY_AUTHORIZERS_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthorizersCount(@jakarta.annotation.Nullable BigDecimal authorizersCount) {
        this.authorizersCount = authorizersCount;
    }

    public LegacyPolicyRule authorizationGroups(
            @jakarta.annotation.Nullable LegacyPolicyRuleAuthorizationGroups authorizationGroups) {
        this.authorizationGroups = authorizationGroups;
        return this;
    }

    /**
     * Get authorizationGroups
     *
     * @return authorizationGroups
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AUTHORIZATION_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleAuthorizationGroups getAuthorizationGroups() {
        return authorizationGroups;
    }

    @JsonProperty(JSON_PROPERTY_AUTHORIZATION_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthorizationGroups(
            @jakarta.annotation.Nullable LegacyPolicyRuleAuthorizationGroups authorizationGroups) {
        this.authorizationGroups = authorizationGroups;
    }

    public LegacyPolicyRule amountAggregation(
            @jakarta.annotation.Nullable LegacyPolicyRuleAmountAggregation amountAggregation) {
        this.amountAggregation = amountAggregation;
        return this;
    }

    /**
     * Get amountAggregation
     *
     * @return amountAggregation
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AMOUNT_AGGREGATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleAmountAggregation getAmountAggregation() {
        return amountAggregation;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT_AGGREGATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAmountAggregation(
            @jakarta.annotation.Nullable LegacyPolicyRuleAmountAggregation amountAggregation) {
        this.amountAggregation = amountAggregation;
    }

    public LegacyPolicyRule rawMessageSigning(
            @jakarta.annotation.Nullable LegacyPolicyRuleRawMessageSigning rawMessageSigning) {
        this.rawMessageSigning = rawMessageSigning;
        return this;
    }

    /**
     * Get rawMessageSigning
     *
     * @return rawMessageSigning
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RAW_MESSAGE_SIGNING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LegacyPolicyRuleRawMessageSigning getRawMessageSigning() {
        return rawMessageSigning;
    }

    @JsonProperty(JSON_PROPERTY_RAW_MESSAGE_SIGNING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRawMessageSigning(
            @jakarta.annotation.Nullable LegacyPolicyRuleRawMessageSigning rawMessageSigning) {
        this.rawMessageSigning = rawMessageSigning;
    }

    public LegacyPolicyRule applyForApprove(@jakarta.annotation.Nullable Boolean applyForApprove) {
        this.applyForApprove = applyForApprove;
        return this;
    }

    /**
     * Applying this rule over APPROVE type transactions (can only be enabled when rule&#39;s
     * transaction type is TRANSFER)
     *
     * @return applyForApprove
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPLY_FOR_APPROVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getApplyForApprove() {
        return applyForApprove;
    }

    @JsonProperty(JSON_PROPERTY_APPLY_FOR_APPROVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApplyForApprove(@jakarta.annotation.Nullable Boolean applyForApprove) {
        this.applyForApprove = applyForApprove;
    }

    public LegacyPolicyRule applyForTypedMessage(
            @jakarta.annotation.Nullable Boolean applyForTypedMessage) {
        this.applyForTypedMessage = applyForTypedMessage;
        return this;
    }

    /**
     * Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule&#39;s
     * transaction type is CONTRACT_CALL)
     *
     * @return applyForTypedMessage
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPLY_FOR_TYPED_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getApplyForTypedMessage() {
        return applyForTypedMessage;
    }

    @JsonProperty(JSON_PROPERTY_APPLY_FOR_TYPED_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApplyForTypedMessage(@jakarta.annotation.Nullable Boolean applyForTypedMessage) {
        this.applyForTypedMessage = applyForTypedMessage;
    }

    public LegacyPolicyRule externalDescriptor(
            @jakarta.annotation.Nullable String externalDescriptor) {
        this.externalDescriptor = externalDescriptor;
        return this;
    }

    /**
     * A unique id identifying the rule
     *
     * @return externalDescriptor
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXTERNAL_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getExternalDescriptor() {
        return externalDescriptor;
    }

    @JsonProperty(JSON_PROPERTY_EXTERNAL_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExternalDescriptor(@jakarta.annotation.Nullable String externalDescriptor) {
        this.externalDescriptor = externalDescriptor;
    }

    /** Return true if this LegacyPolicyRule object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LegacyPolicyRule legacyPolicyRule = (LegacyPolicyRule) o;
        return Objects.equals(this.operator, legacyPolicyRule.operator)
                && Objects.equals(this.operators, legacyPolicyRule.operators)
                && Objects.equals(this.transactionType, legacyPolicyRule.transactionType)
                && Objects.equals(this.designatedSigner, legacyPolicyRule.designatedSigner)
                && Objects.equals(this.designatedSigners, legacyPolicyRule.designatedSigners)
                && Objects.equals(this.type, legacyPolicyRule.type)
                && Objects.equals(this.action, legacyPolicyRule.action)
                && Objects.equals(this.asset, legacyPolicyRule.asset)
                && Objects.equals(this.srcType, legacyPolicyRule.srcType)
                && Objects.equals(this.srcSubType, legacyPolicyRule.srcSubType)
                && Objects.equals(this.srcId, legacyPolicyRule.srcId)
                && Objects.equals(this.src, legacyPolicyRule.src)
                && Objects.equals(this.dstType, legacyPolicyRule.dstType)
                && Objects.equals(this.dstSubType, legacyPolicyRule.dstSubType)
                && Objects.equals(this.dstId, legacyPolicyRule.dstId)
                && Objects.equals(this.dst, legacyPolicyRule.dst)
                && Objects.equals(this.dstAddressType, legacyPolicyRule.dstAddressType)
                && Objects.equals(this.amountCurrency, legacyPolicyRule.amountCurrency)
                && Objects.equals(this.amountScope, legacyPolicyRule.amountScope)
                && Objects.equals(this.amount, legacyPolicyRule.amount)
                && Objects.equals(this.periodSec, legacyPolicyRule.periodSec)
                && Objects.equals(this.authorizers, legacyPolicyRule.authorizers)
                && Objects.equals(this.authorizersCount, legacyPolicyRule.authorizersCount)
                && Objects.equals(this.authorizationGroups, legacyPolicyRule.authorizationGroups)
                && Objects.equals(this.amountAggregation, legacyPolicyRule.amountAggregation)
                && Objects.equals(this.rawMessageSigning, legacyPolicyRule.rawMessageSigning)
                && Objects.equals(this.applyForApprove, legacyPolicyRule.applyForApprove)
                && Objects.equals(this.applyForTypedMessage, legacyPolicyRule.applyForTypedMessage)
                && Objects.equals(this.externalDescriptor, legacyPolicyRule.externalDescriptor);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                operator,
                operators,
                transactionType,
                designatedSigner,
                designatedSigners,
                type,
                action,
                asset,
                srcType,
                srcSubType,
                srcId,
                src,
                dstType,
                dstSubType,
                dstId,
                dst,
                dstAddressType,
                amountCurrency,
                amountScope,
                amount,
                periodSec,
                authorizers,
                authorizersCount,
                authorizationGroups,
                amountAggregation,
                rawMessageSigning,
                applyForApprove,
                applyForTypedMessage,
                externalDescriptor);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LegacyPolicyRule {\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("    operators: ").append(toIndentedString(operators)).append("\n");
        sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
        sb.append("    designatedSigner: ").append(toIndentedString(designatedSigner)).append("\n");
        sb.append("    designatedSigners: ")
                .append(toIndentedString(designatedSigners))
                .append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    action: ").append(toIndentedString(action)).append("\n");
        sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("    srcType: ").append(toIndentedString(srcType)).append("\n");
        sb.append("    srcSubType: ").append(toIndentedString(srcSubType)).append("\n");
        sb.append("    srcId: ").append(toIndentedString(srcId)).append("\n");
        sb.append("    src: ").append(toIndentedString(src)).append("\n");
        sb.append("    dstType: ").append(toIndentedString(dstType)).append("\n");
        sb.append("    dstSubType: ").append(toIndentedString(dstSubType)).append("\n");
        sb.append("    dstId: ").append(toIndentedString(dstId)).append("\n");
        sb.append("    dst: ").append(toIndentedString(dst)).append("\n");
        sb.append("    dstAddressType: ").append(toIndentedString(dstAddressType)).append("\n");
        sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
        sb.append("    amountScope: ").append(toIndentedString(amountScope)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    periodSec: ").append(toIndentedString(periodSec)).append("\n");
        sb.append("    authorizers: ").append(toIndentedString(authorizers)).append("\n");
        sb.append("    authorizersCount: ").append(toIndentedString(authorizersCount)).append("\n");
        sb.append("    authorizationGroups: ")
                .append(toIndentedString(authorizationGroups))
                .append("\n");
        sb.append("    amountAggregation: ")
                .append(toIndentedString(amountAggregation))
                .append("\n");
        sb.append("    rawMessageSigning: ")
                .append(toIndentedString(rawMessageSigning))
                .append("\n");
        sb.append("    applyForApprove: ").append(toIndentedString(applyForApprove)).append("\n");
        sb.append("    applyForTypedMessage: ")
                .append(toIndentedString(applyForTypedMessage))
                .append("\n");
        sb.append("    externalDescriptor: ")
                .append(toIndentedString(externalDescriptor))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `operator` to the URL query string
        if (getOperator() != null) {
            joiner.add(
                    String.format(
                            "%soperator%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOperator()))));
        }

        // add `operators` to the URL query string
        if (getOperators() != null) {
            joiner.add(getOperators().toUrlQueryString(prefix + "operators" + suffix));
        }

        // add `transactionType` to the URL query string
        if (getTransactionType() != null) {
            joiner.add(
                    String.format(
                            "%stransactionType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTransactionType()))));
        }

        // add `designatedSigner` to the URL query string
        if (getDesignatedSigner() != null) {
            joiner.add(
                    String.format(
                            "%sdesignatedSigner%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDesignatedSigner()))));
        }

        // add `designatedSigners` to the URL query string
        if (getDesignatedSigners() != null) {
            joiner.add(
                    getDesignatedSigners().toUrlQueryString(prefix + "designatedSigners" + suffix));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `action` to the URL query string
        if (getAction() != null) {
            joiner.add(
                    String.format(
                            "%saction%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAction()))));
        }

        // add `asset` to the URL query string
        if (getAsset() != null) {
            joiner.add(
                    String.format(
                            "%sasset%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAsset()))));
        }

        // add `srcType` to the URL query string
        if (getSrcType() != null) {
            joiner.add(
                    String.format(
                            "%ssrcType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSrcType()))));
        }

        // add `srcSubType` to the URL query string
        if (getSrcSubType() != null) {
            joiner.add(
                    String.format(
                            "%ssrcSubType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSrcSubType()))));
        }

        // add `srcId` to the URL query string
        if (getSrcId() != null) {
            joiner.add(
                    String.format(
                            "%ssrcId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSrcId()))));
        }

        // add `src` to the URL query string
        if (getSrc() != null) {
            joiner.add(getSrc().toUrlQueryString(prefix + "src" + suffix));
        }

        // add `dstType` to the URL query string
        if (getDstType() != null) {
            joiner.add(
                    String.format(
                            "%sdstType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDstType()))));
        }

        // add `dstSubType` to the URL query string
        if (getDstSubType() != null) {
            joiner.add(
                    String.format(
                            "%sdstSubType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDstSubType()))));
        }

        // add `dstId` to the URL query string
        if (getDstId() != null) {
            joiner.add(
                    String.format(
                            "%sdstId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDstId()))));
        }

        // add `dst` to the URL query string
        if (getDst() != null) {
            joiner.add(getDst().toUrlQueryString(prefix + "dst" + suffix));
        }

        // add `dstAddressType` to the URL query string
        if (getDstAddressType() != null) {
            joiner.add(
                    String.format(
                            "%sdstAddressType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDstAddressType()))));
        }

        // add `amountCurrency` to the URL query string
        if (getAmountCurrency() != null) {
            joiner.add(
                    String.format(
                            "%samountCurrency%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAmountCurrency()))));
        }

        // add `amountScope` to the URL query string
        if (getAmountScope() != null) {
            joiner.add(
                    String.format(
                            "%samountScope%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAmountScope()))));
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
        }

        // add `periodSec` to the URL query string
        if (getPeriodSec() != null) {
            joiner.add(
                    String.format(
                            "%speriodSec%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPeriodSec()))));
        }

        // add `authorizers` to the URL query string
        if (getAuthorizers() != null) {
            for (int i = 0; i < getAuthorizers().size(); i++) {
                joiner.add(
                        String.format(
                                "%sauthorizers%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getAuthorizers().get(i)))));
            }
        }

        // add `authorizersCount` to the URL query string
        if (getAuthorizersCount() != null) {
            joiner.add(
                    String.format(
                            "%sauthorizersCount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAuthorizersCount()))));
        }

        // add `authorizationGroups` to the URL query string
        if (getAuthorizationGroups() != null) {
            joiner.add(
                    getAuthorizationGroups()
                            .toUrlQueryString(prefix + "authorizationGroups" + suffix));
        }

        // add `amountAggregation` to the URL query string
        if (getAmountAggregation() != null) {
            joiner.add(
                    getAmountAggregation().toUrlQueryString(prefix + "amountAggregation" + suffix));
        }

        // add `rawMessageSigning` to the URL query string
        if (getRawMessageSigning() != null) {
            joiner.add(
                    getRawMessageSigning().toUrlQueryString(prefix + "rawMessageSigning" + suffix));
        }

        // add `applyForApprove` to the URL query string
        if (getApplyForApprove() != null) {
            joiner.add(
                    String.format(
                            "%sapplyForApprove%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getApplyForApprove()))));
        }

        // add `applyForTypedMessage` to the URL query string
        if (getApplyForTypedMessage() != null) {
            joiner.add(
                    String.format(
                            "%sapplyForTypedMessage%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getApplyForTypedMessage()))));
        }

        // add `externalDescriptor` to the URL query string
        if (getExternalDescriptor() != null) {
            joiner.add(
                    String.format(
                            "%sexternalDescriptor%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getExternalDescriptor()))));
        }

        return joiner.toString();
    }
}
