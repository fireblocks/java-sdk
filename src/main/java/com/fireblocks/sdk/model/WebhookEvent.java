/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/** Gets or Sets WebhookEvent */
public enum WebhookEvent {
    TRANSACTION_CREATED("transaction.created"),

    TRANSACTION_STATUS_UPDATED("transaction.status.updated"),

    TRANSACTION_APPROVAL_STATUS_UPDATED("transaction.approval_status.updated"),

    EXTERNAL_WALLET_ASSET_ADDED("external_wallet.asset.added"),

    EXTERNAL_WALLET_ASSET_REMOVED("external_wallet.asset.removed"),

    INTERNAL_WALLET_ASSET_ADDED("internal_wallet.asset.added"),

    INTERNAL_WALLET_ASSET_REMOVED("internal_wallet.asset.removed"),

    CONTRACT_WALLET_ASSET_ADDED("contract_wallet.asset.added"),

    CONTRACT_WALLET_ASSET_REMOVED("contract_wallet.asset.removed"),

    VAULT_ACCOUNT_CREATED("vault_account.created"),

    VAULT_ACCOUNT_ASSET_LISTED("vault_account.asset.listed"),

    VAULT_ACCOUNT_ASSET_BALANCE_UPDATED("vault_account.asset.balance_updated"),

    VAULT_ACCOUNT_NFT_BALANCE_UPDATED("vault_account.nft.balance_updated"),

    EMBEDDED_WALLET_CREATED("embedded_wallet.created"),

    EMBEDDED_WALLET_ASSET_BALANCE_UPDATED("embedded_wallet.asset.balance_updated"),

    EMBEDDED_WALLET_ASSET_LISTED("embedded_wallet.asset.listed"),

    EMBEDDED_WALLET_ACCOUNT_CREATED("embedded_wallet.account.created"),

    EMBEDDED_WALLET_DEVICE_ADDED("embedded_wallet.device.added"),

    EMBEDDED_WALLET_TRANSACTION_UPDATED("embedded_wallet.transaction.updated"),

    EXCHANGE_ACCOUNT_CONNECTED("exchange_account.connected"),

    FIAT_ACCOUNT_CONNECTED("fiat_account.connected"),

    TICKET_CREATED("ticket.created"),

    TICKET_SUBMITTED("ticket.submitted"),

    TICKET_EXPIRED("ticket.expired"),

    TICKET_CANCELED("ticket.canceled"),

    TICKET_FULFILLED("ticket.fulfilled"),

    TICKET_COUNTERPARTY_ADDED("ticket.counterparty.added"),

    TICKET_COUNTERPARTY_EXTERNAL_ID_SET("ticket.counterparty_external_id.set"),

    TICKET_NOTE_ADDED("ticket.note.added"),

    TICKET_EXPIRED_IN_SET("ticket.expired_in.set"),

    TICKET_EXPIRED_AT_SET("ticket.expired_at.set"),

    TICKET_TERM_ADDED("ticket.term.added"),

    TICKET_TERM_UPDATED("ticket.term.updated"),

    TICKET_TERM_DELETED("ticket.term.deleted"),

    TICKET_TERM_FUNDED("ticket.term.funded"),

    TICKET_TERM_MANUALLY_FUNDED("ticket.term.manually_funded"),

    TICKET_TERM_FUNDING_CANCELED("ticket.term.funding_canceled"),

    TICKET_TERM_FUNDING_FAILED("ticket.term.funding_failed"),

    TICKET_TERM_FUNDING_COMPLETED("ticket.term.funding_completed"),

    TICKET_TERM_TRANSACTION_STATUS_CHANGED("ticket.term.transaction_status_changed"),

    SETTLEMENT_CREATED("settlement.created"),

    COLLATERAL_STATUS_UPDATED("collateral.status.updated");

    private String value;

    WebhookEvent(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    @JsonCreator
    public static WebhookEvent fromValue(String value) {
        for (WebhookEvent b : WebhookEvent.values()) {
            if (b.value.equals(value)) {
                return b;
            }
        }
        throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        if (prefix == null) {
            prefix = "";
        }

        return String.format("%s=%s", prefix, this.toString());
    }
}
