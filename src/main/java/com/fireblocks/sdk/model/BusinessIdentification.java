/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** BusinessIdentification */
@JsonPropertyOrder({
    BusinessIdentification.JSON_PROPERTY_EXTERNAL_REFERENCE_ID,
    BusinessIdentification.JSON_PROPERTY_ENTITY_TYPE,
    BusinessIdentification.JSON_PROPERTY_PARTICIPANT_RELATIONSHIP_TYPE,
    BusinessIdentification.JSON_PROPERTY_BUSINESS_NAME,
    BusinessIdentification.JSON_PROPERTY_REGISTRATION_NUMBER,
    BusinessIdentification.JSON_PROPERTY_POSTAL_ADDRESS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class BusinessIdentification {
    public static final String JSON_PROPERTY_EXTERNAL_REFERENCE_ID = "externalReferenceId";
    @jakarta.annotation.Nonnull private String externalReferenceId;

    /** Gets or Sets entityType */
    public enum EntityTypeEnum {
        BUSINESS(String.valueOf("BUSINESS"));

        private String value;

        EntityTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static EntityTypeEnum fromValue(String value) {
            for (EntityTypeEnum b : EntityTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
    @jakarta.annotation.Nonnull private EntityTypeEnum entityType;

    public static final String JSON_PROPERTY_PARTICIPANT_RELATIONSHIP_TYPE =
            "participantRelationshipType";
    @jakarta.annotation.Nonnull private ParticipantRelationshipType participantRelationshipType;

    public static final String JSON_PROPERTY_BUSINESS_NAME = "businessName";
    @jakarta.annotation.Nonnull private String businessName;

    public static final String JSON_PROPERTY_REGISTRATION_NUMBER = "registrationNumber";
    @jakarta.annotation.Nonnull private String registrationNumber;

    public static final String JSON_PROPERTY_POSTAL_ADDRESS = "postalAddress";
    @jakarta.annotation.Nonnull private PostalAddress postalAddress;

    public BusinessIdentification() {}

    @JsonCreator
    public BusinessIdentification(
            @JsonProperty(value = JSON_PROPERTY_EXTERNAL_REFERENCE_ID, required = true)
                    String externalReferenceId,
            @JsonProperty(value = JSON_PROPERTY_ENTITY_TYPE, required = true)
                    EntityTypeEnum entityType,
            @JsonProperty(value = JSON_PROPERTY_PARTICIPANT_RELATIONSHIP_TYPE, required = true)
                    ParticipantRelationshipType participantRelationshipType,
            @JsonProperty(value = JSON_PROPERTY_BUSINESS_NAME, required = true) String businessName,
            @JsonProperty(value = JSON_PROPERTY_REGISTRATION_NUMBER, required = true)
                    String registrationNumber,
            @JsonProperty(value = JSON_PROPERTY_POSTAL_ADDRESS, required = true)
                    PostalAddress postalAddress) {
        this.externalReferenceId = externalReferenceId;
        this.entityType = entityType;
        this.participantRelationshipType = participantRelationshipType;
        this.businessName = businessName;
        this.registrationNumber = registrationNumber;
        this.postalAddress = postalAddress;
    }

    public BusinessIdentification externalReferenceId(
            @jakarta.annotation.Nonnull String externalReferenceId) {
        this.externalReferenceId = externalReferenceId;
        return this;
    }

    /**
     * Get externalReferenceId
     *
     * @return externalReferenceId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getExternalReferenceId() {
        return externalReferenceId;
    }

    @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExternalReferenceId(@jakarta.annotation.Nonnull String externalReferenceId) {
        this.externalReferenceId = externalReferenceId;
    }

    public BusinessIdentification entityType(
            @jakarta.annotation.Nonnull EntityTypeEnum entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get entityType
     *
     * @return entityType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public EntityTypeEnum getEntityType() {
        return entityType;
    }

    @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEntityType(@jakarta.annotation.Nonnull EntityTypeEnum entityType) {
        this.entityType = entityType;
    }

    public BusinessIdentification participantRelationshipType(
            @jakarta.annotation.Nonnull ParticipantRelationshipType participantRelationshipType) {
        this.participantRelationshipType = participantRelationshipType;
        return this;
    }

    /**
     * Get participantRelationshipType
     *
     * @return participantRelationshipType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PARTICIPANT_RELATIONSHIP_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ParticipantRelationshipType getParticipantRelationshipType() {
        return participantRelationshipType;
    }

    @JsonProperty(JSON_PROPERTY_PARTICIPANT_RELATIONSHIP_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParticipantRelationshipType(
            @jakarta.annotation.Nonnull ParticipantRelationshipType participantRelationshipType) {
        this.participantRelationshipType = participantRelationshipType;
    }

    public BusinessIdentification businessName(@jakarta.annotation.Nonnull String businessName) {
        this.businessName = businessName;
        return this;
    }

    /**
     * Get businessName
     *
     * @return businessName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BUSINESS_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBusinessName() {
        return businessName;
    }

    @JsonProperty(JSON_PROPERTY_BUSINESS_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBusinessName(@jakarta.annotation.Nonnull String businessName) {
        this.businessName = businessName;
    }

    public BusinessIdentification registrationNumber(
            @jakarta.annotation.Nonnull String registrationNumber) {
        this.registrationNumber = registrationNumber;
        return this;
    }

    /**
     * Get registrationNumber
     *
     * @return registrationNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REGISTRATION_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getRegistrationNumber() {
        return registrationNumber;
    }

    @JsonProperty(JSON_PROPERTY_REGISTRATION_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRegistrationNumber(@jakarta.annotation.Nonnull String registrationNumber) {
        this.registrationNumber = registrationNumber;
    }

    public BusinessIdentification postalAddress(
            @jakarta.annotation.Nonnull PostalAddress postalAddress) {
        this.postalAddress = postalAddress;
        return this;
    }

    /**
     * Get postalAddress
     *
     * @return postalAddress
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_POSTAL_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PostalAddress getPostalAddress() {
        return postalAddress;
    }

    @JsonProperty(JSON_PROPERTY_POSTAL_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPostalAddress(@jakarta.annotation.Nonnull PostalAddress postalAddress) {
        this.postalAddress = postalAddress;
    }

    /** Return true if this BusinessIdentification object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BusinessIdentification businessIdentification = (BusinessIdentification) o;
        return Objects.equals(this.externalReferenceId, businessIdentification.externalReferenceId)
                && Objects.equals(this.entityType, businessIdentification.entityType)
                && Objects.equals(
                        this.participantRelationshipType,
                        businessIdentification.participantRelationshipType)
                && Objects.equals(this.businessName, businessIdentification.businessName)
                && Objects.equals(
                        this.registrationNumber, businessIdentification.registrationNumber)
                && Objects.equals(this.postalAddress, businessIdentification.postalAddress);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                externalReferenceId,
                entityType,
                participantRelationshipType,
                businessName,
                registrationNumber,
                postalAddress);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BusinessIdentification {\n");
        sb.append("    externalReferenceId: ")
                .append(toIndentedString(externalReferenceId))
                .append("\n");
        sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
        sb.append("    participantRelationshipType: ")
                .append(toIndentedString(participantRelationshipType))
                .append("\n");
        sb.append("    businessName: ").append(toIndentedString(businessName)).append("\n");
        sb.append("    registrationNumber: ")
                .append(toIndentedString(registrationNumber))
                .append("\n");
        sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `externalReferenceId` to the URL query string
        if (getExternalReferenceId() != null) {
            joiner.add(
                    String.format(
                            "%sexternalReferenceId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getExternalReferenceId()))));
        }

        // add `entityType` to the URL query string
        if (getEntityType() != null) {
            joiner.add(
                    String.format(
                            "%sentityType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getEntityType()))));
        }

        // add `participantRelationshipType` to the URL query string
        if (getParticipantRelationshipType() != null) {
            joiner.add(
                    String.format(
                            "%sparticipantRelationshipType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getParticipantRelationshipType()))));
        }

        // add `businessName` to the URL query string
        if (getBusinessName() != null) {
            joiner.add(
                    String.format(
                            "%sbusinessName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBusinessName()))));
        }

        // add `registrationNumber` to the URL query string
        if (getRegistrationNumber() != null) {
            joiner.add(
                    String.format(
                            "%sregistrationNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRegistrationNumber()))));
        }

        // add `postalAddress` to the URL query string
        if (getPostalAddress() != null) {
            joiner.add(getPostalAddress().toUrlQueryString(prefix + "postalAddress" + suffix));
        }

        return joiner.toString();
    }
}
