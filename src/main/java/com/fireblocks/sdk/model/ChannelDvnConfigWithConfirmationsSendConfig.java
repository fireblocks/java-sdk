/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** ChannelDvnConfigWithConfirmationsSendConfig */
@JsonPropertyOrder({
    ChannelDvnConfigWithConfirmationsSendConfig.JSON_PROPERTY_DVN_ADDRESSES,
    ChannelDvnConfigWithConfirmationsSendConfig.JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES,
    ChannelDvnConfigWithConfirmationsSendConfig.JSON_PROPERTY_OPTIONAL_THRESHOLD,
    ChannelDvnConfigWithConfirmationsSendConfig.JSON_PROPERTY_CONFIRMATIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ChannelDvnConfigWithConfirmationsSendConfig {
    public static final String JSON_PROPERTY_DVN_ADDRESSES = "dvnAddresses";
    private List<String> dvnAddresses = new ArrayList<>();

    public static final String JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES = "optionalDVNAddresses";
    private List<String> optionalDVNAddresses;

    public static final String JSON_PROPERTY_OPTIONAL_THRESHOLD = "optionalThreshold";
    private BigDecimal optionalThreshold;

    public static final String JSON_PROPERTY_CONFIRMATIONS = "confirmations";
    private BigDecimal confirmations;

    public ChannelDvnConfigWithConfirmationsSendConfig() {}

    public ChannelDvnConfigWithConfirmationsSendConfig dvnAddresses(List<String> dvnAddresses) {
        this.dvnAddresses = dvnAddresses;
        return this;
    }

    public ChannelDvnConfigWithConfirmationsSendConfig addDvnAddressesItem(
            String dvnAddressesItem) {
        if (this.dvnAddresses == null) {
            this.dvnAddresses = new ArrayList<>();
        }
        this.dvnAddresses.add(dvnAddressesItem);
        return this;
    }

    /**
     * Array of required DVN Ethereum addresses that sign ULN messages.
     *
     * @return dvnAddresses
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DVN_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getDvnAddresses() {
        return dvnAddresses;
    }

    @JsonProperty(JSON_PROPERTY_DVN_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDvnAddresses(List<String> dvnAddresses) {
        this.dvnAddresses = dvnAddresses;
    }

    public ChannelDvnConfigWithConfirmationsSendConfig optionalDVNAddresses(
            List<String> optionalDVNAddresses) {
        this.optionalDVNAddresses = optionalDVNAddresses;
        return this;
    }

    public ChannelDvnConfigWithConfirmationsSendConfig addOptionalDVNAddressesItem(
            String optionalDVNAddressesItem) {
        if (this.optionalDVNAddresses == null) {
            this.optionalDVNAddresses = new ArrayList<>();
        }
        this.optionalDVNAddresses.add(optionalDVNAddressesItem);
        return this;
    }

    /**
     * Array of optional DVN Ethereum addresses that sign ULN messages.
     *
     * @return optionalDVNAddresses
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getOptionalDVNAddresses() {
        return optionalDVNAddresses;
    }

    @JsonProperty(JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOptionalDVNAddresses(List<String> optionalDVNAddresses) {
        this.optionalDVNAddresses = optionalDVNAddresses;
    }

    public ChannelDvnConfigWithConfirmationsSendConfig optionalThreshold(
            BigDecimal optionalThreshold) {
        this.optionalThreshold = optionalThreshold;
        return this;
    }

    /**
     * Minimum number of DVN signatures required (M-of-N).
     *
     * @return optionalThreshold
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OPTIONAL_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getOptionalThreshold() {
        return optionalThreshold;
    }

    @JsonProperty(JSON_PROPERTY_OPTIONAL_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOptionalThreshold(BigDecimal optionalThreshold) {
        this.optionalThreshold = optionalThreshold;
    }

    public ChannelDvnConfigWithConfirmationsSendConfig confirmations(BigDecimal confirmations) {
        this.confirmations = confirmations;
        return this;
    }

    /**
     * Number of block confirmations required
     *
     * @return confirmations
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CONFIRMATIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getConfirmations() {
        return confirmations;
    }

    @JsonProperty(JSON_PROPERTY_CONFIRMATIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfirmations(BigDecimal confirmations) {
        this.confirmations = confirmations;
    }

    /** Return true if this ChannelDvnConfigWithConfirmations_sendConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChannelDvnConfigWithConfirmationsSendConfig channelDvnConfigWithConfirmationsSendConfig =
                (ChannelDvnConfigWithConfirmationsSendConfig) o;
        return Objects.equals(
                        this.dvnAddresses, channelDvnConfigWithConfirmationsSendConfig.dvnAddresses)
                && Objects.equals(
                        this.optionalDVNAddresses,
                        channelDvnConfigWithConfirmationsSendConfig.optionalDVNAddresses)
                && Objects.equals(
                        this.optionalThreshold,
                        channelDvnConfigWithConfirmationsSendConfig.optionalThreshold)
                && Objects.equals(
                        this.confirmations,
                        channelDvnConfigWithConfirmationsSendConfig.confirmations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dvnAddresses, optionalDVNAddresses, optionalThreshold, confirmations);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChannelDvnConfigWithConfirmationsSendConfig {\n");
        sb.append("    dvnAddresses: ").append(toIndentedString(dvnAddresses)).append("\n");
        sb.append("    optionalDVNAddresses: ")
                .append(toIndentedString(optionalDVNAddresses))
                .append("\n");
        sb.append("    optionalThreshold: ")
                .append(toIndentedString(optionalThreshold))
                .append("\n");
        sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `dvnAddresses` to the URL query string
        if (getDvnAddresses() != null) {
            for (int i = 0; i < getDvnAddresses().size(); i++) {
                joiner.add(
                        String.format(
                                "%sdvnAddresses%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                String.valueOf(getDvnAddresses().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `optionalDVNAddresses` to the URL query string
        if (getOptionalDVNAddresses() != null) {
            for (int i = 0; i < getOptionalDVNAddresses().size(); i++) {
                joiner.add(
                        String.format(
                                "%soptionalDVNAddresses%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                String.valueOf(getOptionalDVNAddresses().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `optionalThreshold` to the URL query string
        if (getOptionalThreshold() != null) {
            joiner.add(
                    String.format(
                            "%soptionalThreshold%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOptionalThreshold()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `confirmations` to the URL query string
        if (getConfirmations() != null) {
            joiner.add(
                    String.format(
                            "%sconfirmations%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getConfirmations()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
