/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** AccountBasedAccessProvider */
@JsonPropertyOrder({
    AccountBasedAccessProvider.JSON_PROPERTY_ID,
    AccountBasedAccessProvider.JSON_PROPERTY_NAME,
    AccountBasedAccessProvider.JSON_PROPERTY_LOGO,
    AccountBasedAccessProvider.JSON_PROPERTY_ACCOUNT_BASED,
    AccountBasedAccessProvider.JSON_PROPERTY_MANIFEST,
    AccountBasedAccessProvider.JSON_PROPERTY_CONNECTED,
    AccountBasedAccessProvider.JSON_PROPERTY_ACCOUNTS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AccountBasedAccessProvider {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_LOGO = "logo";
    @jakarta.annotation.Nullable private String logo;

    public static final String JSON_PROPERTY_ACCOUNT_BASED = "accountBased";
    @jakarta.annotation.Nonnull private Boolean accountBased;

    public static final String JSON_PROPERTY_MANIFEST = "manifest";
    @jakarta.annotation.Nonnull private Manifest manifest;

    public static final String JSON_PROPERTY_CONNECTED = "connected";
    @jakarta.annotation.Nonnull private Boolean connected;

    public static final String JSON_PROPERTY_ACCOUNTS = "accounts";
    @jakarta.annotation.Nullable private List<AccountBase> accounts;

    public AccountBasedAccessProvider() {}

    @JsonCreator
    public AccountBasedAccessProvider(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_NAME, required = true) String name,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_BASED, required = true)
                    Boolean accountBased,
            @JsonProperty(value = JSON_PROPERTY_MANIFEST, required = true) Manifest manifest,
            @JsonProperty(value = JSON_PROPERTY_CONNECTED, required = true) Boolean connected) {
        this.id = id;
        this.name = name;
        this.accountBased = accountBased;
        this.manifest = manifest;
        this.connected = connected;
    }

    public AccountBasedAccessProvider id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier for the provider
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public AccountBasedAccessProvider name(@jakarta.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Display name of the provider
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@jakarta.annotation.Nonnull String name) {
        this.name = name;
    }

    public AccountBasedAccessProvider logo(@jakarta.annotation.Nullable String logo) {
        this.logo = logo;
        return this;
    }

    /**
     * URL to the logo image of the provider
     *
     * @return logo
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LOGO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLogo() {
        return logo;
    }

    @JsonProperty(JSON_PROPERTY_LOGO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLogo(@jakarta.annotation.Nullable String logo) {
        this.logo = logo;
    }

    public AccountBasedAccessProvider accountBased(
            @jakarta.annotation.Nonnull Boolean accountBased) {
        this.accountBased = accountBased;
        return this;
    }

    /**
     * Indicates whether the provider access model is through accounts or directly
     *
     * @return accountBased
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_BASED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getAccountBased() {
        return accountBased;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_BASED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountBased(@jakarta.annotation.Nonnull Boolean accountBased) {
        this.accountBased = accountBased;
    }

    public AccountBasedAccessProvider manifest(@jakarta.annotation.Nonnull Manifest manifest) {
        this.manifest = manifest;
        return this;
    }

    /**
     * Get manifest
     *
     * @return manifest
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MANIFEST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Manifest getManifest() {
        return manifest;
    }

    @JsonProperty(JSON_PROPERTY_MANIFEST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setManifest(@jakarta.annotation.Nonnull Manifest manifest) {
        this.manifest = manifest;
    }

    public AccountBasedAccessProvider connected(@jakarta.annotation.Nonnull Boolean connected) {
        this.connected = connected;
        return this;
    }

    /**
     * Whether the provider is currently connected
     *
     * @return connected
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CONNECTED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getConnected() {
        return connected;
    }

    @JsonProperty(JSON_PROPERTY_CONNECTED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConnected(@jakarta.annotation.Nonnull Boolean connected) {
        this.connected = connected;
    }

    public AccountBasedAccessProvider accounts(
            @jakarta.annotation.Nullable List<AccountBase> accounts) {
        this.accounts = accounts;
        return this;
    }

    public AccountBasedAccessProvider addAccountsItem(AccountBase accountsItem) {
        if (this.accounts == null) {
            this.accounts = new ArrayList<>();
        }
        this.accounts.add(accountsItem);
        return this;
    }

    /**
     * Get accounts
     *
     * @return accounts
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ACCOUNTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<AccountBase> getAccounts() {
        return accounts;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAccounts(@jakarta.annotation.Nullable List<AccountBase> accounts) {
        this.accounts = accounts;
    }

    /** Return true if this AccountBasedAccessProvider object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBasedAccessProvider accountBasedAccessProvider = (AccountBasedAccessProvider) o;
        return Objects.equals(this.id, accountBasedAccessProvider.id)
                && Objects.equals(this.name, accountBasedAccessProvider.name)
                && Objects.equals(this.logo, accountBasedAccessProvider.logo)
                && Objects.equals(this.accountBased, accountBasedAccessProvider.accountBased)
                && Objects.equals(this.manifest, accountBasedAccessProvider.manifest)
                && Objects.equals(this.connected, accountBasedAccessProvider.connected)
                && Objects.equals(this.accounts, accountBasedAccessProvider.accounts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, logo, accountBased, manifest, connected, accounts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountBasedAccessProvider {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
        sb.append("    accountBased: ").append(toIndentedString(accountBased)).append("\n");
        sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
        sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
        sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `logo` to the URL query string
        if (getLogo() != null) {
            joiner.add(
                    String.format(
                            "%slogo%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLogo()))));
        }

        // add `accountBased` to the URL query string
        if (getAccountBased() != null) {
            joiner.add(
                    String.format(
                            "%saccountBased%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAccountBased()))));
        }

        // add `manifest` to the URL query string
        if (getManifest() != null) {
            joiner.add(getManifest().toUrlQueryString(prefix + "manifest" + suffix));
        }

        // add `connected` to the URL query string
        if (getConnected() != null) {
            joiner.add(
                    String.format(
                            "%sconnected%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getConnected()))));
        }

        // add `accounts` to the URL query string
        if (getAccounts() != null) {
            for (int i = 0; i < getAccounts().size(); i++) {
                if (getAccounts().get(i) != null) {
                    joiner.add(
                            getAccounts()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%saccounts%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
