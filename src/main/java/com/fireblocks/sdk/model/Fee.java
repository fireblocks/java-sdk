/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import com.fireblocks.sdk.JSON;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

/** Fee */
@JsonPropertyOrder({
    Fee.JSON_PROPERTY_FEE_TYPE,
    Fee.JSON_PROPERTY_ASSET_ID,
    Fee.JSON_PROPERTY_AMOUNT_TYPE,
    Fee.JSON_PROPERTY_AMOUNT
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
@JsonIgnoreProperties(
        value = "amountType", // ignore manually set amountType, it will be automatically generated
        // by Jackson during serialization
        allowSetters = true // allows the amountType to be set during deserialization
        )
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "amountType",
        visible = true)
public class Fee {
    /**
     * The type of fee, such as ORDER, NETWORK, or SPREAD. ORDER - Fee for executing the order.
     * NETWORK - Fee for network transactions. SPREAD - Fee for the difference between buy and sell
     * prices.
     */
    public enum FeeTypeEnum {
        ORDER(String.valueOf("ORDER")),

        NETWORK(String.valueOf("NETWORK")),

        SPREAD(String.valueOf("SPREAD"));

        private String value;

        FeeTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FeeTypeEnum fromValue(String value) {
            for (FeeTypeEnum b : FeeTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_FEE_TYPE = "feeType";
    @jakarta.annotation.Nonnull private FeeTypeEnum feeType;

    public static final String JSON_PROPERTY_ASSET_ID = "assetId";
    @jakarta.annotation.Nonnull private String assetId;

    /** Gets or Sets amountType */
    public enum AmountTypeEnum {
        BPS(String.valueOf("BPS"));

        private String value;

        AmountTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AmountTypeEnum fromValue(String value) {
            for (AmountTypeEnum b : AmountTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_AMOUNT_TYPE = "amountType";
    @jakarta.annotation.Nonnull private AmountTypeEnum amountType;

    public static final String JSON_PROPERTY_AMOUNT = "amount";
    @jakarta.annotation.Nonnull private BigDecimal amount;

    public Fee() {}

    @JsonCreator
    public Fee(
            @JsonProperty(value = JSON_PROPERTY_FEE_TYPE, required = true) FeeTypeEnum feeType,
            @JsonProperty(value = JSON_PROPERTY_ASSET_ID, required = true) String assetId,
            @JsonProperty(value = JSON_PROPERTY_AMOUNT_TYPE, required = true)
                    AmountTypeEnum amountType,
            @JsonProperty(value = JSON_PROPERTY_AMOUNT, required = true) BigDecimal amount) {
        this.feeType = feeType;
        this.assetId = assetId;
        this.amountType = amountType;
        this.amount = amount;
    }

    public Fee feeType(@jakarta.annotation.Nonnull FeeTypeEnum feeType) {
        this.feeType = feeType;
        return this;
    }

    /**
     * The type of fee, such as ORDER, NETWORK, or SPREAD. ORDER - Fee for executing the order.
     * NETWORK - Fee for network transactions. SPREAD - Fee for the difference between buy and sell
     * prices.
     *
     * @return feeType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_FEE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public FeeTypeEnum getFeeType() {
        return feeType;
    }

    @JsonProperty(JSON_PROPERTY_FEE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFeeType(@jakarta.annotation.Nonnull FeeTypeEnum feeType) {
        this.feeType = feeType;
    }

    public Fee assetId(@jakarta.annotation.Nonnull String assetId) {
        this.assetId = assetId;
        return this;
    }

    /**
     * The asset identifier for the fee.
     *
     * @return assetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAssetId() {
        return assetId;
    }

    @JsonProperty(JSON_PROPERTY_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAssetId(@jakarta.annotation.Nonnull String assetId) {
        this.assetId = assetId;
    }

    public Fee amountType(@jakarta.annotation.Nonnull AmountTypeEnum amountType) {
        this.amountType = amountType;
        return this;
    }

    /**
     * Get amountType
     *
     * @return amountType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AmountTypeEnum getAmountType() {
        return amountType;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmountType(@jakarta.annotation.Nonnull AmountTypeEnum amountType) {
        this.amountType = amountType;
    }

    public Fee amount(@jakarta.annotation.Nonnull BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Fee in basis points (1 &#x3D; 0.01%, 10000 &#x3D; 100%) minimum: 0 maximum: 10000
     *
     * @return amount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(@jakarta.annotation.Nonnull BigDecimal amount) {
        this.amount = amount;
    }

    /** Return true if this Fee object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fee fee = (Fee) o;
        return Objects.equals(this.feeType, fee.feeType)
                && Objects.equals(this.assetId, fee.assetId)
                && Objects.equals(this.amountType, fee.amountType)
                && Objects.equals(this.amount, fee.amount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(feeType, assetId, amountType, amount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Fee {\n");
        sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
        sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
        sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `feeType` to the URL query string
        if (getFeeType() != null) {
            joiner.add(
                    String.format(
                            "%sfeeType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFeeType()))));
        }

        // add `assetId` to the URL query string
        if (getAssetId() != null) {
            joiner.add(
                    String.format(
                            "%sassetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAssetId()))));
        }

        // add `amountType` to the URL query string
        if (getAmountType() != null) {
            joiner.add(
                    String.format(
                            "%samountType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAmountType()))));
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(
                    String.format(
                            "%samount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAmount()))));
        }

        return joiner.toString();
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("Fee", Fee.class);
        JSON.registerDiscriminator(Fee.class, "amountType", mappings);
    }
}
