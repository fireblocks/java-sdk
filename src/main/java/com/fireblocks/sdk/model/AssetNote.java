/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** AssetNote */
@JsonPropertyOrder({
    AssetNote.JSON_PROPERTY_TEXT,
    AssetNote.JSON_PROPERTY_USER_ID,
    AssetNote.JSON_PROPERTY_USER_NAME,
    AssetNote.JSON_PROPERTY_UPDATED_AT
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AssetNote {
    public static final String JSON_PROPERTY_TEXT = "text";
    @jakarta.annotation.Nonnull private String text;

    public static final String JSON_PROPERTY_USER_ID = "userId";
    @jakarta.annotation.Nonnull private UUID userId;

    public static final String JSON_PROPERTY_USER_NAME = "userName";
    @jakarta.annotation.Nonnull private String userName;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    @jakarta.annotation.Nonnull private OffsetDateTime updatedAt;

    public AssetNote() {}

    @JsonCreator
    public AssetNote(
            @JsonProperty(value = JSON_PROPERTY_TEXT, required = true) String text,
            @JsonProperty(value = JSON_PROPERTY_USER_ID, required = true) UUID userId,
            @JsonProperty(value = JSON_PROPERTY_USER_NAME, required = true) String userName,
            @JsonProperty(value = JSON_PROPERTY_UPDATED_AT, required = true)
                    OffsetDateTime updatedAt) {
        this.text = text;
        this.userId = userId;
        this.userName = userName;
        this.updatedAt = updatedAt;
    }

    public AssetNote text(@jakarta.annotation.Nonnull String text) {
        this.text = text;
        return this;
    }

    /**
     * Note content
     *
     * @return text
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getText() {
        return text;
    }

    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setText(@jakarta.annotation.Nonnull String text) {
        this.text = text;
    }

    public AssetNote userId(@jakarta.annotation.Nonnull UUID userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Who updated the note (uuid)
     *
     * @return userId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_USER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getUserId() {
        return userId;
    }

    @JsonProperty(JSON_PROPERTY_USER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUserId(@jakarta.annotation.Nonnull UUID userId) {
        this.userId = userId;
    }

    public AssetNote userName(@jakarta.annotation.Nonnull String userName) {
        this.userName = userName;
        return this;
    }

    /**
     * User name
     *
     * @return userName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_USER_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getUserName() {
        return userName;
    }

    @JsonProperty(JSON_PROPERTY_USER_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUserName(@jakarta.annotation.Nonnull String userName) {
        this.userName = userName;
    }

    public AssetNote updatedAt(@jakarta.annotation.Nonnull OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * ISO Timestamp when last updated
     *
     * @return updatedAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpdatedAt(@jakarta.annotation.Nonnull OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /** Return true if this AssetNote object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetNote assetNote = (AssetNote) o;
        return Objects.equals(this.text, assetNote.text)
                && Objects.equals(this.userId, assetNote.userId)
                && Objects.equals(this.userName, assetNote.userName)
                && Objects.equals(this.updatedAt, assetNote.updatedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(text, userId, userName, updatedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AssetNote {\n");
        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
        sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `text` to the URL query string
        if (getText() != null) {
            joiner.add(
                    String.format(
                            "%stext%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getText()))));
        }

        // add `userId` to the URL query string
        if (getUserId() != null) {
            joiner.add(
                    String.format(
                            "%suserId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUserId()))));
        }

        // add `userName` to the URL query string
        if (getUserName() != null) {
            joiner.add(
                    String.format(
                            "%suserName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUserName()))));
        }

        // add `updatedAt` to the URL query string
        if (getUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%supdatedAt%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUpdatedAt()))));
        }

        return joiner.toString();
    }
}
