/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** Policy source/destination configuration */
@JsonPropertyOrder({
    AccountConfig.JSON_PROPERTY_TYPE,
    AccountConfig.JSON_PROPERTY_SUB_TYPE,
    AccountConfig.JSON_PROPERTY_IDS,
    AccountConfig.JSON_PROPERTY_OPERATOR,
    AccountConfig.JSON_PROPERTY_MATCH_FROM
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AccountConfig {
    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private AccountType2 type;

    public static final String JSON_PROPERTY_SUB_TYPE = "subType";
    @jakarta.annotation.Nullable private List<AccountIdentifier> subType = new ArrayList<>();

    public static final String JSON_PROPERTY_IDS = "ids";
    @jakarta.annotation.Nullable private List<AccountIdentifier> ids = new ArrayList<>();

    public static final String JSON_PROPERTY_OPERATOR = "operator";
    @jakarta.annotation.Nonnull private PolicyOperator operator;

    /** Whether to match from account or source */
    public enum MatchFromEnum {
        ACCOUNT(String.valueOf("ACCOUNT")),

        SOURCE(String.valueOf("SOURCE"));

        private String value;

        MatchFromEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static MatchFromEnum fromValue(String value) {
            for (MatchFromEnum b : MatchFromEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_MATCH_FROM = "matchFrom";
    @jakarta.annotation.Nullable private MatchFromEnum matchFrom;

    public AccountConfig() {}

    @JsonCreator
    public AccountConfig(
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) AccountType2 type,
            @JsonProperty(value = JSON_PROPERTY_OPERATOR, required = true)
                    PolicyOperator operator) {
        this.type = type;
        this.operator = operator;
    }

    public AccountConfig type(@jakarta.annotation.Nonnull AccountType2 type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AccountType2 getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull AccountType2 type) {
        this.type = type;
    }

    public AccountConfig subType(@jakarta.annotation.Nullable List<AccountIdentifier> subType) {
        this.subType = subType;
        return this;
    }

    public AccountConfig addSubTypeItem(AccountIdentifier subTypeItem) {
        if (this.subType == null) {
            this.subType = new ArrayList<>();
        }
        this.subType.add(subTypeItem);
        return this;
    }

    /**
     * Get subType
     *
     * @return subType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<AccountIdentifier> getSubType() {
        return subType;
    }

    @JsonProperty(JSON_PROPERTY_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubType(@jakarta.annotation.Nullable List<AccountIdentifier> subType) {
        this.subType = subType;
    }

    public AccountConfig ids(@jakarta.annotation.Nullable List<AccountIdentifier> ids) {
        this.ids = ids;
        return this;
    }

    public AccountConfig addIdsItem(AccountIdentifier idsItem) {
        if (this.ids == null) {
            this.ids = new ArrayList<>();
        }
        this.ids.add(idsItem);
        return this;
    }

    /**
     * Get ids
     *
     * @return ids
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<AccountIdentifier> getIds() {
        return ids;
    }

    @JsonProperty(JSON_PROPERTY_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIds(@jakarta.annotation.Nullable List<AccountIdentifier> ids) {
        this.ids = ids;
    }

    public AccountConfig operator(@jakarta.annotation.Nonnull PolicyOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get operator
     *
     * @return operator
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PolicyOperator getOperator() {
        return operator;
    }

    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOperator(@jakarta.annotation.Nonnull PolicyOperator operator) {
        this.operator = operator;
    }

    public AccountConfig matchFrom(@jakarta.annotation.Nullable MatchFromEnum matchFrom) {
        this.matchFrom = matchFrom;
        return this;
    }

    /**
     * Whether to match from account or source
     *
     * @return matchFrom
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MATCH_FROM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public MatchFromEnum getMatchFrom() {
        return matchFrom;
    }

    @JsonProperty(JSON_PROPERTY_MATCH_FROM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMatchFrom(@jakarta.annotation.Nullable MatchFromEnum matchFrom) {
        this.matchFrom = matchFrom;
    }

    /** Return true if this AccountConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountConfig accountConfig = (AccountConfig) o;
        return Objects.equals(this.type, accountConfig.type)
                && Objects.equals(this.subType, accountConfig.subType)
                && Objects.equals(this.ids, accountConfig.ids)
                && Objects.equals(this.operator, accountConfig.operator)
                && Objects.equals(this.matchFrom, accountConfig.matchFrom);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, subType, ids, operator, matchFrom);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountConfig {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
        sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("    matchFrom: ").append(toIndentedString(matchFrom)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `subType` to the URL query string
        if (getSubType() != null) {
            for (int i = 0; i < getSubType().size(); i++) {
                if (getSubType().get(i) != null) {
                    joiner.add(
                            getSubType()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%ssubType%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `ids` to the URL query string
        if (getIds() != null) {
            for (int i = 0; i < getIds().size(); i++) {
                if (getIds().get(i) != null) {
                    joiner.add(
                            getIds().get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sids%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `operator` to the URL query string
        if (getOperator() != null) {
            joiner.add(
                    String.format(
                            "%soperator%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOperator()))));
        }

        // add `matchFrom` to the URL query string
        if (getMatchFrom() != null) {
            joiner.add(
                    String.format(
                            "%smatchFrom%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getMatchFrom()))));
        }

        return joiner.toString();
    }
}
