/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** LBT (Lebanese Bank Transfer) payment information for Lebanese bank transfers */
@JsonPropertyOrder({
    LbtPaymentInfo.JSON_PROPERTY_RAIL,
    LbtPaymentInfo.JSON_PROPERTY_ADDRESSING_SYSTEM,
    LbtPaymentInfo.JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME,
    LbtPaymentInfo.JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME,
    LbtPaymentInfo.JSON_PROPERTY_COUNTRY,
    LbtPaymentInfo.JSON_PROPERTY_ACCOUNT_NUMBER,
    LbtPaymentInfo.JSON_PROPERTY_BANK_NAME,
    LbtPaymentInfo.JSON_PROPERTY_BANK_CODE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class LbtPaymentInfo {
    /** The payment rail type for Lebanese bank transfers */
    public enum RailEnum {
        LBT(String.valueOf("LBT"));

        private String value;

        RailEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RailEnum fromValue(String value) {
            for (RailEnum b : RailEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_RAIL = "rail";
    @jakarta.annotation.Nonnull private RailEnum rail;

    /** The addressing system used for Lebanese bank transfers (Bank Account Number) */
    public enum AddressingSystemEnum {
        BAN(String.valueOf("BAN"));

        private String value;

        AddressingSystemEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AddressingSystemEnum fromValue(String value) {
            for (AddressingSystemEnum b : AddressingSystemEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ADDRESSING_SYSTEM = "addressingSystem";
    @jakarta.annotation.Nonnull private AddressingSystemEnum addressingSystem;

    public static final String JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME = "accountHolderGivenName";
    @jakarta.annotation.Nonnull private String accountHolderGivenName;

    public static final String JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME = "accountHolderSurname";
    @jakarta.annotation.Nonnull private String accountHolderSurname;

    public static final String JSON_PROPERTY_COUNTRY = "country";
    @jakarta.annotation.Nonnull private String country;

    public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "accountNumber";
    @jakarta.annotation.Nonnull private String accountNumber;

    public static final String JSON_PROPERTY_BANK_NAME = "bankName";
    @jakarta.annotation.Nonnull private String bankName;

    public static final String JSON_PROPERTY_BANK_CODE = "bankCode";
    @jakarta.annotation.Nonnull private String bankCode;

    public LbtPaymentInfo() {}

    @JsonCreator
    public LbtPaymentInfo(
            @JsonProperty(value = JSON_PROPERTY_RAIL, required = true) RailEnum rail,
            @JsonProperty(value = JSON_PROPERTY_ADDRESSING_SYSTEM, required = true)
                    AddressingSystemEnum addressingSystem,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME, required = true)
                    String accountHolderGivenName,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME, required = true)
                    String accountHolderSurname,
            @JsonProperty(value = JSON_PROPERTY_COUNTRY, required = true) String country,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_NUMBER, required = true)
                    String accountNumber,
            @JsonProperty(value = JSON_PROPERTY_BANK_NAME, required = true) String bankName,
            @JsonProperty(value = JSON_PROPERTY_BANK_CODE, required = true) String bankCode) {
        this.rail = rail;
        this.addressingSystem = addressingSystem;
        this.accountHolderGivenName = accountHolderGivenName;
        this.accountHolderSurname = accountHolderSurname;
        this.country = country;
        this.accountNumber = accountNumber;
        this.bankName = bankName;
        this.bankCode = bankCode;
    }

    public LbtPaymentInfo rail(@jakarta.annotation.Nonnull RailEnum rail) {
        this.rail = rail;
        return this;
    }

    /**
     * The payment rail type for Lebanese bank transfers
     *
     * @return rail
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RAIL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public RailEnum getRail() {
        return rail;
    }

    @JsonProperty(JSON_PROPERTY_RAIL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRail(@jakarta.annotation.Nonnull RailEnum rail) {
        this.rail = rail;
    }

    public LbtPaymentInfo addressingSystem(
            @jakarta.annotation.Nonnull AddressingSystemEnum addressingSystem) {
        this.addressingSystem = addressingSystem;
        return this;
    }

    /**
     * The addressing system used for Lebanese bank transfers (Bank Account Number)
     *
     * @return addressingSystem
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESSING_SYSTEM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AddressingSystemEnum getAddressingSystem() {
        return addressingSystem;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESSING_SYSTEM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddressingSystem(
            @jakarta.annotation.Nonnull AddressingSystemEnum addressingSystem) {
        this.addressingSystem = addressingSystem;
    }

    public LbtPaymentInfo accountHolderGivenName(
            @jakarta.annotation.Nonnull String accountHolderGivenName) {
        this.accountHolderGivenName = accountHolderGivenName;
        return this;
    }

    /**
     * The given name (first name) of the account holder
     *
     * @return accountHolderGivenName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountHolderGivenName() {
        return accountHolderGivenName;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountHolderGivenName(
            @jakarta.annotation.Nonnull String accountHolderGivenName) {
        this.accountHolderGivenName = accountHolderGivenName;
    }

    public LbtPaymentInfo accountHolderSurname(
            @jakarta.annotation.Nonnull String accountHolderSurname) {
        this.accountHolderSurname = accountHolderSurname;
        return this;
    }

    /**
     * The surname (last name) of the account holder
     *
     * @return accountHolderSurname
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountHolderSurname() {
        return accountHolderSurname;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountHolderSurname(@jakarta.annotation.Nonnull String accountHolderSurname) {
        this.accountHolderSurname = accountHolderSurname;
    }

    public LbtPaymentInfo country(@jakarta.annotation.Nonnull String country) {
        this.country = country;
        return this;
    }

    /**
     * The country for the transfer (ISO 3166-1 alpha-2 code)
     *
     * @return country
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCountry() {
        return country;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCountry(@jakarta.annotation.Nonnull String country) {
        this.country = country;
    }

    public LbtPaymentInfo accountNumber(@jakarta.annotation.Nonnull String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The bank account number
     *
     * @return accountNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountNumber(@jakarta.annotation.Nonnull String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public LbtPaymentInfo bankName(@jakarta.annotation.Nonnull String bankName) {
        this.bankName = bankName;
        return this;
    }

    /**
     * The name of the bank
     *
     * @return bankName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankName() {
        return bankName;
    }

    @JsonProperty(JSON_PROPERTY_BANK_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankName(@jakarta.annotation.Nonnull String bankName) {
        this.bankName = bankName;
    }

    public LbtPaymentInfo bankCode(@jakarta.annotation.Nonnull String bankCode) {
        this.bankCode = bankCode;
        return this;
    }

    /**
     * The bank code or identifier
     *
     * @return bankCode
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankCode() {
        return bankCode;
    }

    @JsonProperty(JSON_PROPERTY_BANK_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankCode(@jakarta.annotation.Nonnull String bankCode) {
        this.bankCode = bankCode;
    }

    /** Return true if this LbtPaymentInfo object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LbtPaymentInfo lbtPaymentInfo = (LbtPaymentInfo) o;
        return Objects.equals(this.rail, lbtPaymentInfo.rail)
                && Objects.equals(this.addressingSystem, lbtPaymentInfo.addressingSystem)
                && Objects.equals(
                        this.accountHolderGivenName, lbtPaymentInfo.accountHolderGivenName)
                && Objects.equals(this.accountHolderSurname, lbtPaymentInfo.accountHolderSurname)
                && Objects.equals(this.country, lbtPaymentInfo.country)
                && Objects.equals(this.accountNumber, lbtPaymentInfo.accountNumber)
                && Objects.equals(this.bankName, lbtPaymentInfo.bankName)
                && Objects.equals(this.bankCode, lbtPaymentInfo.bankCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                rail,
                addressingSystem,
                accountHolderGivenName,
                accountHolderSurname,
                country,
                accountNumber,
                bankName,
                bankCode);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LbtPaymentInfo {\n");
        sb.append("    rail: ").append(toIndentedString(rail)).append("\n");
        sb.append("    addressingSystem: ").append(toIndentedString(addressingSystem)).append("\n");
        sb.append("    accountHolderGivenName: ")
                .append(toIndentedString(accountHolderGivenName))
                .append("\n");
        sb.append("    accountHolderSurname: ")
                .append(toIndentedString(accountHolderSurname))
                .append("\n");
        sb.append("    country: ").append(toIndentedString(country)).append("\n");
        sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
        sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
        sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `rail` to the URL query string
        if (getRail() != null) {
            joiner.add(
                    String.format(
                            "%srail%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRail()))));
        }

        // add `addressingSystem` to the URL query string
        if (getAddressingSystem() != null) {
            joiner.add(
                    String.format(
                            "%saddressingSystem%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddressingSystem()))));
        }

        // add `accountHolderGivenName` to the URL query string
        if (getAccountHolderGivenName() != null) {
            joiner.add(
                    String.format(
                            "%saccountHolderGivenName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getAccountHolderGivenName()))));
        }

        // add `accountHolderSurname` to the URL query string
        if (getAccountHolderSurname() != null) {
            joiner.add(
                    String.format(
                            "%saccountHolderSurname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getAccountHolderSurname()))));
        }

        // add `country` to the URL query string
        if (getCountry() != null) {
            joiner.add(
                    String.format(
                            "%scountry%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCountry()))));
        }

        // add `accountNumber` to the URL query string
        if (getAccountNumber() != null) {
            joiner.add(
                    String.format(
                            "%saccountNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAccountNumber()))));
        }

        // add `bankName` to the URL query string
        if (getBankName() != null) {
            joiner.add(
                    String.format(
                            "%sbankName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankName()))));
        }

        // add `bankCode` to the URL query string
        if (getBankCode() != null) {
            joiner.add(
                    String.format(
                            "%sbankCode%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankCode()))));
        }

        return joiner.toString();
    }
}
