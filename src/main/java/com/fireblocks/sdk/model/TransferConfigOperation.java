/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** TransferConfigOperation */
@JsonPropertyOrder({
    TransferConfigOperation.JSON_PROPERTY_OPERATION_ID,
    TransferConfigOperation.JSON_PROPERTY_TYPE,
    TransferConfigOperation.JSON_PROPERTY_PARAMS,
    TransferConfigOperation.JSON_PROPERTY_STATUS,
    TransferConfigOperation.JSON_PROPERTY_VALIDATION_FAILURE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransferConfigOperation {
    public static final String JSON_PROPERTY_OPERATION_ID = "operationId";
    private String operationId;

    public static final String JSON_PROPERTY_TYPE = "type";
    private TransferOperationType type;

    public static final String JSON_PROPERTY_PARAMS = "params";
    private TransferOperationConfigParams params;

    public static final String JSON_PROPERTY_STATUS = "status";
    private ConfigOperationStatus status;

    public static final String JSON_PROPERTY_VALIDATION_FAILURE = "validationFailure";
    private TransferValidationFailure validationFailure;

    public TransferConfigOperation() {}

    public TransferConfigOperation operationId(String operationId) {
        this.operationId = operationId;
        return this;
    }

    /**
     * Get operationId
     *
     * @return operationId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OPERATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOperationId() {
        return operationId;
    }

    @JsonProperty(JSON_PROPERTY_OPERATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOperationId(String operationId) {
        this.operationId = operationId;
    }

    public TransferConfigOperation type(TransferOperationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TransferOperationType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(TransferOperationType type) {
        this.type = type;
    }

    public TransferConfigOperation params(TransferOperationConfigParams params) {
        this.params = params;
        return this;
    }

    /**
     * Get params
     *
     * @return params
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PARAMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TransferOperationConfigParams getParams() {
        return params;
    }

    @JsonProperty(JSON_PROPERTY_PARAMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParams(TransferOperationConfigParams params) {
        this.params = params;
    }

    public TransferConfigOperation status(ConfigOperationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ConfigOperationStatus getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(ConfigOperationStatus status) {
        this.status = status;
    }

    public TransferConfigOperation validationFailure(TransferValidationFailure validationFailure) {
        this.validationFailure = validationFailure;
        return this;
    }

    /**
     * Get validationFailure
     *
     * @return validationFailure
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VALIDATION_FAILURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TransferValidationFailure getValidationFailure() {
        return validationFailure;
    }

    @JsonProperty(JSON_PROPERTY_VALIDATION_FAILURE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValidationFailure(TransferValidationFailure validationFailure) {
        this.validationFailure = validationFailure;
    }

    /** Return true if this TransferConfigOperation object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferConfigOperation transferConfigOperation = (TransferConfigOperation) o;
        return Objects.equals(this.operationId, transferConfigOperation.operationId)
                && Objects.equals(this.type, transferConfigOperation.type)
                && Objects.equals(this.params, transferConfigOperation.params)
                && Objects.equals(this.status, transferConfigOperation.status)
                && Objects.equals(
                        this.validationFailure, transferConfigOperation.validationFailure);
    }

    @Override
    public int hashCode() {
        return Objects.hash(operationId, type, params, status, validationFailure);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransferConfigOperation {\n");
        sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    params: ").append(toIndentedString(params)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    validationFailure: ")
                .append(toIndentedString(validationFailure))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `operationId` to the URL query string
        if (getOperationId() != null) {
            joiner.add(
                    String.format(
                            "%soperationId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getOperationId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `params` to the URL query string
        if (getParams() != null) {
            joiner.add(getParams().toUrlQueryString(prefix + "params" + suffix));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `validationFailure` to the URL query string
        if (getValidationFailure() != null) {
            joiner.add(
                    getValidationFailure().toUrlQueryString(prefix + "validationFailure" + suffix));
        }

        return joiner.toString();
    }
}
