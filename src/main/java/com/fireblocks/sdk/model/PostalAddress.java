/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** PostalAddress */
@JsonPropertyOrder({
    PostalAddress.JSON_PROPERTY_STREET_NAME,
    PostalAddress.JSON_PROPERTY_BUILDING_NUMBER,
    PostalAddress.JSON_PROPERTY_POSTAL_CODE,
    PostalAddress.JSON_PROPERTY_CITY,
    PostalAddress.JSON_PROPERTY_SUBDIVISION,
    PostalAddress.JSON_PROPERTY_DISTRICT,
    PostalAddress.JSON_PROPERTY_COUNTRY
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class PostalAddress {
    public static final String JSON_PROPERTY_STREET_NAME = "streetName";
    @jakarta.annotation.Nonnull private String streetName;

    public static final String JSON_PROPERTY_BUILDING_NUMBER = "buildingNumber";
    @jakarta.annotation.Nonnull private String buildingNumber;

    public static final String JSON_PROPERTY_POSTAL_CODE = "postalCode";
    @jakarta.annotation.Nonnull private String postalCode;

    public static final String JSON_PROPERTY_CITY = "city";
    @jakarta.annotation.Nonnull private String city;

    public static final String JSON_PROPERTY_SUBDIVISION = "subdivision";
    @jakarta.annotation.Nonnull private String subdivision;

    public static final String JSON_PROPERTY_DISTRICT = "district";
    @jakarta.annotation.Nonnull private String district;

    public static final String JSON_PROPERTY_COUNTRY = "country";
    @jakarta.annotation.Nonnull private String country;

    public PostalAddress() {}

    @JsonCreator
    public PostalAddress(
            @JsonProperty(value = JSON_PROPERTY_STREET_NAME, required = true) String streetName,
            @JsonProperty(value = JSON_PROPERTY_BUILDING_NUMBER, required = true)
                    String buildingNumber,
            @JsonProperty(value = JSON_PROPERTY_POSTAL_CODE, required = true) String postalCode,
            @JsonProperty(value = JSON_PROPERTY_CITY, required = true) String city,
            @JsonProperty(value = JSON_PROPERTY_SUBDIVISION, required = true) String subdivision,
            @JsonProperty(value = JSON_PROPERTY_DISTRICT, required = true) String district,
            @JsonProperty(value = JSON_PROPERTY_COUNTRY, required = true) String country) {
        this.streetName = streetName;
        this.buildingNumber = buildingNumber;
        this.postalCode = postalCode;
        this.city = city;
        this.subdivision = subdivision;
        this.district = district;
        this.country = country;
    }

    public PostalAddress streetName(@jakarta.annotation.Nonnull String streetName) {
        this.streetName = streetName;
        return this;
    }

    /**
     * Get streetName
     *
     * @return streetName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STREET_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getStreetName() {
        return streetName;
    }

    @JsonProperty(JSON_PROPERTY_STREET_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStreetName(@jakarta.annotation.Nonnull String streetName) {
        this.streetName = streetName;
    }

    public PostalAddress buildingNumber(@jakarta.annotation.Nonnull String buildingNumber) {
        this.buildingNumber = buildingNumber;
        return this;
    }

    /**
     * Get buildingNumber
     *
     * @return buildingNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BUILDING_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBuildingNumber() {
        return buildingNumber;
    }

    @JsonProperty(JSON_PROPERTY_BUILDING_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBuildingNumber(@jakarta.annotation.Nonnull String buildingNumber) {
        this.buildingNumber = buildingNumber;
    }

    public PostalAddress postalCode(@jakarta.annotation.Nonnull String postalCode) {
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Get postalCode
     *
     * @return postalCode
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getPostalCode() {
        return postalCode;
    }

    @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPostalCode(@jakarta.annotation.Nonnull String postalCode) {
        this.postalCode = postalCode;
    }

    public PostalAddress city(@jakarta.annotation.Nonnull String city) {
        this.city = city;
        return this;
    }

    /**
     * Get city
     *
     * @return city
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCity() {
        return city;
    }

    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCity(@jakarta.annotation.Nonnull String city) {
        this.city = city;
    }

    public PostalAddress subdivision(@jakarta.annotation.Nonnull String subdivision) {
        this.subdivision = subdivision;
        return this;
    }

    /**
     * Get subdivision
     *
     * @return subdivision
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SUBDIVISION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSubdivision() {
        return subdivision;
    }

    @JsonProperty(JSON_PROPERTY_SUBDIVISION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSubdivision(@jakarta.annotation.Nonnull String subdivision) {
        this.subdivision = subdivision;
    }

    public PostalAddress district(@jakarta.annotation.Nonnull String district) {
        this.district = district;
        return this;
    }

    /**
     * Get district
     *
     * @return district
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DISTRICT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getDistrict() {
        return district;
    }

    @JsonProperty(JSON_PROPERTY_DISTRICT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDistrict(@jakarta.annotation.Nonnull String district) {
        this.district = district;
    }

    public PostalAddress country(@jakarta.annotation.Nonnull String country) {
        this.country = country;
        return this;
    }

    /**
     * Get country
     *
     * @return country
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCountry() {
        return country;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCountry(@jakarta.annotation.Nonnull String country) {
        this.country = country;
    }

    /** Return true if this PostalAddress object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostalAddress postalAddress = (PostalAddress) o;
        return Objects.equals(this.streetName, postalAddress.streetName)
                && Objects.equals(this.buildingNumber, postalAddress.buildingNumber)
                && Objects.equals(this.postalCode, postalAddress.postalCode)
                && Objects.equals(this.city, postalAddress.city)
                && Objects.equals(this.subdivision, postalAddress.subdivision)
                && Objects.equals(this.district, postalAddress.district)
                && Objects.equals(this.country, postalAddress.country);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                streetName, buildingNumber, postalCode, city, subdivision, district, country);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostalAddress {\n");
        sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
        sb.append("    buildingNumber: ").append(toIndentedString(buildingNumber)).append("\n");
        sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
        sb.append("    city: ").append(toIndentedString(city)).append("\n");
        sb.append("    subdivision: ").append(toIndentedString(subdivision)).append("\n");
        sb.append("    district: ").append(toIndentedString(district)).append("\n");
        sb.append("    country: ").append(toIndentedString(country)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `streetName` to the URL query string
        if (getStreetName() != null) {
            joiner.add(
                    String.format(
                            "%sstreetName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStreetName()))));
        }

        // add `buildingNumber` to the URL query string
        if (getBuildingNumber() != null) {
            joiner.add(
                    String.format(
                            "%sbuildingNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBuildingNumber()))));
        }

        // add `postalCode` to the URL query string
        if (getPostalCode() != null) {
            joiner.add(
                    String.format(
                            "%spostalCode%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPostalCode()))));
        }

        // add `city` to the URL query string
        if (getCity() != null) {
            joiner.add(
                    String.format(
                            "%scity%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCity()))));
        }

        // add `subdivision` to the URL query string
        if (getSubdivision() != null) {
            joiner.add(
                    String.format(
                            "%ssubdivision%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSubdivision()))));
        }

        // add `district` to the URL query string
        if (getDistrict() != null) {
            joiner.add(
                    String.format(
                            "%sdistrict%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDistrict()))));
        }

        // add `country` to the URL query string
        if (getCountry() != null) {
            joiner.add(
                    String.format(
                            "%scountry%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCountry()))));
        }

        return joiner.toString();
    }
}
