/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** The rule validation result */
@JsonPropertyOrder({
    LegacyPolicyRuleCheckResult.JSON_PROPERTY_INDEX,
    LegacyPolicyRuleCheckResult.JSON_PROPERTY_STATUS,
    LegacyPolicyRuleCheckResult.JSON_PROPERTY_ERRORS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class LegacyPolicyRuleCheckResult {
    public static final String JSON_PROPERTY_INDEX = "index";
    @jakarta.annotation.Nonnull private BigDecimal index;

    /** Validation status */
    public enum StatusEnum {
        OK(String.valueOf("ok")),

        FAILURE(String.valueOf("failure"));

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private StatusEnum status;

    public static final String JSON_PROPERTY_ERRORS = "errors";
    @jakarta.annotation.Nonnull private List<LegacyPolicyRuleError> errors = new ArrayList<>();

    public LegacyPolicyRuleCheckResult() {}

    @JsonCreator
    public LegacyPolicyRuleCheckResult(
            @JsonProperty(value = JSON_PROPERTY_INDEX, required = true) BigDecimal index,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true) StatusEnum status,
            @JsonProperty(value = JSON_PROPERTY_ERRORS, required = true)
                    List<LegacyPolicyRuleError> errors) {
        this.index = index;
        this.status = status;
        this.errors = errors;
    }

    public LegacyPolicyRuleCheckResult index(@jakarta.annotation.Nonnull BigDecimal index) {
        this.index = index;
        return this;
    }

    /**
     * Rule index number in the policy
     *
     * @return index
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getIndex() {
        return index;
    }

    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIndex(@jakarta.annotation.Nonnull BigDecimal index) {
        this.index = index;
    }

    public LegacyPolicyRuleCheckResult status(@jakarta.annotation.Nonnull StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Validation status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
        this.status = status;
    }

    public LegacyPolicyRuleCheckResult errors(
            @jakarta.annotation.Nonnull List<LegacyPolicyRuleError> errors) {
        this.errors = errors;
        return this;
    }

    public LegacyPolicyRuleCheckResult addErrorsItem(LegacyPolicyRuleError errorsItem) {
        if (this.errors == null) {
            this.errors = new ArrayList<>();
        }
        this.errors.add(errorsItem);
        return this;
    }

    /**
     * A set of rule validation error objects
     *
     * @return errors
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<LegacyPolicyRuleError> getErrors() {
        return errors;
    }

    @JsonProperty(JSON_PROPERTY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setErrors(@jakarta.annotation.Nonnull List<LegacyPolicyRuleError> errors) {
        this.errors = errors;
    }

    /** Return true if this LegacyPolicyRuleCheckResult object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LegacyPolicyRuleCheckResult legacyPolicyRuleCheckResult = (LegacyPolicyRuleCheckResult) o;
        return Objects.equals(this.index, legacyPolicyRuleCheckResult.index)
                && Objects.equals(this.status, legacyPolicyRuleCheckResult.status)
                && Objects.equals(this.errors, legacyPolicyRuleCheckResult.errors);
    }

    @Override
    public int hashCode() {
        return Objects.hash(index, status, errors);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LegacyPolicyRuleCheckResult {\n");
        sb.append("    index: ").append(toIndentedString(index)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `index` to the URL query string
        if (getIndex() != null) {
            joiner.add(
                    String.format(
                            "%sindex%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getIndex()))));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `errors` to the URL query string
        if (getErrors() != null) {
            for (int i = 0; i < getErrors().size(); i++) {
                if (getErrors().get(i) != null) {
                    joiner.add(
                            getErrors()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%serrors%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
