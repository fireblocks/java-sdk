/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fireblocks.sdk.JSON;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
@JsonDeserialize(using = AccessType.AccessTypeDeserializer.class)
@JsonSerialize(using = AccessType.AccessTypeSerializer.class)
public class AccessType extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccessType.class.getName());

    public static class AccessTypeSerializer extends StdSerializer<AccessType> {
        public AccessTypeSerializer(Class<AccessType> t) {
            super(t);
        }

        public AccessTypeSerializer() {
            this(null);
        }

        @Override
        public void serialize(AccessType value, JsonGenerator jgen, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AccessTypeDeserializer extends StdDeserializer<AccessType> {
        public AccessTypeDeserializer() {
            this(AccessType.class);
        }

        public AccessTypeDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AccessType deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize AccountAccess
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (AccountAccess.class.equals(Integer.class)
                        || AccountAccess.class.equals(Long.class)
                        || AccountAccess.class.equals(Float.class)
                        || AccountAccess.class.equals(Double.class)
                        || AccountAccess.class.equals(Boolean.class)
                        || AccountAccess.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((AccountAccess.class.equals(Integer.class)
                                                || AccountAccess.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((AccountAccess.class.equals(Float.class)
                                                || AccountAccess.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (AccountAccess.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (AccountAccess.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AccountAccess.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AccountAccess'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AccountAccess'", e);
            }

            // deserialize DirectAccess
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (DirectAccess.class.equals(Integer.class)
                        || DirectAccess.class.equals(Long.class)
                        || DirectAccess.class.equals(Float.class)
                        || DirectAccess.class.equals(Double.class)
                        || DirectAccess.class.equals(Boolean.class)
                        || DirectAccess.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((DirectAccess.class.equals(Integer.class)
                                                || DirectAccess.class.equals(Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((DirectAccess.class.equals(Float.class)
                                                || DirectAccess.class.equals(Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (DirectAccess.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (DirectAccess.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(DirectAccess.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'DirectAccess'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'DirectAccess'", e);
            }

            if (match == 1) {
                AccessType ret = new AccessType();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(
                    String.format(
                            "Failed deserialization for AccessType: %d classes match result,"
                                    + " expected 1",
                            match));
        }

        /** Handle deserialization of the 'null' value. */
        @Override
        public AccessType getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "AccessType cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public AccessType() {
        super("oneOf", Boolean.FALSE);
    }

    public AccessType(AccountAccess o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessType(DirectAccess o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccountAccess", AccountAccess.class);
        schemas.put("DirectAccess", DirectAccess.class);
        JSON.registerDescendants(AccessType.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("PROVIDER", DirectAccess.class);
        mappings.put("PROVIDER_ACCOUNT", AccountAccess.class);
        mappings.put("AccountAccess", AccountAccess.class);
        mappings.put("DirectAccess", DirectAccess.class);
        mappings.put("AccessType", AccessType.class);
        JSON.registerDiscriminator(AccessType.class, "type", mappings);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccessType.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: AccountAccess, DirectAccess
     *
     * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be
     * a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AccountAccess.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(DirectAccess.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccountAccess, DirectAccess");
    }

    /**
     * Get the actual instance, which can be the following: AccountAccess, DirectAccess
     *
     * @return The actual instance (AccountAccess, DirectAccess)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccountAccess`. If the actual instance is not `AccountAccess`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountAccess`
     * @throws ClassCastException if the instance is not `AccountAccess`
     */
    public AccountAccess getAccountAccess() throws ClassCastException {
        return (AccountAccess) super.getActualInstance();
    }

    /**
     * Get the actual instance of `DirectAccess`. If the actual instance is not `DirectAccess`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `DirectAccess`
     * @throws ClassCastException if the instance is not `DirectAccess`
     */
    public DirectAccess getDirectAccess() throws ClassCastException {
        return (DirectAccess) super.getActualInstance();
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        if (getActualInstance() instanceof AccountAccess) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((AccountAccess) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_0" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof DirectAccess) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((DirectAccess) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_1" + suffix));
            }
            return joiner.toString();
        }
        return null;
    }
}
