/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fireblocks.sdk.JSON;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
@JsonDeserialize(using = CreateConnectionRequest.CreateConnectionRequestDeserializer.class)
@JsonSerialize(using = CreateConnectionRequest.CreateConnectionRequestSerializer.class)
public class CreateConnectionRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateConnectionRequest.class.getName());

    public static class CreateConnectionRequestSerializer
            extends StdSerializer<CreateConnectionRequest> {
        public CreateConnectionRequestSerializer(Class<CreateConnectionRequest> t) {
            super(t);
        }

        public CreateConnectionRequestSerializer() {
            this(null);
        }

        @Override
        public void serialize(
                CreateConnectionRequest value, JsonGenerator jgen, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class CreateConnectionRequestDeserializer
            extends StdDeserializer<CreateConnectionRequest> {
        public CreateConnectionRequestDeserializer() {
            this(CreateConnectionRequest.class);
        }

        public CreateConnectionRequestDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public CreateConnectionRequest deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize CreateNcwConnectionRequest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (CreateNcwConnectionRequest.class.equals(Integer.class)
                        || CreateNcwConnectionRequest.class.equals(Long.class)
                        || CreateNcwConnectionRequest.class.equals(Float.class)
                        || CreateNcwConnectionRequest.class.equals(Double.class)
                        || CreateNcwConnectionRequest.class.equals(Boolean.class)
                        || CreateNcwConnectionRequest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((CreateNcwConnectionRequest.class.equals(Integer.class)
                                                || CreateNcwConnectionRequest.class.equals(
                                                        Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((CreateNcwConnectionRequest.class.equals(Float.class)
                                                || CreateNcwConnectionRequest.class.equals(
                                                        Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (CreateNcwConnectionRequest.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (CreateNcwConnectionRequest.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized =
                            tree.traverse(jp.getCodec())
                                    .readValueAs(CreateNcwConnectionRequest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'CreateNcwConnectionRequest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(
                        Level.FINER,
                        "Input data does not match schema 'CreateNcwConnectionRequest'",
                        e);
            }

            // deserialize CreateVaultAccountConnectionRequest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (CreateVaultAccountConnectionRequest.class.equals(Integer.class)
                        || CreateVaultAccountConnectionRequest.class.equals(Long.class)
                        || CreateVaultAccountConnectionRequest.class.equals(Float.class)
                        || CreateVaultAccountConnectionRequest.class.equals(Double.class)
                        || CreateVaultAccountConnectionRequest.class.equals(Boolean.class)
                        || CreateVaultAccountConnectionRequest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |=
                                ((CreateVaultAccountConnectionRequest.class.equals(Integer.class)
                                                || CreateVaultAccountConnectionRequest.class.equals(
                                                        Long.class))
                                        && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |=
                                ((CreateVaultAccountConnectionRequest.class.equals(Float.class)
                                                || CreateVaultAccountConnectionRequest.class.equals(
                                                        Double.class))
                                        && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |=
                                (CreateVaultAccountConnectionRequest.class.equals(Boolean.class)
                                        && (token == JsonToken.VALUE_FALSE
                                                || token == JsonToken.VALUE_TRUE));
                        attemptParsing |=
                                (CreateVaultAccountConnectionRequest.class.equals(String.class)
                                        && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized =
                            tree.traverse(jp.getCodec())
                                    .readValueAs(CreateVaultAccountConnectionRequest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(
                            Level.FINER,
                            "Input data matches schema 'CreateVaultAccountConnectionRequest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(
                        Level.FINER,
                        "Input data does not match schema 'CreateVaultAccountConnectionRequest'",
                        e);
            }

            if (match == 1) {
                CreateConnectionRequest ret = new CreateConnectionRequest();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(
                    String.format(
                            "Failed deserialization for CreateConnectionRequest: %d classes match"
                                    + " result, expected 1",
                            match));
        }

        /** Handle deserialization of the 'null' value. */
        @Override
        public CreateConnectionRequest getNullValue(DeserializationContext ctxt)
                throws JsonMappingException {
            throw new JsonMappingException(
                    ctxt.getParser(), "CreateConnectionRequest cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public CreateConnectionRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateConnectionRequest(CreateNcwConnectionRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateConnectionRequest(CreateVaultAccountConnectionRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreateNcwConnectionRequest", CreateNcwConnectionRequest.class);
        schemas.put(
                "CreateVaultAccountConnectionRequest", CreateVaultAccountConnectionRequest.class);
        JSON.registerDescendants(
                CreateConnectionRequest.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateConnectionRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: CreateNcwConnectionRequest,
     * CreateVaultAccountConnectionRequest
     *
     * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be
     * a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(
                CreateNcwConnectionRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(
                CreateVaultAccountConnectionRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be CreateNcwConnectionRequest,"
                        + " CreateVaultAccountConnectionRequest");
    }

    /**
     * Get the actual instance, which can be the following: CreateNcwConnectionRequest,
     * CreateVaultAccountConnectionRequest
     *
     * @return The actual instance (CreateNcwConnectionRequest, CreateVaultAccountConnectionRequest)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateNcwConnectionRequest`. If the actual instance is not
     * `CreateNcwConnectionRequest`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateNcwConnectionRequest`
     * @throws ClassCastException if the instance is not `CreateNcwConnectionRequest`
     */
    public CreateNcwConnectionRequest getCreateNcwConnectionRequest() throws ClassCastException {
        return (CreateNcwConnectionRequest) super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateVaultAccountConnectionRequest`. If the actual instance is
     * not `CreateVaultAccountConnectionRequest`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateVaultAccountConnectionRequest`
     * @throws ClassCastException if the instance is not `CreateVaultAccountConnectionRequest`
     */
    public CreateVaultAccountConnectionRequest getCreateVaultAccountConnectionRequest()
            throws ClassCastException {
        return (CreateVaultAccountConnectionRequest) super.getActualInstance();
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        if (getActualInstance() instanceof CreateVaultAccountConnectionRequest) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((CreateVaultAccountConnectionRequest) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_0" + suffix));
            }
            return joiner.toString();
        }
        if (getActualInstance() instanceof CreateNcwConnectionRequest) {
            if (getActualInstance() != null) {
                joiner.add(
                        ((CreateNcwConnectionRequest) getActualInstance())
                                .toUrlQueryString(prefix + "one_of_1" + suffix));
            }
            return joiner.toString();
        }
        return null;
    }
}
