/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** SmartTransferApproveTerm */
@JsonPropertyOrder({
    SmartTransferApproveTerm.JSON_PROPERTY_ASSET,
    SmartTransferApproveTerm.JSON_PROPERTY_AMOUNT,
    SmartTransferApproveTerm.JSON_PROPERTY_SRC_ID,
    SmartTransferApproveTerm.JSON_PROPERTY_FEE,
    SmartTransferApproveTerm.JSON_PROPERTY_FEE_LEVEL,
    SmartTransferApproveTerm.JSON_PROPERTY_NOTE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class SmartTransferApproveTerm {
    public static final String JSON_PROPERTY_ASSET = "asset";
    @jakarta.annotation.Nonnull private String asset;

    public static final String JSON_PROPERTY_AMOUNT = "amount";
    @jakarta.annotation.Nonnull private String amount;

    public static final String JSON_PROPERTY_SRC_ID = "srcId";
    @jakarta.annotation.Nonnull private String srcId;

    public static final String JSON_PROPERTY_FEE = "fee";
    @jakarta.annotation.Nullable private String fee;

    /** Transaction fee level. */
    public enum FeeLevelEnum {
        LOW(String.valueOf("LOW")),

        MEDIUM(String.valueOf("MEDIUM")),

        HIGH(String.valueOf("HIGH"));

        private String value;

        FeeLevelEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FeeLevelEnum fromValue(String value) {
            for (FeeLevelEnum b : FeeLevelEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_FEE_LEVEL = "feeLevel";
    @jakarta.annotation.Nullable private FeeLevelEnum feeLevel;

    public static final String JSON_PROPERTY_NOTE = "note";
    @jakarta.annotation.Nullable private String note;

    public SmartTransferApproveTerm() {}

    @JsonCreator
    public SmartTransferApproveTerm(
            @JsonProperty(value = JSON_PROPERTY_ASSET, required = true) String asset,
            @JsonProperty(value = JSON_PROPERTY_AMOUNT, required = true) String amount,
            @JsonProperty(value = JSON_PROPERTY_SRC_ID, required = true) String srcId) {
        this.asset = asset;
        this.amount = amount;
        this.srcId = srcId;
    }

    public SmartTransferApproveTerm asset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Asset name
     *
     * @return asset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAsset() {
        return asset;
    }

    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAsset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
    }

    public SmartTransferApproveTerm amount(@jakarta.annotation.Nonnull String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Amount
     *
     * @return amount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(@jakarta.annotation.Nonnull String amount) {
        this.amount = amount;
    }

    public SmartTransferApproveTerm srcId(@jakarta.annotation.Nonnull String srcId) {
        this.srcId = srcId;
        return this;
    }

    /**
     * Id of the vault that is used as the source of the asset.
     *
     * @return srcId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SRC_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSrcId() {
        return srcId;
    }

    @JsonProperty(JSON_PROPERTY_SRC_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSrcId(@jakarta.annotation.Nonnull String srcId) {
        this.srcId = srcId;
    }

    public SmartTransferApproveTerm fee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Transaction fee
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFee() {
        return fee;
    }

    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public SmartTransferApproveTerm feeLevel(@jakarta.annotation.Nullable FeeLevelEnum feeLevel) {
        this.feeLevel = feeLevel;
        return this;
    }

    /**
     * Transaction fee level.
     *
     * @return feeLevel
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeeLevelEnum getFeeLevel() {
        return feeLevel;
    }

    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeeLevel(@jakarta.annotation.Nullable FeeLevelEnum feeLevel) {
        this.feeLevel = feeLevel;
    }

    public SmartTransferApproveTerm note(@jakarta.annotation.Nullable String note) {
        this.note = note;
        return this;
    }

    /**
     * Transaction note
     *
     * @return note
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNote() {
        return note;
    }

    @JsonProperty(JSON_PROPERTY_NOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNote(@jakarta.annotation.Nullable String note) {
        this.note = note;
    }

    /** Return true if this SmartTransferApproveTerm object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SmartTransferApproveTerm smartTransferApproveTerm = (SmartTransferApproveTerm) o;
        return Objects.equals(this.asset, smartTransferApproveTerm.asset)
                && Objects.equals(this.amount, smartTransferApproveTerm.amount)
                && Objects.equals(this.srcId, smartTransferApproveTerm.srcId)
                && Objects.equals(this.fee, smartTransferApproveTerm.fee)
                && Objects.equals(this.feeLevel, smartTransferApproveTerm.feeLevel)
                && Objects.equals(this.note, smartTransferApproveTerm.note);
    }

    @Override
    public int hashCode() {
        return Objects.hash(asset, amount, srcId, fee, feeLevel, note);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SmartTransferApproveTerm {\n");
        sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    srcId: ").append(toIndentedString(srcId)).append("\n");
        sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("    feeLevel: ").append(toIndentedString(feeLevel)).append("\n");
        sb.append("    note: ").append(toIndentedString(note)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `asset` to the URL query string
        if (getAsset() != null) {
            joiner.add(
                    String.format(
                            "%sasset%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAsset()))));
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(
                    String.format(
                            "%samount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAmount()))));
        }

        // add `srcId` to the URL query string
        if (getSrcId() != null) {
            joiner.add(
                    String.format(
                            "%ssrcId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSrcId()))));
        }

        // add `fee` to the URL query string
        if (getFee() != null) {
            joiner.add(
                    String.format(
                            "%sfee%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFee()))));
        }

        // add `feeLevel` to the URL query string
        if (getFeeLevel() != null) {
            joiner.add(
                    String.format(
                            "%sfeeLevel%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFeeLevel()))));
        }

        // add `note` to the URL query string
        if (getNote() != null) {
            joiner.add(
                    String.format(
                            "%snote%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getNote()))));
        }

        return joiner.toString();
    }
}
