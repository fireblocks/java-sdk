/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.StringJoiner;

/** ResendFailedNotificationsJobStatusResponse */
@JsonPropertyOrder({
    ResendFailedNotificationsJobStatusResponse.JSON_PROPERTY_JOB_ID,
    ResendFailedNotificationsJobStatusResponse.JSON_PROPERTY_STATUS,
    ResendFailedNotificationsJobStatusResponse.JSON_PROPERTY_PROCESSED,
    ResendFailedNotificationsJobStatusResponse.JSON_PROPERTY_TOTAL
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ResendFailedNotificationsJobStatusResponse {
    public static final String JSON_PROPERTY_JOB_ID = "jobId";
    @jakarta.annotation.Nonnull private String jobId;

    /** Bulk resend job status */
    public enum StatusEnum {
        QUEUED(String.valueOf("QUEUED")),

        IN_PROGRESS(String.valueOf("IN_PROGRESS")),

        COMPLETED(String.valueOf("COMPLETED")),

        FAILED(String.valueOf("FAILED"));

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private StatusEnum status;

    public static final String JSON_PROPERTY_PROCESSED = "processed";
    @jakarta.annotation.Nonnull private BigDecimal processed;

    public static final String JSON_PROPERTY_TOTAL = "total";
    @jakarta.annotation.Nonnull private BigDecimal total;

    public ResendFailedNotificationsJobStatusResponse() {}

    @JsonCreator
    public ResendFailedNotificationsJobStatusResponse(
            @JsonProperty(value = JSON_PROPERTY_JOB_ID, required = true) String jobId,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true) StatusEnum status,
            @JsonProperty(value = JSON_PROPERTY_PROCESSED, required = true) BigDecimal processed,
            @JsonProperty(value = JSON_PROPERTY_TOTAL, required = true) BigDecimal total) {
        this.jobId = jobId;
        this.status = status;
        this.processed = processed;
        this.total = total;
    }

    public ResendFailedNotificationsJobStatusResponse jobId(
            @jakarta.annotation.Nonnull String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Bulk resend job ID
     *
     * @return jobId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_JOB_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getJobId() {
        return jobId;
    }

    @JsonProperty(JSON_PROPERTY_JOB_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setJobId(@jakarta.annotation.Nonnull String jobId) {
        this.jobId = jobId;
    }

    public ResendFailedNotificationsJobStatusResponse status(
            @jakarta.annotation.Nonnull StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Bulk resend job status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
        this.status = status;
    }

    public ResendFailedNotificationsJobStatusResponse processed(
            @jakarta.annotation.Nonnull BigDecimal processed) {
        this.processed = processed;
        return this;
    }

    /**
     * Number of notifications processed
     *
     * @return processed
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROCESSED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getProcessed() {
        return processed;
    }

    @JsonProperty(JSON_PROPERTY_PROCESSED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProcessed(@jakarta.annotation.Nonnull BigDecimal processed) {
        this.processed = processed;
    }

    public ResendFailedNotificationsJobStatusResponse total(
            @jakarta.annotation.Nonnull BigDecimal total) {
        this.total = total;
        return this;
    }

    /**
     * Total number of notifications to process
     *
     * @return total
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getTotal() {
        return total;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotal(@jakarta.annotation.Nonnull BigDecimal total) {
        this.total = total;
    }

    /** Return true if this ResendFailedNotificationsJobStatusResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResendFailedNotificationsJobStatusResponse resendFailedNotificationsJobStatusResponse =
                (ResendFailedNotificationsJobStatusResponse) o;
        return Objects.equals(this.jobId, resendFailedNotificationsJobStatusResponse.jobId)
                && Objects.equals(this.status, resendFailedNotificationsJobStatusResponse.status)
                && Objects.equals(
                        this.processed, resendFailedNotificationsJobStatusResponse.processed)
                && Objects.equals(this.total, resendFailedNotificationsJobStatusResponse.total);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jobId, status, processed, total);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ResendFailedNotificationsJobStatusResponse {\n");
        sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `jobId` to the URL query string
        if (getJobId() != null) {
            joiner.add(
                    String.format(
                            "%sjobId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getJobId()))));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `processed` to the URL query string
        if (getProcessed() != null) {
            joiner.add(
                    String.format(
                            "%sprocessed%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getProcessed()))));
        }

        // add `total` to the URL query string
        if (getTotal() != null) {
            joiner.add(
                    String.format(
                            "%stotal%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTotal()))));
        }

        return joiner.toString();
    }
}
