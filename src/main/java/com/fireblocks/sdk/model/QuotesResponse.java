/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** QuotesResponse */
@JsonPropertyOrder({QuotesResponse.JSON_PROPERTY_QUOTES})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class QuotesResponse {
    public static final String JSON_PROPERTY_QUOTES = "quotes";
    @jakarta.annotation.Nullable private List<Quote> quotes;

    public QuotesResponse() {}

    public QuotesResponse quotes(@jakarta.annotation.Nullable List<Quote> quotes) {
        this.quotes = quotes;
        return this;
    }

    public QuotesResponse addQuotesItem(Quote quotesItem) {
        if (this.quotes == null) {
            this.quotes = new ArrayList<>();
        }
        this.quotes.add(quotesItem);
        return this;
    }

    /**
     * Get quotes
     *
     * @return quotes
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUOTES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Quote> getQuotes() {
        return quotes;
    }

    @JsonProperty(JSON_PROPERTY_QUOTES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuotes(@jakarta.annotation.Nullable List<Quote> quotes) {
        this.quotes = quotes;
    }

    /** Return true if this QuotesResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuotesResponse quotesResponse = (QuotesResponse) o;
        return Objects.equals(this.quotes, quotesResponse.quotes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(quotes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuotesResponse {\n");
        sb.append("    quotes: ").append(toIndentedString(quotes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `quotes` to the URL query string
        if (getQuotes() != null) {
            for (int i = 0; i < getQuotes().size(); i++) {
                if (getQuotes().get(i) != null) {
                    joiner.add(
                            getQuotes()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%squotes%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
