/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * * EXCHANGE - A third-party exchange account connected to your workspace * UNMANAGED - A unmanaged
 * wallet outside of Fireblocks workspace * VAULT - An account in your Fireblocks Vault *
 * NETWORK_CONNECTION - A connection in your Fireblocks network * COMPOUND - (deprecated) An asset
 * retrieved by using the Compound DeFI protocol * FIAT_ACCOUNT - A third-party fiat account
 * connected to your workspace * ONE_TIME_ADDRESS - A non-whitelisted asset from your Fireblocks
 * Workspace * \&quot;*\&quot; - All types
 */
public enum PolicySrcOrDestType {
    EXCHANGE("EXCHANGE"),

    UNMANAGED("UNMANAGED"),

    VAULT("VAULT"),

    NETWORK_CONNECTION("NETWORK_CONNECTION"),

    COMPOUND("COMPOUND"),

    FIAT_ACCOUNT("FIAT_ACCOUNT"),

    ONE_TIME_ADDRESS("ONE_TIME_ADDRESS"),

    STAR("*");

    private String value;

    PolicySrcOrDestType(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    @JsonCreator
    public static PolicySrcOrDestType fromValue(String value) {
        for (PolicySrcOrDestType b : PolicySrcOrDestType.values()) {
            if (b.value.equals(value)) {
                return b;
            }
        }
        throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        if (prefix == null) {
            prefix = "";
        }

        return String.format("%s=%s", prefix, this.toString());
    }
}
