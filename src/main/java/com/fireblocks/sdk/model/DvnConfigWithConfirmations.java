/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** DvnConfigWithConfirmations */
@JsonPropertyOrder({
    DvnConfigWithConfirmations.JSON_PROPERTY_DVN_ADDRESSES,
    DvnConfigWithConfirmations.JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES,
    DvnConfigWithConfirmations.JSON_PROPERTY_OPTIONAL_THRESHOLD,
    DvnConfigWithConfirmations.JSON_PROPERTY_CONFIRMATIONS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class DvnConfigWithConfirmations {
    public static final String JSON_PROPERTY_DVN_ADDRESSES = "dvnAddresses";
    @jakarta.annotation.Nonnull private List<String> dvnAddresses;

    public static final String JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES = "optionalDVNAddresses";
    @jakarta.annotation.Nullable private List<String> optionalDVNAddresses;

    public static final String JSON_PROPERTY_OPTIONAL_THRESHOLD = "optionalThreshold";
    @jakarta.annotation.Nonnull private BigDecimal optionalThreshold;

    public static final String JSON_PROPERTY_CONFIRMATIONS = "confirmations";
    @jakarta.annotation.Nonnull private BigDecimal confirmations;

    public DvnConfigWithConfirmations() {}

    @JsonCreator
    public DvnConfigWithConfirmations(
            @JsonProperty(value = JSON_PROPERTY_DVN_ADDRESSES, required = true)
                    List<String> dvnAddresses,
            @JsonProperty(value = JSON_PROPERTY_OPTIONAL_THRESHOLD, required = true)
                    BigDecimal optionalThreshold,
            @JsonProperty(value = JSON_PROPERTY_CONFIRMATIONS, required = true)
                    BigDecimal confirmations) {
        this.dvnAddresses = dvnAddresses;
        this.optionalThreshold = optionalThreshold;
        this.confirmations = confirmations;
    }

    public DvnConfigWithConfirmations dvnAddresses(
            @jakarta.annotation.Nonnull List<String> dvnAddresses) {
        this.dvnAddresses = dvnAddresses;
        return this;
    }

    public DvnConfigWithConfirmations addDvnAddressesItem(String dvnAddressesItem) {
        if (this.dvnAddresses == null) {
            this.dvnAddresses = new ArrayList<>();
        }
        this.dvnAddresses.add(dvnAddressesItem);
        return this;
    }

    /**
     * Array of required DVN Ethereum addresses that sign ULN messages.
     *
     * @return dvnAddresses
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DVN_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getDvnAddresses() {
        return dvnAddresses;
    }

    @JsonProperty(JSON_PROPERTY_DVN_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDvnAddresses(@jakarta.annotation.Nonnull List<String> dvnAddresses) {
        this.dvnAddresses = dvnAddresses;
    }

    public DvnConfigWithConfirmations optionalDVNAddresses(
            @jakarta.annotation.Nullable List<String> optionalDVNAddresses) {
        this.optionalDVNAddresses = optionalDVNAddresses;
        return this;
    }

    public DvnConfigWithConfirmations addOptionalDVNAddressesItem(String optionalDVNAddressesItem) {
        if (this.optionalDVNAddresses == null) {
            this.optionalDVNAddresses = new ArrayList<>();
        }
        this.optionalDVNAddresses.add(optionalDVNAddressesItem);
        return this;
    }

    /**
     * Array of optional DVN Ethereum addresses that sign ULN messages.
     *
     * @return optionalDVNAddresses
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getOptionalDVNAddresses() {
        return optionalDVNAddresses;
    }

    @JsonProperty(JSON_PROPERTY_OPTIONAL_D_V_N_ADDRESSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOptionalDVNAddresses(
            @jakarta.annotation.Nullable List<String> optionalDVNAddresses) {
        this.optionalDVNAddresses = optionalDVNAddresses;
    }

    public DvnConfigWithConfirmations optionalThreshold(
            @jakarta.annotation.Nonnull BigDecimal optionalThreshold) {
        this.optionalThreshold = optionalThreshold;
        return this;
    }

    /**
     * Minimum number of DVN signatures required (M-of-N).
     *
     * @return optionalThreshold
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_OPTIONAL_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getOptionalThreshold() {
        return optionalThreshold;
    }

    @JsonProperty(JSON_PROPERTY_OPTIONAL_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOptionalThreshold(@jakarta.annotation.Nonnull BigDecimal optionalThreshold) {
        this.optionalThreshold = optionalThreshold;
    }

    public DvnConfigWithConfirmations confirmations(
            @jakarta.annotation.Nonnull BigDecimal confirmations) {
        this.confirmations = confirmations;
        return this;
    }

    /**
     * Number of block confirmations required
     *
     * @return confirmations
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CONFIRMATIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getConfirmations() {
        return confirmations;
    }

    @JsonProperty(JSON_PROPERTY_CONFIRMATIONS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfirmations(@jakarta.annotation.Nonnull BigDecimal confirmations) {
        this.confirmations = confirmations;
    }

    /** Return true if this DvnConfigWithConfirmations object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DvnConfigWithConfirmations dvnConfigWithConfirmations = (DvnConfigWithConfirmations) o;
        return Objects.equals(this.dvnAddresses, dvnConfigWithConfirmations.dvnAddresses)
                && Objects.equals(
                        this.optionalDVNAddresses, dvnConfigWithConfirmations.optionalDVNAddresses)
                && Objects.equals(
                        this.optionalThreshold, dvnConfigWithConfirmations.optionalThreshold)
                && Objects.equals(this.confirmations, dvnConfigWithConfirmations.confirmations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dvnAddresses, optionalDVNAddresses, optionalThreshold, confirmations);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DvnConfigWithConfirmations {\n");
        sb.append("    dvnAddresses: ").append(toIndentedString(dvnAddresses)).append("\n");
        sb.append("    optionalDVNAddresses: ")
                .append(toIndentedString(optionalDVNAddresses))
                .append("\n");
        sb.append("    optionalThreshold: ")
                .append(toIndentedString(optionalThreshold))
                .append("\n");
        sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `dvnAddresses` to the URL query string
        if (getDvnAddresses() != null) {
            for (int i = 0; i < getDvnAddresses().size(); i++) {
                joiner.add(
                        String.format(
                                "%sdvnAddresses%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getDvnAddresses().get(i)))));
            }
        }

        // add `optionalDVNAddresses` to the URL query string
        if (getOptionalDVNAddresses() != null) {
            for (int i = 0; i < getOptionalDVNAddresses().size(); i++) {
                joiner.add(
                        String.format(
                                "%soptionalDVNAddresses%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(
                                                getOptionalDVNAddresses().get(i)))));
            }
        }

        // add `optionalThreshold` to the URL query string
        if (getOptionalThreshold() != null) {
            joiner.add(
                    String.format(
                            "%soptionalThreshold%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOptionalThreshold()))));
        }

        // add `confirmations` to the URL query string
        if (getConfirmations() != null) {
            joiner.add(
                    String.format(
                            "%sconfirmations%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getConfirmations()))));
        }

        return joiner.toString();
    }
}
