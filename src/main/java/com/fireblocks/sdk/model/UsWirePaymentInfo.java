/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** US Wire payment information for US domestic wire transfers */
@JsonPropertyOrder({
    UsWirePaymentInfo.JSON_PROPERTY_RAIL,
    UsWirePaymentInfo.JSON_PROPERTY_ADDRESSING_SYSTEM,
    UsWirePaymentInfo.JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME,
    UsWirePaymentInfo.JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME,
    UsWirePaymentInfo.JSON_PROPERTY_COUNTRY,
    UsWirePaymentInfo.JSON_PROPERTY_ACCOUNT_NUMBER,
    UsWirePaymentInfo.JSON_PROPERTY_ROUTING_NUMBER,
    UsWirePaymentInfo.JSON_PROPERTY_SWIFT_CODE,
    UsWirePaymentInfo.JSON_PROPERTY_BANK_NAME,
    UsWirePaymentInfo.JSON_PROPERTY_BANK_ADDRESS_LINE,
    UsWirePaymentInfo.JSON_PROPERTY_BANK_ADDRESS_CITY,
    UsWirePaymentInfo.JSON_PROPERTY_BANK_ADDRESS_STATE,
    UsWirePaymentInfo.JSON_PROPERTY_BANK_ADDRESS_COUNTRY,
    UsWirePaymentInfo.JSON_PROPERTY_BANK_ADDRESS_POSTAL_CODE,
    UsWirePaymentInfo.JSON_PROPERTY_BRANCH_NUMBER
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class UsWirePaymentInfo {
    /** The payment rail type for US wire transfers */
    public enum RailEnum {
        US_WIRE(String.valueOf("US_WIRE"));

        private String value;

        RailEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RailEnum fromValue(String value) {
            for (RailEnum b : RailEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_RAIL = "rail";
    @jakarta.annotation.Nonnull private RailEnum rail;

    /** The addressing system used for US wire transfers */
    public enum AddressingSystemEnum {
        ABA(String.valueOf("ABA"));

        private String value;

        AddressingSystemEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AddressingSystemEnum fromValue(String value) {
            for (AddressingSystemEnum b : AddressingSystemEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_ADDRESSING_SYSTEM = "addressingSystem";
    @jakarta.annotation.Nonnull private AddressingSystemEnum addressingSystem;

    public static final String JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME = "accountHolderGivenName";
    @jakarta.annotation.Nonnull private String accountHolderGivenName;

    public static final String JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME = "accountHolderSurname";
    @jakarta.annotation.Nonnull private String accountHolderSurname;

    public static final String JSON_PROPERTY_COUNTRY = "country";
    @jakarta.annotation.Nonnull private String country;

    public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "accountNumber";
    @jakarta.annotation.Nonnull private String accountNumber;

    public static final String JSON_PROPERTY_ROUTING_NUMBER = "routingNumber";
    @jakarta.annotation.Nonnull private String routingNumber;

    public static final String JSON_PROPERTY_SWIFT_CODE = "swiftCode";
    @jakarta.annotation.Nonnull private String swiftCode;

    public static final String JSON_PROPERTY_BANK_NAME = "bankName";
    @jakarta.annotation.Nonnull private String bankName;

    public static final String JSON_PROPERTY_BANK_ADDRESS_LINE = "bankAddressLine";
    @jakarta.annotation.Nonnull private String bankAddressLine;

    public static final String JSON_PROPERTY_BANK_ADDRESS_CITY = "bankAddressCity";
    @jakarta.annotation.Nonnull private String bankAddressCity;

    public static final String JSON_PROPERTY_BANK_ADDRESS_STATE = "bankAddressState";
    @jakarta.annotation.Nullable private String bankAddressState;

    public static final String JSON_PROPERTY_BANK_ADDRESS_COUNTRY = "bankAddressCountry";
    @jakarta.annotation.Nonnull private String bankAddressCountry;

    public static final String JSON_PROPERTY_BANK_ADDRESS_POSTAL_CODE = "bankAddressPostalCode";
    @jakarta.annotation.Nonnull private String bankAddressPostalCode;

    public static final String JSON_PROPERTY_BRANCH_NUMBER = "branchNumber";
    @jakarta.annotation.Nullable private String branchNumber;

    public UsWirePaymentInfo() {}

    @JsonCreator
    public UsWirePaymentInfo(
            @JsonProperty(value = JSON_PROPERTY_RAIL, required = true) RailEnum rail,
            @JsonProperty(value = JSON_PROPERTY_ADDRESSING_SYSTEM, required = true)
                    AddressingSystemEnum addressingSystem,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME, required = true)
                    String accountHolderGivenName,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME, required = true)
                    String accountHolderSurname,
            @JsonProperty(value = JSON_PROPERTY_COUNTRY, required = true) String country,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_NUMBER, required = true)
                    String accountNumber,
            @JsonProperty(value = JSON_PROPERTY_ROUTING_NUMBER, required = true)
                    String routingNumber,
            @JsonProperty(value = JSON_PROPERTY_SWIFT_CODE, required = true) String swiftCode,
            @JsonProperty(value = JSON_PROPERTY_BANK_NAME, required = true) String bankName,
            @JsonProperty(value = JSON_PROPERTY_BANK_ADDRESS_LINE, required = true)
                    String bankAddressLine,
            @JsonProperty(value = JSON_PROPERTY_BANK_ADDRESS_CITY, required = true)
                    String bankAddressCity,
            @JsonProperty(value = JSON_PROPERTY_BANK_ADDRESS_COUNTRY, required = true)
                    String bankAddressCountry,
            @JsonProperty(value = JSON_PROPERTY_BANK_ADDRESS_POSTAL_CODE, required = true)
                    String bankAddressPostalCode) {
        this.rail = rail;
        this.addressingSystem = addressingSystem;
        this.accountHolderGivenName = accountHolderGivenName;
        this.accountHolderSurname = accountHolderSurname;
        this.country = country;
        this.accountNumber = accountNumber;
        this.routingNumber = routingNumber;
        this.swiftCode = swiftCode;
        this.bankName = bankName;
        this.bankAddressLine = bankAddressLine;
        this.bankAddressCity = bankAddressCity;
        this.bankAddressCountry = bankAddressCountry;
        this.bankAddressPostalCode = bankAddressPostalCode;
    }

    public UsWirePaymentInfo rail(@jakarta.annotation.Nonnull RailEnum rail) {
        this.rail = rail;
        return this;
    }

    /**
     * The payment rail type for US wire transfers
     *
     * @return rail
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RAIL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public RailEnum getRail() {
        return rail;
    }

    @JsonProperty(JSON_PROPERTY_RAIL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRail(@jakarta.annotation.Nonnull RailEnum rail) {
        this.rail = rail;
    }

    public UsWirePaymentInfo addressingSystem(
            @jakarta.annotation.Nonnull AddressingSystemEnum addressingSystem) {
        this.addressingSystem = addressingSystem;
        return this;
    }

    /**
     * The addressing system used for US wire transfers
     *
     * @return addressingSystem
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ADDRESSING_SYSTEM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AddressingSystemEnum getAddressingSystem() {
        return addressingSystem;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESSING_SYSTEM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAddressingSystem(
            @jakarta.annotation.Nonnull AddressingSystemEnum addressingSystem) {
        this.addressingSystem = addressingSystem;
    }

    public UsWirePaymentInfo accountHolderGivenName(
            @jakarta.annotation.Nonnull String accountHolderGivenName) {
        this.accountHolderGivenName = accountHolderGivenName;
        return this;
    }

    /**
     * The given name (first name) of the account holder
     *
     * @return accountHolderGivenName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountHolderGivenName() {
        return accountHolderGivenName;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_GIVEN_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountHolderGivenName(
            @jakarta.annotation.Nonnull String accountHolderGivenName) {
        this.accountHolderGivenName = accountHolderGivenName;
    }

    public UsWirePaymentInfo accountHolderSurname(
            @jakarta.annotation.Nonnull String accountHolderSurname) {
        this.accountHolderSurname = accountHolderSurname;
        return this;
    }

    /**
     * The surname (last name) of the account holder
     *
     * @return accountHolderSurname
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountHolderSurname() {
        return accountHolderSurname;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_SURNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountHolderSurname(@jakarta.annotation.Nonnull String accountHolderSurname) {
        this.accountHolderSurname = accountHolderSurname;
    }

    public UsWirePaymentInfo country(@jakarta.annotation.Nonnull String country) {
        this.country = country;
        return this;
    }

    /**
     * The country for the transfer (ISO 3166-1 alpha-2 code)
     *
     * @return country
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCountry() {
        return country;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCountry(@jakarta.annotation.Nonnull String country) {
        this.country = country;
    }

    public UsWirePaymentInfo accountNumber(@jakarta.annotation.Nonnull String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The bank account number
     *
     * @return accountNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountNumber(@jakarta.annotation.Nonnull String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public UsWirePaymentInfo routingNumber(@jakarta.annotation.Nonnull String routingNumber) {
        this.routingNumber = routingNumber;
        return this;
    }

    /**
     * The bank routing number (ABA routing number)
     *
     * @return routingNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ROUTING_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getRoutingNumber() {
        return routingNumber;
    }

    @JsonProperty(JSON_PROPERTY_ROUTING_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRoutingNumber(@jakarta.annotation.Nonnull String routingNumber) {
        this.routingNumber = routingNumber;
    }

    public UsWirePaymentInfo swiftCode(@jakarta.annotation.Nonnull String swiftCode) {
        this.swiftCode = swiftCode;
        return this;
    }

    /**
     * The SWIFT/BIC code of the bank
     *
     * @return swiftCode
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SWIFT_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSwiftCode() {
        return swiftCode;
    }

    @JsonProperty(JSON_PROPERTY_SWIFT_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSwiftCode(@jakarta.annotation.Nonnull String swiftCode) {
        this.swiftCode = swiftCode;
    }

    public UsWirePaymentInfo bankName(@jakarta.annotation.Nonnull String bankName) {
        this.bankName = bankName;
        return this;
    }

    /**
     * The name of the bank
     *
     * @return bankName
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankName() {
        return bankName;
    }

    @JsonProperty(JSON_PROPERTY_BANK_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankName(@jakarta.annotation.Nonnull String bankName) {
        this.bankName = bankName;
    }

    public UsWirePaymentInfo bankAddressLine(@jakarta.annotation.Nonnull String bankAddressLine) {
        this.bankAddressLine = bankAddressLine;
        return this;
    }

    /**
     * The street address of the bank
     *
     * @return bankAddressLine
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_LINE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankAddressLine() {
        return bankAddressLine;
    }

    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_LINE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankAddressLine(@jakarta.annotation.Nonnull String bankAddressLine) {
        this.bankAddressLine = bankAddressLine;
    }

    public UsWirePaymentInfo bankAddressCity(@jakarta.annotation.Nonnull String bankAddressCity) {
        this.bankAddressCity = bankAddressCity;
        return this;
    }

    /**
     * The city where the bank is located
     *
     * @return bankAddressCity
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_CITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankAddressCity() {
        return bankAddressCity;
    }

    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_CITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankAddressCity(@jakarta.annotation.Nonnull String bankAddressCity) {
        this.bankAddressCity = bankAddressCity;
    }

    public UsWirePaymentInfo bankAddressState(
            @jakarta.annotation.Nullable String bankAddressState) {
        this.bankAddressState = bankAddressState;
        return this;
    }

    /**
     * The state where the bank is located
     *
     * @return bankAddressState
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBankAddressState() {
        return bankAddressState;
    }

    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBankAddressState(@jakarta.annotation.Nullable String bankAddressState) {
        this.bankAddressState = bankAddressState;
    }

    public UsWirePaymentInfo bankAddressCountry(
            @jakarta.annotation.Nonnull String bankAddressCountry) {
        this.bankAddressCountry = bankAddressCountry;
        return this;
    }

    /**
     * The country where the bank is located (ISO 3166-1 alpha-2 code)
     *
     * @return bankAddressCountry
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankAddressCountry() {
        return bankAddressCountry;
    }

    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankAddressCountry(@jakarta.annotation.Nonnull String bankAddressCountry) {
        this.bankAddressCountry = bankAddressCountry;
    }

    public UsWirePaymentInfo bankAddressPostalCode(
            @jakarta.annotation.Nonnull String bankAddressPostalCode) {
        this.bankAddressPostalCode = bankAddressPostalCode;
        return this;
    }

    /**
     * The postal code of the bank&#39;s address
     *
     * @return bankAddressPostalCode
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_POSTAL_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBankAddressPostalCode() {
        return bankAddressPostalCode;
    }

    @JsonProperty(JSON_PROPERTY_BANK_ADDRESS_POSTAL_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBankAddressPostalCode(@jakarta.annotation.Nonnull String bankAddressPostalCode) {
        this.bankAddressPostalCode = bankAddressPostalCode;
    }

    public UsWirePaymentInfo branchNumber(@jakarta.annotation.Nullable String branchNumber) {
        this.branchNumber = branchNumber;
        return this;
    }

    /**
     * The branch number of the bank
     *
     * @return branchNumber
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BRANCH_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBranchNumber() {
        return branchNumber;
    }

    @JsonProperty(JSON_PROPERTY_BRANCH_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBranchNumber(@jakarta.annotation.Nullable String branchNumber) {
        this.branchNumber = branchNumber;
    }

    /** Return true if this UsWirePaymentInfo object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UsWirePaymentInfo usWirePaymentInfo = (UsWirePaymentInfo) o;
        return Objects.equals(this.rail, usWirePaymentInfo.rail)
                && Objects.equals(this.addressingSystem, usWirePaymentInfo.addressingSystem)
                && Objects.equals(
                        this.accountHolderGivenName, usWirePaymentInfo.accountHolderGivenName)
                && Objects.equals(this.accountHolderSurname, usWirePaymentInfo.accountHolderSurname)
                && Objects.equals(this.country, usWirePaymentInfo.country)
                && Objects.equals(this.accountNumber, usWirePaymentInfo.accountNumber)
                && Objects.equals(this.routingNumber, usWirePaymentInfo.routingNumber)
                && Objects.equals(this.swiftCode, usWirePaymentInfo.swiftCode)
                && Objects.equals(this.bankName, usWirePaymentInfo.bankName)
                && Objects.equals(this.bankAddressLine, usWirePaymentInfo.bankAddressLine)
                && Objects.equals(this.bankAddressCity, usWirePaymentInfo.bankAddressCity)
                && Objects.equals(this.bankAddressState, usWirePaymentInfo.bankAddressState)
                && Objects.equals(this.bankAddressCountry, usWirePaymentInfo.bankAddressCountry)
                && Objects.equals(
                        this.bankAddressPostalCode, usWirePaymentInfo.bankAddressPostalCode)
                && Objects.equals(this.branchNumber, usWirePaymentInfo.branchNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                rail,
                addressingSystem,
                accountHolderGivenName,
                accountHolderSurname,
                country,
                accountNumber,
                routingNumber,
                swiftCode,
                bankName,
                bankAddressLine,
                bankAddressCity,
                bankAddressState,
                bankAddressCountry,
                bankAddressPostalCode,
                branchNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UsWirePaymentInfo {\n");
        sb.append("    rail: ").append(toIndentedString(rail)).append("\n");
        sb.append("    addressingSystem: ").append(toIndentedString(addressingSystem)).append("\n");
        sb.append("    accountHolderGivenName: ")
                .append(toIndentedString(accountHolderGivenName))
                .append("\n");
        sb.append("    accountHolderSurname: ")
                .append(toIndentedString(accountHolderSurname))
                .append("\n");
        sb.append("    country: ").append(toIndentedString(country)).append("\n");
        sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
        sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
        sb.append("    swiftCode: ").append(toIndentedString(swiftCode)).append("\n");
        sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
        sb.append("    bankAddressLine: ").append(toIndentedString(bankAddressLine)).append("\n");
        sb.append("    bankAddressCity: ").append(toIndentedString(bankAddressCity)).append("\n");
        sb.append("    bankAddressState: ").append(toIndentedString(bankAddressState)).append("\n");
        sb.append("    bankAddressCountry: ")
                .append(toIndentedString(bankAddressCountry))
                .append("\n");
        sb.append("    bankAddressPostalCode: ")
                .append(toIndentedString(bankAddressPostalCode))
                .append("\n");
        sb.append("    branchNumber: ").append(toIndentedString(branchNumber)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `rail` to the URL query string
        if (getRail() != null) {
            joiner.add(
                    String.format(
                            "%srail%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRail()))));
        }

        // add `addressingSystem` to the URL query string
        if (getAddressingSystem() != null) {
            joiner.add(
                    String.format(
                            "%saddressingSystem%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddressingSystem()))));
        }

        // add `accountHolderGivenName` to the URL query string
        if (getAccountHolderGivenName() != null) {
            joiner.add(
                    String.format(
                            "%saccountHolderGivenName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getAccountHolderGivenName()))));
        }

        // add `accountHolderSurname` to the URL query string
        if (getAccountHolderSurname() != null) {
            joiner.add(
                    String.format(
                            "%saccountHolderSurname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getAccountHolderSurname()))));
        }

        // add `country` to the URL query string
        if (getCountry() != null) {
            joiner.add(
                    String.format(
                            "%scountry%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCountry()))));
        }

        // add `accountNumber` to the URL query string
        if (getAccountNumber() != null) {
            joiner.add(
                    String.format(
                            "%saccountNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAccountNumber()))));
        }

        // add `routingNumber` to the URL query string
        if (getRoutingNumber() != null) {
            joiner.add(
                    String.format(
                            "%sroutingNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRoutingNumber()))));
        }

        // add `swiftCode` to the URL query string
        if (getSwiftCode() != null) {
            joiner.add(
                    String.format(
                            "%sswiftCode%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSwiftCode()))));
        }

        // add `bankName` to the URL query string
        if (getBankName() != null) {
            joiner.add(
                    String.format(
                            "%sbankName%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankName()))));
        }

        // add `bankAddressLine` to the URL query string
        if (getBankAddressLine() != null) {
            joiner.add(
                    String.format(
                            "%sbankAddressLine%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankAddressLine()))));
        }

        // add `bankAddressCity` to the URL query string
        if (getBankAddressCity() != null) {
            joiner.add(
                    String.format(
                            "%sbankAddressCity%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankAddressCity()))));
        }

        // add `bankAddressState` to the URL query string
        if (getBankAddressState() != null) {
            joiner.add(
                    String.format(
                            "%sbankAddressState%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankAddressState()))));
        }

        // add `bankAddressCountry` to the URL query string
        if (getBankAddressCountry() != null) {
            joiner.add(
                    String.format(
                            "%sbankAddressCountry%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBankAddressCountry()))));
        }

        // add `bankAddressPostalCode` to the URL query string
        if (getBankAddressPostalCode() != null) {
            joiner.add(
                    String.format(
                            "%sbankAddressPostalCode%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getBankAddressPostalCode()))));
        }

        // add `branchNumber` to the URL query string
        if (getBranchNumber() != null) {
            joiner.add(
                    String.format(
                            "%sbranchNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBranchNumber()))));
        }

        return joiner.toString();
    }
}
