/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** FiatAccount */
@JsonPropertyOrder({
    FiatAccount.JSON_PROPERTY_ID,
    FiatAccount.JSON_PROPERTY_TYPE,
    FiatAccount.JSON_PROPERTY_NAME,
    FiatAccount.JSON_PROPERTY_ADDRESS,
    FiatAccount.JSON_PROPERTY_ASSETS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class FiatAccount {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nullable private String id;

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nullable private FiatAccountType type;

    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nullable private String name;

    public static final String JSON_PROPERTY_ADDRESS = "address";
    @jakarta.annotation.Nullable private String address;

    public static final String JSON_PROPERTY_ASSETS = "assets";
    @jakarta.annotation.Nullable private List<FiatAsset> assets;

    public FiatAccount() {}

    public FiatAccount id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public FiatAccount type(@jakarta.annotation.Nullable FiatAccountType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FiatAccountType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(@jakarta.annotation.Nullable FiatAccountType type) {
        this.type = type;
    }

    public FiatAccount name(@jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Display name of the fiat account
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public FiatAccount address(@jakarta.annotation.Nullable String address) {
        this.address = address;
        return this;
    }

    /**
     * Get address
     *
     * @return address
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAddress() {
        return address;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAddress(@jakarta.annotation.Nullable String address) {
        this.address = address;
    }

    public FiatAccount assets(@jakarta.annotation.Nullable List<FiatAsset> assets) {
        this.assets = assets;
        return this;
    }

    public FiatAccount addAssetsItem(FiatAsset assetsItem) {
        if (this.assets == null) {
            this.assets = new ArrayList<>();
        }
        this.assets.add(assetsItem);
        return this;
    }

    /**
     * Get assets
     *
     * @return assets
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ASSETS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<FiatAsset> getAssets() {
        return assets;
    }

    @JsonProperty(JSON_PROPERTY_ASSETS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAssets(@jakarta.annotation.Nullable List<FiatAsset> assets) {
        this.assets = assets;
    }

    /** Return true if this FiatAccount object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiatAccount fiatAccount = (FiatAccount) o;
        return Objects.equals(this.id, fiatAccount.id)
                && Objects.equals(this.type, fiatAccount.type)
                && Objects.equals(this.name, fiatAccount.name)
                && Objects.equals(this.address, fiatAccount.address)
                && Objects.equals(this.assets, fiatAccount.assets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, type, name, address, assets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiatAccount {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(
                    String.format(
                            "%saddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddress()))));
        }

        // add `assets` to the URL query string
        if (getAssets() != null) {
            for (int i = 0; i < getAssets().size(); i++) {
                if (getAssets().get(i) != null) {
                    joiner.add(
                            getAssets()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sassets%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
