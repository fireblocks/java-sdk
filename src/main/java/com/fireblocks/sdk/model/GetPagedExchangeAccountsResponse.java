/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** GetPagedExchangeAccountsResponse */
@JsonPropertyOrder({
    GetPagedExchangeAccountsResponse.JSON_PROPERTY_EXCHANGES,
    GetPagedExchangeAccountsResponse.JSON_PROPERTY_PAGING,
    GetPagedExchangeAccountsResponse.JSON_PROPERTY_PREV_URL,
    GetPagedExchangeAccountsResponse.JSON_PROPERTY_NEXT_URL
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class GetPagedExchangeAccountsResponse {
    public static final String JSON_PROPERTY_EXCHANGES = "exchanges";
    @jakarta.annotation.Nonnull private List<ExchangeAccount> exchanges;

    public static final String JSON_PROPERTY_PAGING = "paging";
    @jakarta.annotation.Nullable private GetPagedExchangeAccountsResponsePaging paging;

    public static final String JSON_PROPERTY_PREV_URL = "prevUrl";
    @jakarta.annotation.Nullable private String prevUrl;

    public static final String JSON_PROPERTY_NEXT_URL = "nextUrl";
    @jakarta.annotation.Nullable private String nextUrl;

    public GetPagedExchangeAccountsResponse() {}

    @JsonCreator
    public GetPagedExchangeAccountsResponse(
            @JsonProperty(value = JSON_PROPERTY_EXCHANGES, required = true)
                    List<ExchangeAccount> exchanges) {
        this.exchanges = exchanges;
    }

    public GetPagedExchangeAccountsResponse exchanges(
            @jakarta.annotation.Nonnull List<ExchangeAccount> exchanges) {
        this.exchanges = exchanges;
        return this;
    }

    public GetPagedExchangeAccountsResponse addExchangesItem(ExchangeAccount exchangesItem) {
        if (this.exchanges == null) {
            this.exchanges = new ArrayList<>();
        }
        this.exchanges.add(exchangesItem);
        return this;
    }

    /**
     * Get exchanges
     *
     * @return exchanges
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EXCHANGES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<ExchangeAccount> getExchanges() {
        return exchanges;
    }

    @JsonProperty(JSON_PROPERTY_EXCHANGES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExchanges(@jakarta.annotation.Nonnull List<ExchangeAccount> exchanges) {
        this.exchanges = exchanges;
    }

    public GetPagedExchangeAccountsResponse paging(
            @jakarta.annotation.Nullable GetPagedExchangeAccountsResponsePaging paging) {
        this.paging = paging;
        return this;
    }

    /**
     * Get paging
     *
     * @return paging
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PAGING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public GetPagedExchangeAccountsResponsePaging getPaging() {
        return paging;
    }

    @JsonProperty(JSON_PROPERTY_PAGING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaging(
            @jakarta.annotation.Nullable GetPagedExchangeAccountsResponsePaging paging) {
        this.paging = paging;
    }

    public GetPagedExchangeAccountsResponse prevUrl(@jakarta.annotation.Nullable String prevUrl) {
        this.prevUrl = prevUrl;
        return this;
    }

    /**
     * Get prevUrl
     *
     * @return prevUrl
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PREV_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPrevUrl() {
        return prevUrl;
    }

    @JsonProperty(JSON_PROPERTY_PREV_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrevUrl(@jakarta.annotation.Nullable String prevUrl) {
        this.prevUrl = prevUrl;
    }

    public GetPagedExchangeAccountsResponse nextUrl(@jakarta.annotation.Nullable String nextUrl) {
        this.nextUrl = nextUrl;
        return this;
    }

    /**
     * Get nextUrl
     *
     * @return nextUrl
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NEXT_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNextUrl() {
        return nextUrl;
    }

    @JsonProperty(JSON_PROPERTY_NEXT_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNextUrl(@jakarta.annotation.Nullable String nextUrl) {
        this.nextUrl = nextUrl;
    }

    /** Return true if this GetPagedExchangeAccountsResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPagedExchangeAccountsResponse getPagedExchangeAccountsResponse =
                (GetPagedExchangeAccountsResponse) o;
        return Objects.equals(this.exchanges, getPagedExchangeAccountsResponse.exchanges)
                && Objects.equals(this.paging, getPagedExchangeAccountsResponse.paging)
                && Objects.equals(this.prevUrl, getPagedExchangeAccountsResponse.prevUrl)
                && Objects.equals(this.nextUrl, getPagedExchangeAccountsResponse.nextUrl);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exchanges, paging, prevUrl, nextUrl);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetPagedExchangeAccountsResponse {\n");
        sb.append("    exchanges: ").append(toIndentedString(exchanges)).append("\n");
        sb.append("    paging: ").append(toIndentedString(paging)).append("\n");
        sb.append("    prevUrl: ").append(toIndentedString(prevUrl)).append("\n");
        sb.append("    nextUrl: ").append(toIndentedString(nextUrl)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `exchanges` to the URL query string
        if (getExchanges() != null) {
            for (int i = 0; i < getExchanges().size(); i++) {
                if (getExchanges().get(i) != null) {
                    joiner.add(
                            getExchanges()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sexchanges%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `paging` to the URL query string
        if (getPaging() != null) {
            joiner.add(getPaging().toUrlQueryString(prefix + "paging" + suffix));
        }

        // add `prevUrl` to the URL query string
        if (getPrevUrl() != null) {
            joiner.add(
                    String.format(
                            "%sprevUrl%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPrevUrl()))));
        }

        // add `nextUrl` to the URL query string
        if (getNextUrl() != null) {
            joiner.add(
                    String.format(
                            "%snextUrl%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getNextUrl()))));
        }

        return joiner.toString();
    }
}
