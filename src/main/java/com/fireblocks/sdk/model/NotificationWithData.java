/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** NotificationWithData */
@JsonPropertyOrder({
    NotificationWithData.JSON_PROPERTY_ID,
    NotificationWithData.JSON_PROPERTY_CREATED_AT,
    NotificationWithData.JSON_PROPERTY_UPDATED_AT,
    NotificationWithData.JSON_PROPERTY_STATUS,
    NotificationWithData.JSON_PROPERTY_EVENT_TYPE,
    NotificationWithData.JSON_PROPERTY_RESOURCE_ID,
    NotificationWithData.JSON_PROPERTY_DATA
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class NotificationWithData {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private UUID id;

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    @jakarta.annotation.Nonnull private Long createdAt;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    @jakarta.annotation.Nonnull private Long updatedAt;

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private NotificationStatus status;

    public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
    @jakarta.annotation.Nonnull private WebhookEvent eventType;

    public static final String JSON_PROPERTY_RESOURCE_ID = "resourceId";
    @jakarta.annotation.Nullable private UUID resourceId;

    public static final String JSON_PROPERTY_DATA = "data";
    @jakarta.annotation.Nullable private Object data;

    public NotificationWithData() {}

    @JsonCreator
    public NotificationWithData(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) UUID id,
            @JsonProperty(value = JSON_PROPERTY_CREATED_AT, required = true) Long createdAt,
            @JsonProperty(value = JSON_PROPERTY_UPDATED_AT, required = true) Long updatedAt,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true) NotificationStatus status,
            @JsonProperty(value = JSON_PROPERTY_EVENT_TYPE, required = true)
                    WebhookEvent eventType) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.status = status;
        this.eventType = eventType;
    }

    public NotificationWithData id(@jakarta.annotation.Nonnull UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull UUID id) {
        this.id = id;
    }

    public NotificationWithData createdAt(@jakarta.annotation.Nonnull Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The creation date of the notification in milliseconds
     *
     * @return createdAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedAt(@jakarta.annotation.Nonnull Long createdAt) {
        this.createdAt = createdAt;
    }

    public NotificationWithData updatedAt(@jakarta.annotation.Nonnull Long updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date when the notification was updated in milliseconds
     *
     * @return updatedAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpdatedAt(@jakarta.annotation.Nonnull Long updatedAt) {
        this.updatedAt = updatedAt;
    }

    public NotificationWithData status(@jakarta.annotation.Nonnull NotificationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NotificationStatus getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull NotificationStatus status) {
        this.status = status;
    }

    public NotificationWithData eventType(@jakarta.annotation.Nonnull WebhookEvent eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get eventType
     *
     * @return eventType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public WebhookEvent getEventType() {
        return eventType;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventType(@jakarta.annotation.Nonnull WebhookEvent eventType) {
        this.eventType = eventType;
    }

    public NotificationWithData resourceId(@jakarta.annotation.Nullable UUID resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * The resource id of the event which the Notification is listen to
     *
     * @return resourceId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public UUID getResourceId() {
        return resourceId;
    }

    @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResourceId(@jakarta.annotation.Nullable UUID resourceId) {
        this.resourceId = resourceId;
    }

    public NotificationWithData data(@jakarta.annotation.Nullable Object data) {
        this.data = data;
        return this;
    }

    /**
     * notification data
     *
     * @return data
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Object getData() {
        return data;
    }

    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setData(@jakarta.annotation.Nullable Object data) {
        this.data = data;
    }

    /** Return true if this NotificationWithData object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationWithData notificationWithData = (NotificationWithData) o;
        return Objects.equals(this.id, notificationWithData.id)
                && Objects.equals(this.createdAt, notificationWithData.createdAt)
                && Objects.equals(this.updatedAt, notificationWithData.updatedAt)
                && Objects.equals(this.status, notificationWithData.status)
                && Objects.equals(this.eventType, notificationWithData.eventType)
                && Objects.equals(this.resourceId, notificationWithData.resourceId)
                && Objects.equals(this.data, notificationWithData.data);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, createdAt, updatedAt, status, eventType, resourceId, data);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotificationWithData {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `createdAt` to the URL query string
        if (getCreatedAt() != null) {
            joiner.add(
                    String.format(
                            "%screatedAt%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCreatedAt()))));
        }

        // add `updatedAt` to the URL query string
        if (getUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%supdatedAt%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUpdatedAt()))));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `eventType` to the URL query string
        if (getEventType() != null) {
            joiner.add(
                    String.format(
                            "%seventType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getEventType()))));
        }

        // add `resourceId` to the URL query string
        if (getResourceId() != null) {
            joiner.add(
                    String.format(
                            "%sresourceId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getResourceId()))));
        }

        // add `data` to the URL query string
        if (getData() != null) {
            joiner.add(
                    String.format(
                            "%sdata%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getData()))));
        }

        return joiner.toString();
    }
}
