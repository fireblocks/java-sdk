/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.JSON;


/**
 * AssetTypeResponse
 */
@JsonPropertyOrder({
  AssetTypeResponse.JSON_PROPERTY_ID,
  AssetTypeResponse.JSON_PROPERTY_NAME,
  AssetTypeResponse.JSON_PROPERTY_TYPE,
  AssetTypeResponse.JSON_PROPERTY_CONTRACT_ADDRESS,
  AssetTypeResponse.JSON_PROPERTY_NATIVE_ASSET,
  AssetTypeResponse.JSON_PROPERTY_DECIMALS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AssetTypeResponse {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    ALGO_ASSET("ALGO_ASSET"),
    
    BASE_ASSET("BASE_ASSET"),
    
    BEP20("BEP20"),
    
    COMPOUND("COMPOUND"),
    
    ERC20("ERC20"),
    
    FIAT("FIAT"),
    
    SOL_ASSET("SOL_ASSET"),
    
    TRON_TRC20("TRON_TRC20"),
    
    XLM_ASSET("XLM_ASSET"),
    
    XDB_ASSET("XDB_ASSET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_CONTRACT_ADDRESS = "contractAddress";
  private String contractAddress;

  public static final String JSON_PROPERTY_NATIVE_ASSET = "nativeAsset";
  private String nativeAsset;

  public static final String JSON_PROPERTY_DECIMALS = "decimals";
  private BigDecimal decimals;

  public AssetTypeResponse() { 
  }

  public AssetTypeResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public AssetTypeResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public AssetTypeResponse type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AssetTypeResponse contractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
    return this;
  }

   /**
   * Get contractAddress
   * @return contractAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTRACT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContractAddress() {
    return contractAddress;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public AssetTypeResponse nativeAsset(String nativeAsset) {
    this.nativeAsset = nativeAsset;
    return this;
  }

   /**
   * Get nativeAsset
   * @return nativeAsset
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIVE_ASSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNativeAsset() {
    return nativeAsset;
  }


  @JsonProperty(JSON_PROPERTY_NATIVE_ASSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNativeAsset(String nativeAsset) {
    this.nativeAsset = nativeAsset;
  }


  public AssetTypeResponse decimals(BigDecimal decimals) {
    this.decimals = decimals;
    return this;
  }

   /**
   * Get decimals
   * @return decimals
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DECIMALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDecimals() {
    return decimals;
  }


  @JsonProperty(JSON_PROPERTY_DECIMALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecimals(BigDecimal decimals) {
    this.decimals = decimals;
  }


  /**
   * Return true if this AssetTypeResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetTypeResponse assetTypeResponse = (AssetTypeResponse) o;
    return Objects.equals(this.id, assetTypeResponse.id) &&
        Objects.equals(this.name, assetTypeResponse.name) &&
        Objects.equals(this.type, assetTypeResponse.type) &&
        Objects.equals(this.contractAddress, assetTypeResponse.contractAddress) &&
        Objects.equals(this.nativeAsset, assetTypeResponse.nativeAsset) &&
        Objects.equals(this.decimals, assetTypeResponse.decimals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, contractAddress, nativeAsset, decimals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetTypeResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    nativeAsset: ").append(toIndentedString(nativeAsset)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

