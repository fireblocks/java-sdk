/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** ContractDeployRequest */
@JsonPropertyOrder({
    ContractDeployRequest.JSON_PROPERTY_ASSET_ID,
    ContractDeployRequest.JSON_PROPERTY_VAULT_ACCOUNT_ID,
    ContractDeployRequest.JSON_PROPERTY_CONSTRUCTOR_PARAMETERS,
    ContractDeployRequest.JSON_PROPERTY_USE_GASLESS,
    ContractDeployRequest.JSON_PROPERTY_FEE,
    ContractDeployRequest.JSON_PROPERTY_FEE_LEVEL
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ContractDeployRequest {
    public static final String JSON_PROPERTY_ASSET_ID = "assetId";
    @jakarta.annotation.Nonnull private String assetId;

    public static final String JSON_PROPERTY_VAULT_ACCOUNT_ID = "vaultAccountId";
    @jakarta.annotation.Nonnull private String vaultAccountId;

    public static final String JSON_PROPERTY_CONSTRUCTOR_PARAMETERS = "constructorParameters";

    @jakarta.annotation.Nullable
    private List<ParameterWithValue> constructorParameters = new ArrayList<>();

    public static final String JSON_PROPERTY_USE_GASLESS = "useGasless";
    @jakarta.annotation.Nullable private Boolean useGasless;

    public static final String JSON_PROPERTY_FEE = "fee";
    @jakarta.annotation.Nullable private String fee;

    /**
     * Fee level for the write function transaction. interchangeable with the &#39;fee&#39; field
     */
    public enum FeeLevelEnum {
        LOW(String.valueOf("LOW")),

        MEDIUM(String.valueOf("MEDIUM")),

        HIGH(String.valueOf("HIGH"));

        private String value;

        FeeLevelEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FeeLevelEnum fromValue(String value) {
            for (FeeLevelEnum b : FeeLevelEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_FEE_LEVEL = "feeLevel";
    @jakarta.annotation.Nullable private FeeLevelEnum feeLevel;

    public ContractDeployRequest() {}

    @JsonCreator
    public ContractDeployRequest(
            @JsonProperty(value = JSON_PROPERTY_ASSET_ID, required = true) String assetId,
            @JsonProperty(value = JSON_PROPERTY_VAULT_ACCOUNT_ID, required = true)
                    String vaultAccountId) {
        this.assetId = assetId;
        this.vaultAccountId = vaultAccountId;
    }

    public ContractDeployRequest assetId(@jakarta.annotation.Nonnull String assetId) {
        this.assetId = assetId;
        return this;
    }

    /**
     * The base asset identifier of the blockchain you want to deploy to
     *
     * @return assetId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAssetId() {
        return assetId;
    }

    @JsonProperty(JSON_PROPERTY_ASSET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAssetId(@jakarta.annotation.Nonnull String assetId) {
        this.assetId = assetId;
    }

    public ContractDeployRequest vaultAccountId(@jakarta.annotation.Nonnull String vaultAccountId) {
        this.vaultAccountId = vaultAccountId;
        return this;
    }

    /**
     * The vault account id you wish to deploy from
     *
     * @return vaultAccountId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getVaultAccountId() {
        return vaultAccountId;
    }

    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVaultAccountId(@jakarta.annotation.Nonnull String vaultAccountId) {
        this.vaultAccountId = vaultAccountId;
    }

    public ContractDeployRequest constructorParameters(
            @jakarta.annotation.Nullable List<ParameterWithValue> constructorParameters) {
        this.constructorParameters = constructorParameters;
        return this;
    }

    public ContractDeployRequest addConstructorParametersItem(
            ParameterWithValue constructorParametersItem) {
        if (this.constructorParameters == null) {
            this.constructorParameters = new ArrayList<>();
        }
        this.constructorParameters.add(constructorParametersItem);
        return this;
    }

    /**
     * The constructor parameters of this contract
     *
     * @return constructorParameters
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CONSTRUCTOR_PARAMETERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<ParameterWithValue> getConstructorParameters() {
        return constructorParameters;
    }

    @JsonProperty(JSON_PROPERTY_CONSTRUCTOR_PARAMETERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConstructorParameters(
            @jakarta.annotation.Nullable List<ParameterWithValue> constructorParameters) {
        this.constructorParameters = constructorParameters;
    }

    public ContractDeployRequest useGasless(@jakarta.annotation.Nullable Boolean useGasless) {
        this.useGasless = useGasless;
        return this;
    }

    /**
     * Indicates whether the token should be created in a gasless manner, utilizing the ERC-2771
     * standard. When set to true, the transaction will be relayed by a designated relayer. The
     * workspace must be configured to use Fireblocks gasless relay.
     *
     * @return useGasless
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USE_GASLESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUseGasless() {
        return useGasless;
    }

    @JsonProperty(JSON_PROPERTY_USE_GASLESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUseGasless(@jakarta.annotation.Nullable Boolean useGasless) {
        this.useGasless = useGasless;
    }

    public ContractDeployRequest fee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Max fee amount for the write function transaction. interchangeable with the
     * &#39;feeLevel&#39; field
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFee() {
        return fee;
    }

    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public ContractDeployRequest feeLevel(@jakarta.annotation.Nullable FeeLevelEnum feeLevel) {
        this.feeLevel = feeLevel;
        return this;
    }

    /**
     * Fee level for the write function transaction. interchangeable with the &#39;fee&#39; field
     *
     * @return feeLevel
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeeLevelEnum getFeeLevel() {
        return feeLevel;
    }

    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeeLevel(@jakarta.annotation.Nullable FeeLevelEnum feeLevel) {
        this.feeLevel = feeLevel;
    }

    /** Return true if this ContractDeployRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractDeployRequest contractDeployRequest = (ContractDeployRequest) o;
        return Objects.equals(this.assetId, contractDeployRequest.assetId)
                && Objects.equals(this.vaultAccountId, contractDeployRequest.vaultAccountId)
                && Objects.equals(
                        this.constructorParameters, contractDeployRequest.constructorParameters)
                && Objects.equals(this.useGasless, contractDeployRequest.useGasless)
                && Objects.equals(this.fee, contractDeployRequest.fee)
                && Objects.equals(this.feeLevel, contractDeployRequest.feeLevel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                assetId, vaultAccountId, constructorParameters, useGasless, fee, feeLevel);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContractDeployRequest {\n");
        sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
        sb.append("    vaultAccountId: ").append(toIndentedString(vaultAccountId)).append("\n");
        sb.append("    constructorParameters: ")
                .append(toIndentedString(constructorParameters))
                .append("\n");
        sb.append("    useGasless: ").append(toIndentedString(useGasless)).append("\n");
        sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("    feeLevel: ").append(toIndentedString(feeLevel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `assetId` to the URL query string
        if (getAssetId() != null) {
            joiner.add(
                    String.format(
                            "%sassetId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAssetId()))));
        }

        // add `vaultAccountId` to the URL query string
        if (getVaultAccountId() != null) {
            joiner.add(
                    String.format(
                            "%svaultAccountId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getVaultAccountId()))));
        }

        // add `constructorParameters` to the URL query string
        if (getConstructorParameters() != null) {
            for (int i = 0; i < getConstructorParameters().size(); i++) {
                if (getConstructorParameters().get(i) != null) {
                    joiner.add(
                            getConstructorParameters()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sconstructorParameters%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `useGasless` to the URL query string
        if (getUseGasless() != null) {
            joiner.add(
                    String.format(
                            "%suseGasless%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getUseGasless()))));
        }

        // add `fee` to the URL query string
        if (getFee() != null) {
            joiner.add(
                    String.format(
                            "%sfee%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFee()))));
        }

        // add `feeLevel` to the URL query string
        if (getFeeLevel() != null) {
            joiner.add(
                    String.format(
                            "%sfeeLevel%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFeeLevel()))));
        }

        return joiner.toString();
    }
}
