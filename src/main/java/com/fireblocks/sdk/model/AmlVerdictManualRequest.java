/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** AmlVerdictManualRequest */
@JsonPropertyOrder({
    AmlVerdictManualRequest.JSON_PROPERTY_VERDICT,
    AmlVerdictManualRequest.JSON_PROPERTY_TX_ID
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AmlVerdictManualRequest {
    /** The AML verdict to set for the transaction */
    public enum VerdictEnum {
        ACCEPT(String.valueOf("ACCEPT")),

        REJECT(String.valueOf("REJECT"));

        private String value;

        VerdictEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static VerdictEnum fromValue(String value) {
            for (VerdictEnum b : VerdictEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_VERDICT = "verdict";
    @jakarta.annotation.Nonnull private VerdictEnum verdict;

    public static final String JSON_PROPERTY_TX_ID = "txId";
    @jakarta.annotation.Nonnull private UUID txId;

    public AmlVerdictManualRequest() {}

    @JsonCreator
    public AmlVerdictManualRequest(
            @JsonProperty(value = JSON_PROPERTY_VERDICT, required = true) VerdictEnum verdict,
            @JsonProperty(value = JSON_PROPERTY_TX_ID, required = true) UUID txId) {
        this.verdict = verdict;
        this.txId = txId;
    }

    public AmlVerdictManualRequest verdict(@jakarta.annotation.Nonnull VerdictEnum verdict) {
        this.verdict = verdict;
        return this;
    }

    /**
     * The AML verdict to set for the transaction
     *
     * @return verdict
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VERDICT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public VerdictEnum getVerdict() {
        return verdict;
    }

    @JsonProperty(JSON_PROPERTY_VERDICT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVerdict(@jakarta.annotation.Nonnull VerdictEnum verdict) {
        this.verdict = verdict;
    }

    public AmlVerdictManualRequest txId(@jakarta.annotation.Nonnull UUID txId) {
        this.txId = txId;
        return this;
    }

    /**
     * The transaction ID to set the verdict for
     *
     * @return txId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TX_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getTxId() {
        return txId;
    }

    @JsonProperty(JSON_PROPERTY_TX_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTxId(@jakarta.annotation.Nonnull UUID txId) {
        this.txId = txId;
    }

    /** Return true if this AmlVerdictManualRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AmlVerdictManualRequest amlVerdictManualRequest = (AmlVerdictManualRequest) o;
        return Objects.equals(this.verdict, amlVerdictManualRequest.verdict)
                && Objects.equals(this.txId, amlVerdictManualRequest.txId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(verdict, txId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AmlVerdictManualRequest {\n");
        sb.append("    verdict: ").append(toIndentedString(verdict)).append("\n");
        sb.append("    txId: ").append(toIndentedString(txId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `verdict` to the URL query string
        if (getVerdict() != null) {
            joiner.add(
                    String.format(
                            "%sverdict%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getVerdict()))));
        }

        // add `txId` to the URL query string
        if (getTxId() != null) {
            joiner.add(
                    String.format(
                            "%stxId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTxId()))));
        }

        return joiner.toString();
    }
}
