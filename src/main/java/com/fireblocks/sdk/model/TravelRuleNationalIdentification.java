/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** TravelRuleNationalIdentification */
@JsonPropertyOrder({
    TravelRuleNationalIdentification.JSON_PROPERTY_COUNTRY_OF_ISSUE,
    TravelRuleNationalIdentification.JSON_PROPERTY_NATIONAL_IDENTIFIER,
    TravelRuleNationalIdentification.JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE,
    TravelRuleNationalIdentification.JSON_PROPERTY_REGISTRATION_AUTHORITY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TravelRuleNationalIdentification {
    public static final String JSON_PROPERTY_COUNTRY_OF_ISSUE = "countryOfIssue";
    private String countryOfIssue;

    public static final String JSON_PROPERTY_NATIONAL_IDENTIFIER = "nationalIdentifier";
    private String nationalIdentifier;

    public static final String JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE = "nationalIdentifierType";
    private String nationalIdentifierType;

    public static final String JSON_PROPERTY_REGISTRATION_AUTHORITY = "registrationAuthority";
    private String registrationAuthority;

    public TravelRuleNationalIdentification() {}

    public TravelRuleNationalIdentification countryOfIssue(String countryOfIssue) {
        this.countryOfIssue = countryOfIssue;
        return this;
    }

    /**
     * Get countryOfIssue
     *
     * @return countryOfIssue
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COUNTRY_OF_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCountryOfIssue() {
        return countryOfIssue;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_OF_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCountryOfIssue(String countryOfIssue) {
        this.countryOfIssue = countryOfIssue;
    }

    public TravelRuleNationalIdentification nationalIdentifier(String nationalIdentifier) {
        this.nationalIdentifier = nationalIdentifier;
        return this;
    }

    /**
     * Get nationalIdentifier
     *
     * @return nationalIdentifier
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNationalIdentifier() {
        return nationalIdentifier;
    }

    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNationalIdentifier(String nationalIdentifier) {
        this.nationalIdentifier = nationalIdentifier;
    }

    public TravelRuleNationalIdentification nationalIdentifierType(String nationalIdentifierType) {
        this.nationalIdentifierType = nationalIdentifierType;
        return this;
    }

    /**
     * Get nationalIdentifierType
     *
     * @return nationalIdentifierType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNationalIdentifierType() {
        return nationalIdentifierType;
    }

    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNationalIdentifierType(String nationalIdentifierType) {
        this.nationalIdentifierType = nationalIdentifierType;
    }

    public TravelRuleNationalIdentification registrationAuthority(String registrationAuthority) {
        this.registrationAuthority = registrationAuthority;
        return this;
    }

    /**
     * Get registrationAuthority
     *
     * @return registrationAuthority
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REGISTRATION_AUTHORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRegistrationAuthority() {
        return registrationAuthority;
    }

    @JsonProperty(JSON_PROPERTY_REGISTRATION_AUTHORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRegistrationAuthority(String registrationAuthority) {
        this.registrationAuthority = registrationAuthority;
    }

    /** Return true if this TravelRuleNationalIdentification object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TravelRuleNationalIdentification travelRuleNationalIdentification =
                (TravelRuleNationalIdentification) o;
        return Objects.equals(this.countryOfIssue, travelRuleNationalIdentification.countryOfIssue)
                && Objects.equals(
                        this.nationalIdentifier,
                        travelRuleNationalIdentification.nationalIdentifier)
                && Objects.equals(
                        this.nationalIdentifierType,
                        travelRuleNationalIdentification.nationalIdentifierType)
                && Objects.equals(
                        this.registrationAuthority,
                        travelRuleNationalIdentification.registrationAuthority);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                countryOfIssue, nationalIdentifier, nationalIdentifierType, registrationAuthority);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TravelRuleNationalIdentification {\n");
        sb.append("    countryOfIssue: ").append(toIndentedString(countryOfIssue)).append("\n");
        sb.append("    nationalIdentifier: ")
                .append(toIndentedString(nationalIdentifier))
                .append("\n");
        sb.append("    nationalIdentifierType: ")
                .append(toIndentedString(nationalIdentifierType))
                .append("\n");
        sb.append("    registrationAuthority: ")
                .append(toIndentedString(registrationAuthority))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `countryOfIssue` to the URL query string
        if (getCountryOfIssue() != null) {
            joiner.add(
                    String.format(
                            "%scountryOfIssue%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCountryOfIssue()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `nationalIdentifier` to the URL query string
        if (getNationalIdentifier() != null) {
            joiner.add(
                    String.format(
                            "%snationalIdentifier%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getNationalIdentifier()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `nationalIdentifierType` to the URL query string
        if (getNationalIdentifierType() != null) {
            joiner.add(
                    String.format(
                            "%snationalIdentifierType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getNationalIdentifierType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `registrationAuthority` to the URL query string
        if (getRegistrationAuthority() != null) {
            joiner.add(
                    String.format(
                            "%sregistrationAuthority%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getRegistrationAuthority()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
