/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** CreateMultichainTokenRequest */
@JsonPropertyOrder({
    CreateMultichainTokenRequest.JSON_PROPERTY_VAULT_ACCOUNT_ID,
    CreateMultichainTokenRequest.JSON_PROPERTY_CREATE_PARAMS,
    CreateMultichainTokenRequest.JSON_PROPERTY_SALT,
    CreateMultichainTokenRequest.JSON_PROPERTY_CHAINS,
    CreateMultichainTokenRequest.JSON_PROPERTY_DISPLAY_NAME,
    CreateMultichainTokenRequest.JSON_PROPERTY_USE_GASLESS,
    CreateMultichainTokenRequest.JSON_PROPERTY_FEE,
    CreateMultichainTokenRequest.JSON_PROPERTY_FEE_LEVEL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateMultichainTokenRequest {
    public static final String JSON_PROPERTY_VAULT_ACCOUNT_ID = "vaultAccountId";
    private String vaultAccountId;

    public static final String JSON_PROPERTY_CREATE_PARAMS = "createParams";
    private CreateMultichainTokenRequestCreateParams createParams;

    public static final String JSON_PROPERTY_SALT = "salt";
    private String salt;

    public static final String JSON_PROPERTY_CHAINS = "chains";
    private List<String> chains = new ArrayList<>();

    public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
    private String displayName;

    public static final String JSON_PROPERTY_USE_GASLESS = "useGasless";
    private Boolean useGasless;

    public static final String JSON_PROPERTY_FEE = "fee";
    private String fee;

    /**
     * Fee level for the write function transaction. interchangeable with the &#39;fee&#39; field
     */
    public enum FeeLevelEnum {
        LOW("LOW"),

        MEDIUM("MEDIUM"),

        HIGH("HIGH");

        private String value;

        FeeLevelEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FeeLevelEnum fromValue(String value) {
            for (FeeLevelEnum b : FeeLevelEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_FEE_LEVEL = "feeLevel";
    private FeeLevelEnum feeLevel;

    public CreateMultichainTokenRequest() {}

    public CreateMultichainTokenRequest vaultAccountId(String vaultAccountId) {
        this.vaultAccountId = vaultAccountId;
        return this;
    }

    /**
     * The id of the vault account that initiated the request to issue the token
     *
     * @return vaultAccountId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getVaultAccountId() {
        return vaultAccountId;
    }

    @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVaultAccountId(String vaultAccountId) {
        this.vaultAccountId = vaultAccountId;
    }

    public CreateMultichainTokenRequest createParams(
            CreateMultichainTokenRequestCreateParams createParams) {
        this.createParams = createParams;
        return this;
    }

    /**
     * Get createParams
     *
     * @return createParams
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATE_PARAMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CreateMultichainTokenRequestCreateParams getCreateParams() {
        return createParams;
    }

    @JsonProperty(JSON_PROPERTY_CREATE_PARAMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreateParams(CreateMultichainTokenRequestCreateParams createParams) {
        this.createParams = createParams;
    }

    public CreateMultichainTokenRequest salt(String salt) {
        this.salt = salt;
        return this;
    }

    /**
     * The salt to calculate the deterministic address. Must be a number between 0 and 2^256 -1, for
     * it to fit in the bytes32 parameter.
     *
     * @return salt
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SALT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSalt() {
        return salt;
    }

    @JsonProperty(JSON_PROPERTY_SALT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSalt(String salt) {
        this.salt = salt;
    }

    public CreateMultichainTokenRequest chains(List<String> chains) {
        this.chains = chains;
        return this;
    }

    public CreateMultichainTokenRequest addChainsItem(String chainsItem) {
        if (this.chains == null) {
            this.chains = new ArrayList<>();
        }
        this.chains.add(chainsItem);
        return this;
    }

    /**
     * The base asset identifiers of the blockchains (legacyId) to calculate deterministic addresses
     *
     * @return chains
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CHAINS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getChains() {
        return chains;
    }

    @JsonProperty(JSON_PROPERTY_CHAINS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setChains(List<String> chains) {
        this.chains = chains;
    }

    public CreateMultichainTokenRequest displayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get displayName
     *
     * @return displayName
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDisplayName() {
        return displayName;
    }

    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public CreateMultichainTokenRequest useGasless(Boolean useGasless) {
        this.useGasless = useGasless;
        return this;
    }

    /**
     * Indicates whether the token should be created in a gasless manner, utilizing the ERC-2771
     * standard. When set to true, the transaction will be relayed by a designated relayer. The
     * workspace must be configured to use Fireblocks gasless relay.
     *
     * @return useGasless
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USE_GASLESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUseGasless() {
        return useGasless;
    }

    @JsonProperty(JSON_PROPERTY_USE_GASLESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUseGasless(Boolean useGasless) {
        this.useGasless = useGasless;
    }

    public CreateMultichainTokenRequest fee(String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Max fee amount for the write function transaction. interchangeable with the
     * &#39;feeLevel&#39; field
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFee() {
        return fee;
    }

    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFee(String fee) {
        this.fee = fee;
    }

    public CreateMultichainTokenRequest feeLevel(FeeLevelEnum feeLevel) {
        this.feeLevel = feeLevel;
        return this;
    }

    /**
     * Fee level for the write function transaction. interchangeable with the &#39;fee&#39; field
     *
     * @return feeLevel
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeeLevelEnum getFeeLevel() {
        return feeLevel;
    }

    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeeLevel(FeeLevelEnum feeLevel) {
        this.feeLevel = feeLevel;
    }

    /** Return true if this CreateMultichainTokenRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMultichainTokenRequest createMultichainTokenRequest =
                (CreateMultichainTokenRequest) o;
        return Objects.equals(this.vaultAccountId, createMultichainTokenRequest.vaultAccountId)
                && Objects.equals(this.createParams, createMultichainTokenRequest.createParams)
                && Objects.equals(this.salt, createMultichainTokenRequest.salt)
                && Objects.equals(this.chains, createMultichainTokenRequest.chains)
                && Objects.equals(this.displayName, createMultichainTokenRequest.displayName)
                && Objects.equals(this.useGasless, createMultichainTokenRequest.useGasless)
                && Objects.equals(this.fee, createMultichainTokenRequest.fee)
                && Objects.equals(this.feeLevel, createMultichainTokenRequest.feeLevel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                vaultAccountId, createParams, salt, chains, displayName, useGasless, fee, feeLevel);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateMultichainTokenRequest {\n");
        sb.append("    vaultAccountId: ").append(toIndentedString(vaultAccountId)).append("\n");
        sb.append("    createParams: ").append(toIndentedString(createParams)).append("\n");
        sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
        sb.append("    chains: ").append(toIndentedString(chains)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    useGasless: ").append(toIndentedString(useGasless)).append("\n");
        sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("    feeLevel: ").append(toIndentedString(feeLevel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `vaultAccountId` to the URL query string
        if (getVaultAccountId() != null) {
            joiner.add(
                    String.format(
                            "%svaultAccountId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getVaultAccountId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `createParams` to the URL query string
        if (getCreateParams() != null) {
            joiner.add(getCreateParams().toUrlQueryString(prefix + "createParams" + suffix));
        }

        // add `salt` to the URL query string
        if (getSalt() != null) {
            joiner.add(
                    String.format(
                            "%ssalt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getSalt()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `chains` to the URL query string
        if (getChains() != null) {
            for (int i = 0; i < getChains().size(); i++) {
                joiner.add(
                        String.format(
                                "%schains%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                String.valueOf(getChains().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        // add `displayName` to the URL query string
        if (getDisplayName() != null) {
            joiner.add(
                    String.format(
                            "%sdisplayName%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDisplayName()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `useGasless` to the URL query string
        if (getUseGasless() != null) {
            joiner.add(
                    String.format(
                            "%suseGasless%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getUseGasless()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `fee` to the URL query string
        if (getFee() != null) {
            joiner.add(
                    String.format(
                            "%sfee%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getFee()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `feeLevel` to the URL query string
        if (getFeeLevel() != null) {
            joiner.add(
                    String.format(
                            "%sfeeLevel%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getFeeLevel()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
