/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** Represents a national identifier for a person or entity */
@JsonPropertyOrder({
    TravelRuleValidateNationalIdentification.JSON_PROPERTY_COUNTRY_OF_ISSUE,
    TravelRuleValidateNationalIdentification.JSON_PROPERTY_NATIONAL_IDENTIFIER,
    TravelRuleValidateNationalIdentification.JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE,
    TravelRuleValidateNationalIdentification.JSON_PROPERTY_REGISTRATION_AUTHORITY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TravelRuleValidateNationalIdentification {
    public static final String JSON_PROPERTY_COUNTRY_OF_ISSUE = "countryOfIssue";
    private String countryOfIssue;

    public static final String JSON_PROPERTY_NATIONAL_IDENTIFIER = "nationalIdentifier";
    private String nationalIdentifier;

    /**
     * Type of national identifier. Acceptable values include: - &#39;PASSPORT&#39;: Passport number
     * - &#39;NATIONAL_ID&#39;: National identification number - &#39;TAX_ID&#39;: Tax
     * identification number - &#39;SOCIAL_SECURITY&#39;: Social security number
     */
    public enum NationalIdentifierTypeEnum {
        PASSPORT("PASSPORT"),

        NATIONAL_ID("NATIONAL_ID"),

        TAX_ID("TAX_ID"),

        SOCIAL_SECURITY("SOCIAL_SECURITY");

        private String value;

        NationalIdentifierTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static NationalIdentifierTypeEnum fromValue(String value) {
            for (NationalIdentifierTypeEnum b : NationalIdentifierTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE = "nationalIdentifierType";
    private NationalIdentifierTypeEnum nationalIdentifierType;

    public static final String JSON_PROPERTY_REGISTRATION_AUTHORITY = "registrationAuthority";
    private String registrationAuthority;

    public TravelRuleValidateNationalIdentification() {}

    public TravelRuleValidateNationalIdentification countryOfIssue(String countryOfIssue) {
        this.countryOfIssue = countryOfIssue;
        return this;
    }

    /**
     * Country that issued the national identifier (ISO-3166 Alpha-2 country code)
     *
     * @return countryOfIssue
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COUNTRY_OF_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCountryOfIssue() {
        return countryOfIssue;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_OF_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCountryOfIssue(String countryOfIssue) {
        this.countryOfIssue = countryOfIssue;
    }

    public TravelRuleValidateNationalIdentification nationalIdentifier(String nationalIdentifier) {
        this.nationalIdentifier = nationalIdentifier;
        return this;
    }

    /**
     * National identifier (max 35 characters)
     *
     * @return nationalIdentifier
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNationalIdentifier() {
        return nationalIdentifier;
    }

    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNationalIdentifier(String nationalIdentifier) {
        this.nationalIdentifier = nationalIdentifier;
    }

    public TravelRuleValidateNationalIdentification nationalIdentifierType(
            NationalIdentifierTypeEnum nationalIdentifierType) {
        this.nationalIdentifierType = nationalIdentifierType;
        return this;
    }

    /**
     * Type of national identifier. Acceptable values include: - &#39;PASSPORT&#39;: Passport number
     * - &#39;NATIONAL_ID&#39;: National identification number - &#39;TAX_ID&#39;: Tax
     * identification number - &#39;SOCIAL_SECURITY&#39;: Social security number
     *
     * @return nationalIdentifierType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public NationalIdentifierTypeEnum getNationalIdentifierType() {
        return nationalIdentifierType;
    }

    @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNationalIdentifierType(NationalIdentifierTypeEnum nationalIdentifierType) {
        this.nationalIdentifierType = nationalIdentifierType;
    }

    public TravelRuleValidateNationalIdentification registrationAuthority(
            String registrationAuthority) {
        this.registrationAuthority = registrationAuthority;
        return this;
    }

    /**
     * Registration authority (format -&gt; RA followed by 6 digits)
     *
     * @return registrationAuthority
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REGISTRATION_AUTHORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRegistrationAuthority() {
        return registrationAuthority;
    }

    @JsonProperty(JSON_PROPERTY_REGISTRATION_AUTHORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRegistrationAuthority(String registrationAuthority) {
        this.registrationAuthority = registrationAuthority;
    }

    /** Return true if this TravelRuleValidateNationalIdentification object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TravelRuleValidateNationalIdentification travelRuleValidateNationalIdentification =
                (TravelRuleValidateNationalIdentification) o;
        return Objects.equals(
                        this.countryOfIssue,
                        travelRuleValidateNationalIdentification.countryOfIssue)
                && Objects.equals(
                        this.nationalIdentifier,
                        travelRuleValidateNationalIdentification.nationalIdentifier)
                && Objects.equals(
                        this.nationalIdentifierType,
                        travelRuleValidateNationalIdentification.nationalIdentifierType)
                && Objects.equals(
                        this.registrationAuthority,
                        travelRuleValidateNationalIdentification.registrationAuthority);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                countryOfIssue, nationalIdentifier, nationalIdentifierType, registrationAuthority);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TravelRuleValidateNationalIdentification {\n");
        sb.append("    countryOfIssue: ").append(toIndentedString(countryOfIssue)).append("\n");
        sb.append("    nationalIdentifier: ")
                .append(toIndentedString(nationalIdentifier))
                .append("\n");
        sb.append("    nationalIdentifierType: ")
                .append(toIndentedString(nationalIdentifierType))
                .append("\n");
        sb.append("    registrationAuthority: ")
                .append(toIndentedString(registrationAuthority))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `countryOfIssue` to the URL query string
        if (getCountryOfIssue() != null) {
            joiner.add(
                    String.format(
                            "%scountryOfIssue%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCountryOfIssue()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `nationalIdentifier` to the URL query string
        if (getNationalIdentifier() != null) {
            joiner.add(
                    String.format(
                            "%snationalIdentifier%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getNationalIdentifier()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `nationalIdentifierType` to the URL query string
        if (getNationalIdentifierType() != null) {
            joiner.add(
                    String.format(
                            "%snationalIdentifierType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getNationalIdentifierType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `registrationAuthority` to the URL query string
        if (getRegistrationAuthority() != null) {
            joiner.add(
                    String.format(
                            "%sregistrationAuthority%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getRegistrationAuthority()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
