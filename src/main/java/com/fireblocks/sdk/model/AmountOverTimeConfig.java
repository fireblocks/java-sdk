/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** Amount over time configuration */
@JsonPropertyOrder({
    AmountOverTimeConfig.JSON_PROPERTY_RANGE,
    AmountOverTimeConfig.JSON_PROPERTY_CURRENCY,
    AmountOverTimeConfig.JSON_PROPERTY_TIME_PERIOD
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class AmountOverTimeConfig {
    public static final String JSON_PROPERTY_RANGE = "range";
    @jakarta.annotation.Nonnull private AmountOverTimeConfigRange range;

    /** Currency for the amount */
    public enum CurrencyEnum {
        NATIVE(String.valueOf("NATIVE")),

        USD(String.valueOf("USD")),

        EUR(String.valueOf("EUR"));

        private String value;

        CurrencyEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static CurrencyEnum fromValue(String value) {
            for (CurrencyEnum b : CurrencyEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_CURRENCY = "currency";
    @jakarta.annotation.Nullable private CurrencyEnum currency;

    public static final String JSON_PROPERTY_TIME_PERIOD = "timePeriod";
    @jakarta.annotation.Nonnull private TimePeriodConfig timePeriod;

    public AmountOverTimeConfig() {}

    @JsonCreator
    public AmountOverTimeConfig(
            @JsonProperty(value = JSON_PROPERTY_RANGE, required = true)
                    AmountOverTimeConfigRange range,
            @JsonProperty(value = JSON_PROPERTY_TIME_PERIOD, required = true)
                    TimePeriodConfig timePeriod) {
        this.range = range;
        this.timePeriod = timePeriod;
    }

    public AmountOverTimeConfig range(@jakarta.annotation.Nonnull AmountOverTimeConfigRange range) {
        this.range = range;
        return this;
    }

    /**
     * Get range
     *
     * @return range
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RANGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AmountOverTimeConfigRange getRange() {
        return range;
    }

    @JsonProperty(JSON_PROPERTY_RANGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRange(@jakarta.annotation.Nonnull AmountOverTimeConfigRange range) {
        this.range = range;
    }

    public AmountOverTimeConfig currency(@jakarta.annotation.Nullable CurrencyEnum currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Currency for the amount
     *
     * @return currency
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CurrencyEnum getCurrency() {
        return currency;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCurrency(@jakarta.annotation.Nullable CurrencyEnum currency) {
        this.currency = currency;
    }

    public AmountOverTimeConfig timePeriod(
            @jakarta.annotation.Nonnull TimePeriodConfig timePeriod) {
        this.timePeriod = timePeriod;
        return this;
    }

    /**
     * Get timePeriod
     *
     * @return timePeriod
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIME_PERIOD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TimePeriodConfig getTimePeriod() {
        return timePeriod;
    }

    @JsonProperty(JSON_PROPERTY_TIME_PERIOD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimePeriod(@jakarta.annotation.Nonnull TimePeriodConfig timePeriod) {
        this.timePeriod = timePeriod;
    }

    /** Return true if this AmountOverTimeConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AmountOverTimeConfig amountOverTimeConfig = (AmountOverTimeConfig) o;
        return Objects.equals(this.range, amountOverTimeConfig.range)
                && Objects.equals(this.currency, amountOverTimeConfig.currency)
                && Objects.equals(this.timePeriod, amountOverTimeConfig.timePeriod);
    }

    @Override
    public int hashCode() {
        return Objects.hash(range, currency, timePeriod);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AmountOverTimeConfig {\n");
        sb.append("    range: ").append(toIndentedString(range)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `range` to the URL query string
        if (getRange() != null) {
            joiner.add(getRange().toUrlQueryString(prefix + "range" + suffix));
        }

        // add `currency` to the URL query string
        if (getCurrency() != null) {
            joiner.add(
                    String.format(
                            "%scurrency%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCurrency()))));
        }

        // add `timePeriod` to the URL query string
        if (getTimePeriod() != null) {
            joiner.add(getTimePeriod().toUrlQueryString(prefix + "timePeriod" + suffix));
        }

        return joiner.toString();
    }
}
