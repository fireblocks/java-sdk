/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** Time period configuration */
@JsonPropertyOrder({
    TimePeriodConfig.JSON_PROPERTY_SECONDS,
    TimePeriodConfig.JSON_PROPERTY_INITIATOR,
    TimePeriodConfig.JSON_PROPERTY_SOURCE,
    TimePeriodConfig.JSON_PROPERTY_DESTINATION
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class TimePeriodConfig {
    public static final String JSON_PROPERTY_SECONDS = "seconds";
    @jakarta.annotation.Nonnull private String seconds;

    public static final String JSON_PROPERTY_INITIATOR = "initiator";
    @jakarta.annotation.Nonnull private TimePeriodMatchType initiator;

    public static final String JSON_PROPERTY_SOURCE = "source";
    @jakarta.annotation.Nonnull private TimePeriodMatchType source;

    public static final String JSON_PROPERTY_DESTINATION = "destination";
    @jakarta.annotation.Nonnull private TimePeriodMatchType destination;

    public TimePeriodConfig() {}

    @JsonCreator
    public TimePeriodConfig(
            @JsonProperty(value = JSON_PROPERTY_SECONDS, required = true) String seconds,
            @JsonProperty(value = JSON_PROPERTY_INITIATOR, required = true)
                    TimePeriodMatchType initiator,
            @JsonProperty(value = JSON_PROPERTY_SOURCE, required = true) TimePeriodMatchType source,
            @JsonProperty(value = JSON_PROPERTY_DESTINATION, required = true)
                    TimePeriodMatchType destination) {
        this.seconds = seconds;
        this.initiator = initiator;
        this.source = source;
        this.destination = destination;
    }

    public TimePeriodConfig seconds(@jakarta.annotation.Nonnull String seconds) {
        this.seconds = seconds;
        return this;
    }

    /**
     * Time period in seconds
     *
     * @return seconds
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SECONDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSeconds() {
        return seconds;
    }

    @JsonProperty(JSON_PROPERTY_SECONDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSeconds(@jakarta.annotation.Nonnull String seconds) {
        this.seconds = seconds;
    }

    public TimePeriodConfig initiator(@jakarta.annotation.Nonnull TimePeriodMatchType initiator) {
        this.initiator = initiator;
        return this;
    }

    /**
     * Get initiator
     *
     * @return initiator
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INITIATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TimePeriodMatchType getInitiator() {
        return initiator;
    }

    @JsonProperty(JSON_PROPERTY_INITIATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInitiator(@jakarta.annotation.Nonnull TimePeriodMatchType initiator) {
        this.initiator = initiator;
    }

    public TimePeriodConfig source(@jakarta.annotation.Nonnull TimePeriodMatchType source) {
        this.source = source;
        return this;
    }

    /**
     * Get source
     *
     * @return source
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TimePeriodMatchType getSource() {
        return source;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSource(@jakarta.annotation.Nonnull TimePeriodMatchType source) {
        this.source = source;
    }

    public TimePeriodConfig destination(
            @jakarta.annotation.Nonnull TimePeriodMatchType destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get destination
     *
     * @return destination
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DESTINATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TimePeriodMatchType getDestination() {
        return destination;
    }

    @JsonProperty(JSON_PROPERTY_DESTINATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDestination(@jakarta.annotation.Nonnull TimePeriodMatchType destination) {
        this.destination = destination;
    }

    /** Return true if this TimePeriodConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimePeriodConfig timePeriodConfig = (TimePeriodConfig) o;
        return Objects.equals(this.seconds, timePeriodConfig.seconds)
                && Objects.equals(this.initiator, timePeriodConfig.initiator)
                && Objects.equals(this.source, timePeriodConfig.source)
                && Objects.equals(this.destination, timePeriodConfig.destination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(seconds, initiator, source, destination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TimePeriodConfig {\n");
        sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
        sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `seconds` to the URL query string
        if (getSeconds() != null) {
            joiner.add(
                    String.format(
                            "%sseconds%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSeconds()))));
        }

        // add `initiator` to the URL query string
        if (getInitiator() != null) {
            joiner.add(
                    String.format(
                            "%sinitiator%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getInitiator()))));
        }

        // add `source` to the URL query string
        if (getSource() != null) {
            joiner.add(
                    String.format(
                            "%ssource%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSource()))));
        }

        // add `destination` to the URL query string
        if (getDestination() != null) {
            joiner.add(
                    String.format(
                            "%sdestination%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDestination()))));
        }

        return joiner.toString();
    }
}
