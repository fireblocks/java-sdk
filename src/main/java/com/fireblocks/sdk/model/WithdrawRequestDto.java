/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** WithdrawRequestDto */
@JsonPropertyOrder({
    WithdrawRequestDto.JSON_PROPERTY_ID,
    WithdrawRequestDto.JSON_PROPERTY_FEE,
    WithdrawRequestDto.JSON_PROPERTY_FEE_LEVEL,
    WithdrawRequestDto.JSON_PROPERTY_TX_NOTE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class WithdrawRequestDto {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_FEE = "fee";
    @jakarta.annotation.Nullable private String fee;

    public static final String JSON_PROPERTY_FEE_LEVEL = "feeLevel";
    @jakarta.annotation.Nullable private String feeLevel;

    public static final String JSON_PROPERTY_TX_NOTE = "txNote";
    @jakarta.annotation.Nullable private String txNote;

    public WithdrawRequestDto() {}

    @JsonCreator
    public WithdrawRequestDto(@JsonProperty(value = JSON_PROPERTY_ID, required = true) String id) {
        this.id = id;
    }

    public WithdrawRequestDto id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * id of position to withdraw
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public WithdrawRequestDto fee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Represents the fee for a transaction, which can be specified as a percentage value. Only one
     * of fee/feeLevel is required.
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFee() {
        return fee;
    }

    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public WithdrawRequestDto feeLevel(@jakarta.annotation.Nullable String feeLevel) {
        this.feeLevel = feeLevel;
        return this;
    }

    /**
     * Represents the fee level for a transaction, which can be set as slow, medium, or fast. Only
     * one of fee/feeLevel is required.
     *
     * @return feeLevel
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFeeLevel() {
        return feeLevel;
    }

    @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeeLevel(@jakarta.annotation.Nullable String feeLevel) {
        this.feeLevel = feeLevel;
    }

    public WithdrawRequestDto txNote(@jakarta.annotation.Nullable String txNote) {
        this.txNote = txNote;
        return this;
    }

    /**
     * The note to associate with the transactions.
     *
     * @return txNote
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TX_NOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTxNote() {
        return txNote;
    }

    @JsonProperty(JSON_PROPERTY_TX_NOTE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTxNote(@jakarta.annotation.Nullable String txNote) {
        this.txNote = txNote;
    }

    /** Return true if this WithdrawRequestDto object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WithdrawRequestDto withdrawRequestDto = (WithdrawRequestDto) o;
        return Objects.equals(this.id, withdrawRequestDto.id)
                && Objects.equals(this.fee, withdrawRequestDto.fee)
                && Objects.equals(this.feeLevel, withdrawRequestDto.feeLevel)
                && Objects.equals(this.txNote, withdrawRequestDto.txNote);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, fee, feeLevel, txNote);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WithdrawRequestDto {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("    feeLevel: ").append(toIndentedString(feeLevel)).append("\n");
        sb.append("    txNote: ").append(toIndentedString(txNote)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `fee` to the URL query string
        if (getFee() != null) {
            joiner.add(
                    String.format(
                            "%sfee%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFee()))));
        }

        // add `feeLevel` to the URL query string
        if (getFeeLevel() != null) {
            joiner.add(
                    String.format(
                            "%sfeeLevel%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFeeLevel()))));
        }

        // add `txNote` to the URL query string
        if (getTxNote() != null) {
            joiner.add(
                    String.format(
                            "%stxNote%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTxNote()))));
        }

        return joiner.toString();
    }
}
