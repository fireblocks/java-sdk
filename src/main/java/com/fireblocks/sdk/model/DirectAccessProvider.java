/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** DirectAccessProvider */
@JsonPropertyOrder({
    DirectAccessProvider.JSON_PROPERTY_ID,
    DirectAccessProvider.JSON_PROPERTY_NAME,
    DirectAccessProvider.JSON_PROPERTY_LOGO,
    DirectAccessProvider.JSON_PROPERTY_ACCOUNT_BASED,
    DirectAccessProvider.JSON_PROPERTY_APPROVED,
    DirectAccessProvider.JSON_PROPERTY_HAS_TERMS_OF_SERVICE,
    DirectAccessProvider.JSON_PROPERTY_TERMS_OF_SERVICE_URL
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class DirectAccessProvider {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_LOGO = "logo";
    @jakarta.annotation.Nullable private String logo;

    public static final String JSON_PROPERTY_ACCOUNT_BASED = "accountBased";
    @jakarta.annotation.Nonnull private Boolean accountBased;

    public static final String JSON_PROPERTY_APPROVED = "approved";
    @jakarta.annotation.Nullable private Boolean approved;

    public static final String JSON_PROPERTY_HAS_TERMS_OF_SERVICE = "hasTermsOfService";
    @jakarta.annotation.Nonnull private Boolean hasTermsOfService;

    public static final String JSON_PROPERTY_TERMS_OF_SERVICE_URL = "termsOfServiceUrl";
    @jakarta.annotation.Nullable private String termsOfServiceUrl;

    public DirectAccessProvider() {}

    @JsonCreator
    public DirectAccessProvider(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_NAME, required = true) String name,
            @JsonProperty(value = JSON_PROPERTY_ACCOUNT_BASED, required = true)
                    Boolean accountBased,
            @JsonProperty(value = JSON_PROPERTY_HAS_TERMS_OF_SERVICE, required = true)
                    Boolean hasTermsOfService) {
        this.id = id;
        this.name = name;
        this.accountBased = accountBased;
        this.hasTermsOfService = hasTermsOfService;
    }

    public DirectAccessProvider id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier for the provider
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public DirectAccessProvider name(@jakarta.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Display name of the provider
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@jakarta.annotation.Nonnull String name) {
        this.name = name;
    }

    public DirectAccessProvider logo(@jakarta.annotation.Nullable String logo) {
        this.logo = logo;
        return this;
    }

    /**
     * URL to the logo image of the provider
     *
     * @return logo
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LOGO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLogo() {
        return logo;
    }

    @JsonProperty(JSON_PROPERTY_LOGO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLogo(@jakarta.annotation.Nullable String logo) {
        this.logo = logo;
    }

    public DirectAccessProvider accountBased(@jakarta.annotation.Nonnull Boolean accountBased) {
        this.accountBased = accountBased;
        return this;
    }

    /**
     * Indicates whether the provider access model is through accounts or directly
     *
     * @return accountBased
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ACCOUNT_BASED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getAccountBased() {
        return accountBased;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT_BASED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccountBased(@jakarta.annotation.Nonnull Boolean accountBased) {
        this.accountBased = accountBased;
    }

    public DirectAccessProvider approved(@jakarta.annotation.Nullable Boolean approved) {
        this.approved = approved;
        return this;
    }

    /**
     * Whether the provider was approved for use
     *
     * @return approved
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPROVED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getApproved() {
        return approved;
    }

    @JsonProperty(JSON_PROPERTY_APPROVED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApproved(@jakarta.annotation.Nullable Boolean approved) {
        this.approved = approved;
    }

    public DirectAccessProvider hasTermsOfService(
            @jakarta.annotation.Nonnull Boolean hasTermsOfService) {
        this.hasTermsOfService = hasTermsOfService;
        return this;
    }

    /**
     * Whether the provider has terms of service
     *
     * @return hasTermsOfService
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_HAS_TERMS_OF_SERVICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getHasTermsOfService() {
        return hasTermsOfService;
    }

    @JsonProperty(JSON_PROPERTY_HAS_TERMS_OF_SERVICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setHasTermsOfService(@jakarta.annotation.Nonnull Boolean hasTermsOfService) {
        this.hasTermsOfService = hasTermsOfService;
    }

    public DirectAccessProvider termsOfServiceUrl(
            @jakarta.annotation.Nullable String termsOfServiceUrl) {
        this.termsOfServiceUrl = termsOfServiceUrl;
        return this;
    }

    /**
     * URL to the terms of service document
     *
     * @return termsOfServiceUrl
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TERMS_OF_SERVICE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTermsOfServiceUrl() {
        return termsOfServiceUrl;
    }

    @JsonProperty(JSON_PROPERTY_TERMS_OF_SERVICE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTermsOfServiceUrl(@jakarta.annotation.Nullable String termsOfServiceUrl) {
        this.termsOfServiceUrl = termsOfServiceUrl;
    }

    /** Return true if this DirectAccessProvider object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectAccessProvider directAccessProvider = (DirectAccessProvider) o;
        return Objects.equals(this.id, directAccessProvider.id)
                && Objects.equals(this.name, directAccessProvider.name)
                && Objects.equals(this.logo, directAccessProvider.logo)
                && Objects.equals(this.accountBased, directAccessProvider.accountBased)
                && Objects.equals(this.approved, directAccessProvider.approved)
                && Objects.equals(this.hasTermsOfService, directAccessProvider.hasTermsOfService)
                && Objects.equals(this.termsOfServiceUrl, directAccessProvider.termsOfServiceUrl);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id, name, logo, accountBased, approved, hasTermsOfService, termsOfServiceUrl);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DirectAccessProvider {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
        sb.append("    accountBased: ").append(toIndentedString(accountBased)).append("\n");
        sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
        sb.append("    hasTermsOfService: ")
                .append(toIndentedString(hasTermsOfService))
                .append("\n");
        sb.append("    termsOfServiceUrl: ")
                .append(toIndentedString(termsOfServiceUrl))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `logo` to the URL query string
        if (getLogo() != null) {
            joiner.add(
                    String.format(
                            "%slogo%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLogo()))));
        }

        // add `accountBased` to the URL query string
        if (getAccountBased() != null) {
            joiner.add(
                    String.format(
                            "%saccountBased%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAccountBased()))));
        }

        // add `approved` to the URL query string
        if (getApproved() != null) {
            joiner.add(
                    String.format(
                            "%sapproved%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getApproved()))));
        }

        // add `hasTermsOfService` to the URL query string
        if (getHasTermsOfService() != null) {
            joiner.add(
                    String.format(
                            "%shasTermsOfService%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getHasTermsOfService()))));
        }

        // add `termsOfServiceUrl` to the URL query string
        if (getTermsOfServiceUrl() != null) {
            joiner.add(
                    String.format(
                            "%stermsOfServiceUrl%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTermsOfServiceUrl()))));
        }

        return joiner.toString();
    }
}
