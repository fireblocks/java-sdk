/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** AssetDetailsMetadata */
@JsonPropertyOrder({
    AssetDetailsMetadata.JSON_PROPERTY_SCOPE,
    AssetDetailsMetadata.JSON_PROPERTY_DEPRECATED,
    AssetDetailsMetadata.JSON_PROPERTY_DEPRECATION_REFERRAL_ID,
    AssetDetailsMetadata.JSON_PROPERTY_WEBSITE,
    AssetDetailsMetadata.JSON_PROPERTY_MEDIA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AssetDetailsMetadata {
    public static final String JSON_PROPERTY_SCOPE = "scope";
    private AssetScope scope;

    public static final String JSON_PROPERTY_DEPRECATED = "deprecated";
    private Boolean deprecated;

    public static final String JSON_PROPERTY_DEPRECATION_REFERRAL_ID = "deprecationReferralId";
    private String deprecationReferralId;

    public static final String JSON_PROPERTY_WEBSITE = "website";
    private String website;

    public static final String JSON_PROPERTY_MEDIA = "media";
    private List<AssetMedia> media;

    public AssetDetailsMetadata() {}

    public AssetDetailsMetadata scope(AssetScope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AssetScope getScope() {
        return scope;
    }

    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setScope(AssetScope scope) {
        this.scope = scope;
    }

    public AssetDetailsMetadata deprecated(Boolean deprecated) {
        this.deprecated = deprecated;
        return this;
    }

    /**
     * Is asset deprecated
     *
     * @return deprecated
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DEPRECATED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getDeprecated() {
        return deprecated;
    }

    @JsonProperty(JSON_PROPERTY_DEPRECATED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDeprecated(Boolean deprecated) {
        this.deprecated = deprecated;
    }

    public AssetDetailsMetadata deprecationReferralId(String deprecationReferralId) {
        this.deprecationReferralId = deprecationReferralId;
        return this;
    }

    /**
     * New asset ID replacement
     *
     * @return deprecationReferralId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DEPRECATION_REFERRAL_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDeprecationReferralId() {
        return deprecationReferralId;
    }

    @JsonProperty(JSON_PROPERTY_DEPRECATION_REFERRAL_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeprecationReferralId(String deprecationReferralId) {
        this.deprecationReferralId = deprecationReferralId;
    }

    public AssetDetailsMetadata website(String website) {
        this.website = website;
        return this;
    }

    /**
     * Vendor’s website
     *
     * @return website
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WEBSITE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getWebsite() {
        return website;
    }

    @JsonProperty(JSON_PROPERTY_WEBSITE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWebsite(String website) {
        this.website = website;
    }

    public AssetDetailsMetadata media(List<AssetMedia> media) {
        this.media = media;
        return this;
    }

    public AssetDetailsMetadata addMediaItem(AssetMedia mediaItem) {
        if (this.media == null) {
            this.media = new ArrayList<>();
        }
        this.media.add(mediaItem);
        return this;
    }

    /**
     * Asset’s media
     *
     * @return media
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<AssetMedia> getMedia() {
        return media;
    }

    @JsonProperty(JSON_PROPERTY_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMedia(List<AssetMedia> media) {
        this.media = media;
    }

    /** Return true if this AssetDetailsMetadata object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetDetailsMetadata assetDetailsMetadata = (AssetDetailsMetadata) o;
        return Objects.equals(this.scope, assetDetailsMetadata.scope)
                && Objects.equals(this.deprecated, assetDetailsMetadata.deprecated)
                && Objects.equals(
                        this.deprecationReferralId, assetDetailsMetadata.deprecationReferralId)
                && Objects.equals(this.website, assetDetailsMetadata.website)
                && Objects.equals(this.media, assetDetailsMetadata.media);
    }

    @Override
    public int hashCode() {
        return Objects.hash(scope, deprecated, deprecationReferralId, website, media);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AssetDetailsMetadata {\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
        sb.append("    deprecationReferralId: ")
                .append(toIndentedString(deprecationReferralId))
                .append("\n");
        sb.append("    website: ").append(toIndentedString(website)).append("\n");
        sb.append("    media: ").append(toIndentedString(media)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `scope` to the URL query string
        if (getScope() != null) {
            joiner.add(
                    String.format(
                            "%sscope%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getScope()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `deprecated` to the URL query string
        if (getDeprecated() != null) {
            joiner.add(
                    String.format(
                            "%sdeprecated%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDeprecated()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `deprecationReferralId` to the URL query string
        if (getDeprecationReferralId() != null) {
            joiner.add(
                    String.format(
                            "%sdeprecationReferralId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getDeprecationReferralId()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `website` to the URL query string
        if (getWebsite() != null) {
            joiner.add(
                    String.format(
                            "%swebsite%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getWebsite()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `media` to the URL query string
        if (getMedia() != null) {
            for (int i = 0; i < getMedia().size(); i++) {
                if (getMedia().get(i) != null) {
                    joiner.add(
                            getMedia()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%smedia%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
