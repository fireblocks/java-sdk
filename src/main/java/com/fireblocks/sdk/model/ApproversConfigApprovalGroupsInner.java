/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** ApproversConfigApprovalGroupsInner */
@JsonPropertyOrder({
    ApproversConfigApprovalGroupsInner.JSON_PROPERTY_THRESHOLD,
    ApproversConfigApprovalGroupsInner.JSON_PROPERTY_USERS,
    ApproversConfigApprovalGroupsInner.JSON_PROPERTY_GROUPS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ApproversConfigApprovalGroupsInner {
    public static final String JSON_PROPERTY_THRESHOLD = "threshold";
    @jakarta.annotation.Nonnull private BigDecimal threshold;

    public static final String JSON_PROPERTY_USERS = "users";
    @jakarta.annotation.Nullable private List<String> users;

    public static final String JSON_PROPERTY_GROUPS = "groups";
    @jakarta.annotation.Nullable private List<String> groups;

    public ApproversConfigApprovalGroupsInner() {}

    @JsonCreator
    public ApproversConfigApprovalGroupsInner(
            @JsonProperty(value = JSON_PROPERTY_THRESHOLD, required = true) BigDecimal threshold) {
        this.threshold = threshold;
    }

    public ApproversConfigApprovalGroupsInner threshold(
            @jakarta.annotation.Nonnull BigDecimal threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Approval threshold
     *
     * @return threshold
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getThreshold() {
        return threshold;
    }

    @JsonProperty(JSON_PROPERTY_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setThreshold(@jakarta.annotation.Nonnull BigDecimal threshold) {
        this.threshold = threshold;
    }

    public ApproversConfigApprovalGroupsInner users(
            @jakarta.annotation.Nullable List<String> users) {
        this.users = users;
        return this;
    }

    public ApproversConfigApprovalGroupsInner addUsersItem(String usersItem) {
        if (this.users == null) {
            this.users = new ArrayList<>();
        }
        this.users.add(usersItem);
        return this;
    }

    /**
     * List of user IDs
     *
     * @return users
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getUsers() {
        return users;
    }

    @JsonProperty(JSON_PROPERTY_USERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUsers(@jakarta.annotation.Nullable List<String> users) {
        this.users = users;
    }

    public ApproversConfigApprovalGroupsInner groups(
            @jakarta.annotation.Nullable List<String> groups) {
        this.groups = groups;
        return this;
    }

    public ApproversConfigApprovalGroupsInner addGroupsItem(String groupsItem) {
        if (this.groups == null) {
            this.groups = new ArrayList<>();
        }
        this.groups.add(groupsItem);
        return this;
    }

    /**
     * List of policy group IDs
     *
     * @return groups
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getGroups() {
        return groups;
    }

    @JsonProperty(JSON_PROPERTY_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGroups(@jakarta.annotation.Nullable List<String> groups) {
        this.groups = groups;
    }

    /** Return true if this ApproversConfig_approvalGroups_inner object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApproversConfigApprovalGroupsInner approversConfigApprovalGroupsInner =
                (ApproversConfigApprovalGroupsInner) o;
        return Objects.equals(this.threshold, approversConfigApprovalGroupsInner.threshold)
                && Objects.equals(this.users, approversConfigApprovalGroupsInner.users)
                && Objects.equals(this.groups, approversConfigApprovalGroupsInner.groups);
    }

    @Override
    public int hashCode() {
        return Objects.hash(threshold, users, groups);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApproversConfigApprovalGroupsInner {\n");
        sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
        sb.append("    users: ").append(toIndentedString(users)).append("\n");
        sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `threshold` to the URL query string
        if (getThreshold() != null) {
            joiner.add(
                    String.format(
                            "%sthreshold%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getThreshold()))));
        }

        // add `users` to the URL query string
        if (getUsers() != null) {
            for (int i = 0; i < getUsers().size(); i++) {
                joiner.add(
                        String.format(
                                "%susers%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(ApiClient.valueToString(getUsers().get(i)))));
            }
        }

        // add `groups` to the URL query string
        if (getGroups() != null) {
            for (int i = 0; i < getGroups().size(); i++) {
                joiner.add(
                        String.format(
                                "%sgroups%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(ApiClient.valueToString(getGroups().get(i)))));
            }
        }

        return joiner.toString();
    }
}
