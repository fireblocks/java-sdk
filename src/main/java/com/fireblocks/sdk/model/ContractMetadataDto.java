/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fireblocks.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ContractMetadataDto
 */
@JsonPropertyOrder({
  ContractMetadataDto.JSON_PROPERTY_ID,
  ContractMetadataDto.JSON_PROPERTY_BLOCKCHAIN_ID,
  ContractMetadataDto.JSON_PROPERTY_CONTRACT_ADDRESS,
  ContractMetadataDto.JSON_PROPERTY_CONTRACT_TEMPLATE_ID,
  ContractMetadataDto.JSON_PROPERTY_VAULT_ACCOUNT_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContractMetadataDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_BLOCKCHAIN_ID = "blockchainId";
  private String blockchainId;

  public static final String JSON_PROPERTY_CONTRACT_ADDRESS = "contractAddress";
  private String contractAddress;

  public static final String JSON_PROPERTY_CONTRACT_TEMPLATE_ID = "contractTemplateId";
  private String contractTemplateId;

  public static final String JSON_PROPERTY_VAULT_ACCOUNT_ID = "vaultAccountId";
  private String vaultAccountId;

  public ContractMetadataDto() { 
  }

  public ContractMetadataDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The deployed contract ID
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public ContractMetadataDto blockchainId(String blockchainId) {
    this.blockchainId = blockchainId;
    return this;
  }

   /**
   * The blockchain ID
   * @return blockchainId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBlockchainId() {
    return blockchainId;
  }


  @JsonProperty(JSON_PROPERTY_BLOCKCHAIN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlockchainId(String blockchainId) {
    this.blockchainId = blockchainId;
  }


  public ContractMetadataDto contractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
    return this;
  }

   /**
   * The address of the token contract
   * @return contractAddress
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTRACT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContractAddress() {
    return contractAddress;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public ContractMetadataDto contractTemplateId(String contractTemplateId) {
    this.contractTemplateId = contractTemplateId;
    return this;
  }

   /**
   * The contract template ID
   * @return contractTemplateId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTRACT_TEMPLATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContractTemplateId() {
    return contractTemplateId;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT_TEMPLATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContractTemplateId(String contractTemplateId) {
    this.contractTemplateId = contractTemplateId;
  }


  public ContractMetadataDto vaultAccountId(String vaultAccountId) {
    this.vaultAccountId = vaultAccountId;
    return this;
  }

   /**
   * The vault account ID that initiated the request to issue the token
   * @return vaultAccountId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVaultAccountId() {
    return vaultAccountId;
  }


  @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVaultAccountId(String vaultAccountId) {
    this.vaultAccountId = vaultAccountId;
  }


  /**
   * Return true if this ContractMetadataDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractMetadataDto contractMetadataDto = (ContractMetadataDto) o;
    return Objects.equals(this.id, contractMetadataDto.id) &&
        Objects.equals(this.blockchainId, contractMetadataDto.blockchainId) &&
        Objects.equals(this.contractAddress, contractMetadataDto.contractAddress) &&
        Objects.equals(this.contractTemplateId, contractMetadataDto.contractTemplateId) &&
        Objects.equals(this.vaultAccountId, contractMetadataDto.vaultAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, blockchainId, contractAddress, contractTemplateId, vaultAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractMetadataDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    blockchainId: ").append(toIndentedString(blockchainId)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    contractTemplateId: ").append(toIndentedString(contractTemplateId)).append("\n");
    sb.append("    vaultAccountId: ").append(toIndentedString(vaultAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `blockchainId` to the URL query string
    if (getBlockchainId() != null) {
      joiner.add(String.format("%sblockchainId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBlockchainId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `contractAddress` to the URL query string
    if (getContractAddress() != null) {
      joiner.add(String.format("%scontractAddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContractAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `contractTemplateId` to the URL query string
    if (getContractTemplateId() != null) {
      joiner.add(String.format("%scontractTemplateId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContractTemplateId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `vaultAccountId` to the URL query string
    if (getVaultAccountId() != null) {
      joiner.add(String.format("%svaultAccountId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVaultAccountId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

