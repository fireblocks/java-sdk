/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** TransactionReceiptResponse */
@JsonPropertyOrder({
    TransactionReceiptResponse.JSON_PROPERTY_BLOCK_HASH,
    TransactionReceiptResponse.JSON_PROPERTY_BLOCK_NUMBER,
    TransactionReceiptResponse.JSON_PROPERTY_CONTRACT_ADDRESS,
    TransactionReceiptResponse.JSON_PROPERTY_CUMULATIVE_GAS_USED,
    TransactionReceiptResponse.JSON_PROPERTY_EFFECTIVE_GAS_PRICE,
    TransactionReceiptResponse.JSON_PROPERTY_FROM,
    TransactionReceiptResponse.JSON_PROPERTY_GAS_USED,
    TransactionReceiptResponse.JSON_PROPERTY_LOGS,
    TransactionReceiptResponse.JSON_PROPERTY_LOGS_BLOOM,
    TransactionReceiptResponse.JSON_PROPERTY_STATUS,
    TransactionReceiptResponse.JSON_PROPERTY_TO,
    TransactionReceiptResponse.JSON_PROPERTY_TRANSACTION_HASH,
    TransactionReceiptResponse.JSON_PROPERTY_TRANSACTION_INDEX,
    TransactionReceiptResponse.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class TransactionReceiptResponse {
    public static final String JSON_PROPERTY_BLOCK_HASH = "blockHash";
    @jakarta.annotation.Nonnull private String blockHash;

    public static final String JSON_PROPERTY_BLOCK_NUMBER = "blockNumber";
    @jakarta.annotation.Nonnull private Integer blockNumber;

    public static final String JSON_PROPERTY_CONTRACT_ADDRESS = "contractAddress";
    @jakarta.annotation.Nullable private String contractAddress;

    public static final String JSON_PROPERTY_CUMULATIVE_GAS_USED = "cumulativeGasUsed";
    @jakarta.annotation.Nonnull private Integer cumulativeGasUsed;

    public static final String JSON_PROPERTY_EFFECTIVE_GAS_PRICE = "effectiveGasPrice";
    @jakarta.annotation.Nonnull private Integer effectiveGasPrice;

    public static final String JSON_PROPERTY_FROM = "from";
    @jakarta.annotation.Nonnull private String from;

    public static final String JSON_PROPERTY_GAS_USED = "gasUsed";
    @jakarta.annotation.Nonnull private Integer gasUsed;

    public static final String JSON_PROPERTY_LOGS = "logs";
    @jakarta.annotation.Nonnull private List<TxLog> logs;

    public static final String JSON_PROPERTY_LOGS_BLOOM = "logsBloom";
    @jakarta.annotation.Nonnull private String logsBloom;

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private Integer status;

    public static final String JSON_PROPERTY_TO = "to";
    @jakarta.annotation.Nullable private String to;

    public static final String JSON_PROPERTY_TRANSACTION_HASH = "transactionHash";
    @jakarta.annotation.Nonnull private String transactionHash;

    public static final String JSON_PROPERTY_TRANSACTION_INDEX = "transactionIndex";
    @jakarta.annotation.Nonnull private Integer transactionIndex;

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private String type;

    public TransactionReceiptResponse() {}

    @JsonCreator
    public TransactionReceiptResponse(
            @JsonProperty(value = JSON_PROPERTY_BLOCK_HASH, required = true) String blockHash,
            @JsonProperty(value = JSON_PROPERTY_BLOCK_NUMBER, required = true) Integer blockNumber,
            @JsonProperty(value = JSON_PROPERTY_CUMULATIVE_GAS_USED, required = true)
                    Integer cumulativeGasUsed,
            @JsonProperty(value = JSON_PROPERTY_EFFECTIVE_GAS_PRICE, required = true)
                    Integer effectiveGasPrice,
            @JsonProperty(value = JSON_PROPERTY_FROM, required = true) String from,
            @JsonProperty(value = JSON_PROPERTY_GAS_USED, required = true) Integer gasUsed,
            @JsonProperty(value = JSON_PROPERTY_LOGS, required = true) List<TxLog> logs,
            @JsonProperty(value = JSON_PROPERTY_LOGS_BLOOM, required = true) String logsBloom,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true) Integer status,
            @JsonProperty(value = JSON_PROPERTY_TRANSACTION_HASH, required = true)
                    String transactionHash,
            @JsonProperty(value = JSON_PROPERTY_TRANSACTION_INDEX, required = true)
                    Integer transactionIndex,
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) String type) {
        this.blockHash = blockHash;
        this.blockNumber = blockNumber;
        this.cumulativeGasUsed = cumulativeGasUsed;
        this.effectiveGasPrice = effectiveGasPrice;
        this.from = from;
        this.gasUsed = gasUsed;
        this.logs = logs;
        this.logsBloom = logsBloom;
        this.status = status;
        this.transactionHash = transactionHash;
        this.transactionIndex = transactionIndex;
        this.type = type;
    }

    public TransactionReceiptResponse blockHash(@jakarta.annotation.Nonnull String blockHash) {
        this.blockHash = blockHash;
        return this;
    }

    /**
     * The block hash
     *
     * @return blockHash
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BLOCK_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBlockHash() {
        return blockHash;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBlockHash(@jakarta.annotation.Nonnull String blockHash) {
        this.blockHash = blockHash;
    }

    public TransactionReceiptResponse blockNumber(@jakarta.annotation.Nonnull Integer blockNumber) {
        this.blockNumber = blockNumber;
        return this;
    }

    /**
     * The block number
     *
     * @return blockNumber
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_BLOCK_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getBlockNumber() {
        return blockNumber;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK_NUMBER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBlockNumber(@jakarta.annotation.Nonnull Integer blockNumber) {
        this.blockNumber = blockNumber;
    }

    public TransactionReceiptResponse contractAddress(
            @jakarta.annotation.Nullable String contractAddress) {
        this.contractAddress = contractAddress;
        return this;
    }

    /**
     * The address of deployed contract
     *
     * @return contractAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CONTRACT_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getContractAddress() {
        return contractAddress;
    }

    @JsonProperty(JSON_PROPERTY_CONTRACT_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setContractAddress(@jakarta.annotation.Nullable String contractAddress) {
        this.contractAddress = contractAddress;
    }

    public TransactionReceiptResponse cumulativeGasUsed(
            @jakarta.annotation.Nonnull Integer cumulativeGasUsed) {
        this.cumulativeGasUsed = cumulativeGasUsed;
        return this;
    }

    /**
     * The cumulative gas used in the transaction
     *
     * @return cumulativeGasUsed
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CUMULATIVE_GAS_USED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getCumulativeGasUsed() {
        return cumulativeGasUsed;
    }

    @JsonProperty(JSON_PROPERTY_CUMULATIVE_GAS_USED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCumulativeGasUsed(@jakarta.annotation.Nonnull Integer cumulativeGasUsed) {
        this.cumulativeGasUsed = cumulativeGasUsed;
    }

    public TransactionReceiptResponse effectiveGasPrice(
            @jakarta.annotation.Nonnull Integer effectiveGasPrice) {
        this.effectiveGasPrice = effectiveGasPrice;
        return this;
    }

    /**
     * The effective gas price
     *
     * @return effectiveGasPrice
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EFFECTIVE_GAS_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getEffectiveGasPrice() {
        return effectiveGasPrice;
    }

    @JsonProperty(JSON_PROPERTY_EFFECTIVE_GAS_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEffectiveGasPrice(@jakarta.annotation.Nonnull Integer effectiveGasPrice) {
        this.effectiveGasPrice = effectiveGasPrice;
    }

    public TransactionReceiptResponse from(@jakarta.annotation.Nonnull String from) {
        this.from = from;
        return this;
    }

    /**
     * Sender address
     *
     * @return from
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_FROM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFrom() {
        return from;
    }

    @JsonProperty(JSON_PROPERTY_FROM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFrom(@jakarta.annotation.Nonnull String from) {
        this.from = from;
    }

    public TransactionReceiptResponse gasUsed(@jakarta.annotation.Nonnull Integer gasUsed) {
        this.gasUsed = gasUsed;
        return this;
    }

    /**
     * Gas used by the transaction
     *
     * @return gasUsed
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_GAS_USED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getGasUsed() {
        return gasUsed;
    }

    @JsonProperty(JSON_PROPERTY_GAS_USED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setGasUsed(@jakarta.annotation.Nonnull Integer gasUsed) {
        this.gasUsed = gasUsed;
    }

    public TransactionReceiptResponse logs(@jakarta.annotation.Nonnull List<TxLog> logs) {
        this.logs = logs;
        return this;
    }

    public TransactionReceiptResponse addLogsItem(TxLog logsItem) {
        if (this.logs == null) {
            this.logs = new ArrayList<>();
        }
        this.logs.add(logsItem);
        return this;
    }

    /**
     * Array of transaction logs
     *
     * @return logs
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LOGS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<TxLog> getLogs() {
        return logs;
    }

    @JsonProperty(JSON_PROPERTY_LOGS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLogs(@jakarta.annotation.Nonnull List<TxLog> logs) {
        this.logs = logs;
    }

    public TransactionReceiptResponse logsBloom(@jakarta.annotation.Nonnull String logsBloom) {
        this.logsBloom = logsBloom;
        return this;
    }

    /**
     * Logs bloom filter
     *
     * @return logsBloom
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LOGS_BLOOM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getLogsBloom() {
        return logsBloom;
    }

    @JsonProperty(JSON_PROPERTY_LOGS_BLOOM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLogsBloom(@jakarta.annotation.Nonnull String logsBloom) {
        this.logsBloom = logsBloom;
    }

    public TransactionReceiptResponse status(@jakarta.annotation.Nonnull Integer status) {
        this.status = status;
        return this;
    }

    /**
     * Transaction status (1 for success, 0 for failure)
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull Integer status) {
        this.status = status;
    }

    public TransactionReceiptResponse to(@jakarta.annotation.Nullable String to) {
        this.to = to;
        return this;
    }

    /**
     * Recipient address
     *
     * @return to
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTo() {
        return to;
    }

    @JsonProperty(JSON_PROPERTY_TO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTo(@jakarta.annotation.Nullable String to) {
        this.to = to;
    }

    public TransactionReceiptResponse transactionHash(
            @jakarta.annotation.Nonnull String transactionHash) {
        this.transactionHash = transactionHash;
        return this;
    }

    /**
     * The transaction hash
     *
     * @return transactionHash
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTransactionHash() {
        return transactionHash;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTransactionHash(@jakarta.annotation.Nonnull String transactionHash) {
        this.transactionHash = transactionHash;
    }

    public TransactionReceiptResponse transactionIndex(
            @jakarta.annotation.Nonnull Integer transactionIndex) {
        this.transactionIndex = transactionIndex;
        return this;
    }

    /**
     * Transaction index in the block
     *
     * @return transactionIndex
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TRANSACTION_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTransactionIndex() {
        return transactionIndex;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION_INDEX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTransactionIndex(@jakarta.annotation.Nonnull Integer transactionIndex) {
        this.transactionIndex = transactionIndex;
    }

    public TransactionReceiptResponse type(@jakarta.annotation.Nonnull String type) {
        this.type = type;
        return this;
    }

    /**
     * Type of transaction
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull String type) {
        this.type = type;
    }

    /** Return true if this TransactionReceiptResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionReceiptResponse transactionReceiptResponse = (TransactionReceiptResponse) o;
        return Objects.equals(this.blockHash, transactionReceiptResponse.blockHash)
                && Objects.equals(this.blockNumber, transactionReceiptResponse.blockNumber)
                && Objects.equals(this.contractAddress, transactionReceiptResponse.contractAddress)
                && Objects.equals(
                        this.cumulativeGasUsed, transactionReceiptResponse.cumulativeGasUsed)
                && Objects.equals(
                        this.effectiveGasPrice, transactionReceiptResponse.effectiveGasPrice)
                && Objects.equals(this.from, transactionReceiptResponse.from)
                && Objects.equals(this.gasUsed, transactionReceiptResponse.gasUsed)
                && Objects.equals(this.logs, transactionReceiptResponse.logs)
                && Objects.equals(this.logsBloom, transactionReceiptResponse.logsBloom)
                && Objects.equals(this.status, transactionReceiptResponse.status)
                && Objects.equals(this.to, transactionReceiptResponse.to)
                && Objects.equals(this.transactionHash, transactionReceiptResponse.transactionHash)
                && Objects.equals(
                        this.transactionIndex, transactionReceiptResponse.transactionIndex)
                && Objects.equals(this.type, transactionReceiptResponse.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                blockHash,
                blockNumber,
                contractAddress,
                cumulativeGasUsed,
                effectiveGasPrice,
                from,
                gasUsed,
                logs,
                logsBloom,
                status,
                to,
                transactionHash,
                transactionIndex,
                type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionReceiptResponse {\n");
        sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
        sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
        sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
        sb.append("    cumulativeGasUsed: ")
                .append(toIndentedString(cumulativeGasUsed))
                .append("\n");
        sb.append("    effectiveGasPrice: ")
                .append(toIndentedString(effectiveGasPrice))
                .append("\n");
        sb.append("    from: ").append(toIndentedString(from)).append("\n");
        sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
        sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
        sb.append("    logsBloom: ").append(toIndentedString(logsBloom)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    to: ").append(toIndentedString(to)).append("\n");
        sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
        sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `blockHash` to the URL query string
        if (getBlockHash() != null) {
            joiner.add(
                    String.format(
                            "%sblockHash%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBlockHash()))));
        }

        // add `blockNumber` to the URL query string
        if (getBlockNumber() != null) {
            joiner.add(
                    String.format(
                            "%sblockNumber%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBlockNumber()))));
        }

        // add `contractAddress` to the URL query string
        if (getContractAddress() != null) {
            joiner.add(
                    String.format(
                            "%scontractAddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getContractAddress()))));
        }

        // add `cumulativeGasUsed` to the URL query string
        if (getCumulativeGasUsed() != null) {
            joiner.add(
                    String.format(
                            "%scumulativeGasUsed%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getCumulativeGasUsed()))));
        }

        // add `effectiveGasPrice` to the URL query string
        if (getEffectiveGasPrice() != null) {
            joiner.add(
                    String.format(
                            "%seffectiveGasPrice%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getEffectiveGasPrice()))));
        }

        // add `from` to the URL query string
        if (getFrom() != null) {
            joiner.add(
                    String.format(
                            "%sfrom%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFrom()))));
        }

        // add `gasUsed` to the URL query string
        if (getGasUsed() != null) {
            joiner.add(
                    String.format(
                            "%sgasUsed%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getGasUsed()))));
        }

        // add `logs` to the URL query string
        if (getLogs() != null) {
            for (int i = 0; i < getLogs().size(); i++) {
                if (getLogs().get(i) != null) {
                    joiner.add(
                            getLogs()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%slogs%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `logsBloom` to the URL query string
        if (getLogsBloom() != null) {
            joiner.add(
                    String.format(
                            "%slogsBloom%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLogsBloom()))));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `to` to the URL query string
        if (getTo() != null) {
            joiner.add(
                    String.format(
                            "%sto%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTo()))));
        }

        // add `transactionHash` to the URL query string
        if (getTransactionHash() != null) {
            joiner.add(
                    String.format(
                            "%stransactionHash%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTransactionHash()))));
        }

        // add `transactionIndex` to the URL query string
        if (getTransactionIndex() != null) {
            joiner.add(
                    String.format(
                            "%stransactionIndex%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTransactionIndex()))));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        return joiner.toString();
    }
}
