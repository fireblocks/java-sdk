/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** The accounts involved in the instruction */
@JsonPropertyOrder({
    SOLAccount.JSON_PROPERTY_NAME,
    SOLAccount.JSON_PROPERTY_SIGNER,
    SOLAccount.JSON_PROPERTY_WRITABLE,
    SOLAccount.JSON_PROPERTY_ADDRESS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class SOLAccount {
    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_SIGNER = "signer";
    @jakarta.annotation.Nullable private Boolean signer;

    public static final String JSON_PROPERTY_WRITABLE = "writable";
    @jakarta.annotation.Nullable private Boolean writable;

    public static final String JSON_PROPERTY_ADDRESS = "address";
    @jakarta.annotation.Nullable private String address;

    public SOLAccount() {}

    @JsonCreator
    public SOLAccount(@JsonProperty(value = JSON_PROPERTY_NAME, required = true) String name) {
        this.name = name;
    }

    public SOLAccount name(@jakarta.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the account
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@jakarta.annotation.Nonnull String name) {
        this.name = name;
    }

    public SOLAccount signer(@jakarta.annotation.Nullable Boolean signer) {
        this.signer = signer;
        return this;
    }

    /**
     * Indicates if the account needs to sign the instruction. If true a signature for this account
     * must be provided
     *
     * @return signer
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SIGNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSigner() {
        return signer;
    }

    @JsonProperty(JSON_PROPERTY_SIGNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSigner(@jakarta.annotation.Nullable Boolean signer) {
        this.signer = signer;
    }

    public SOLAccount writable(@jakarta.annotation.Nullable Boolean writable) {
        this.writable = writable;
        return this;
    }

    /**
     * Indicates if the account&#39;s data can be changed by the instruction.
     *
     * @return writable
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WRITABLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWritable() {
        return writable;
    }

    @JsonProperty(JSON_PROPERTY_WRITABLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWritable(@jakarta.annotation.Nullable Boolean writable) {
        this.writable = writable;
    }

    public SOLAccount address(@jakarta.annotation.Nullable String address) {
        this.address = address;
        return this;
    }

    /**
     * The address of the account
     *
     * @return address
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAddress() {
        return address;
    }

    @JsonProperty(JSON_PROPERTY_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAddress(@jakarta.annotation.Nullable String address) {
        this.address = address;
    }

    /** Return true if this SOLAccount object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SOLAccount soLAccount = (SOLAccount) o;
        return Objects.equals(this.name, soLAccount.name)
                && Objects.equals(this.signer, soLAccount.signer)
                && Objects.equals(this.writable, soLAccount.writable)
                && Objects.equals(this.address, soLAccount.address);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, signer, writable, address);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SOLAccount {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    signer: ").append(toIndentedString(signer)).append("\n");
        sb.append("    writable: ").append(toIndentedString(writable)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `signer` to the URL query string
        if (getSigner() != null) {
            joiner.add(
                    String.format(
                            "%ssigner%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSigner()))));
        }

        // add `writable` to the URL query string
        if (getWritable() != null) {
            joiner.add(
                    String.format(
                            "%swritable%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getWritable()))));
        }

        // add `address` to the URL query string
        if (getAddress() != null) {
            joiner.add(
                    String.format(
                            "%saddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAddress()))));
        }

        return joiner.toString();
    }
}
