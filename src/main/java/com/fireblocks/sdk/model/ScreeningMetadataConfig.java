/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** Screening metadata configuration */
@JsonPropertyOrder({
    ScreeningMetadataConfig.JSON_PROPERTY_DIRECTION,
    ScreeningMetadataConfig.JSON_PROPERTY_PROVIDER,
    ScreeningMetadataConfig.JSON_PROPERTY_RISK_RATING,
    ScreeningMetadataConfig.JSON_PROPERTY_RISK_SCORE,
    ScreeningMetadataConfig.JSON_PROPERTY_EXPOSURE_TYPE,
    ScreeningMetadataConfig.JSON_PROPERTY_CATEGORY,
    ScreeningMetadataConfig.JSON_PROPERTY_NAME,
    ScreeningMetadataConfig.JSON_PROPERTY_CATEGORY_ID,
    ScreeningMetadataConfig.JSON_PROPERTY_STATUS,
    ScreeningMetadataConfig.JSON_PROPERTY_SOURCE_ADDRESS,
    ScreeningMetadataConfig.JSON_PROPERTY_DEST_ADDRESS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ScreeningMetadataConfig {
    /** Direction of transaction */
    public enum DirectionEnum {
        INBOUND(String.valueOf("INBOUND")),

        OUTBOUND(String.valueOf("OUTBOUND")),

        ANY(String.valueOf("ANY"));

        private String value;

        DirectionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DirectionEnum fromValue(String value) {
            for (DirectionEnum b : DirectionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_DIRECTION = "direction";
    @jakarta.annotation.Nonnull private DirectionEnum direction;

    /** Screening provider */
    public enum ProviderEnum {
        CHAINALYSIS(String.valueOf("CHAINALYSIS")),

        CHAINALYSIS_V2(String.valueOf("CHAINALYSIS_V2")),

        ELLIPTIC(String.valueOf("ELLIPTIC")),

        ELLIPTIC_HOLISTIC(String.valueOf("ELLIPTIC_HOLISTIC")),

        NOTABENE(String.valueOf("NOTABENE"));

        private String value;

        ProviderEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ProviderEnum fromValue(String value) {
            for (ProviderEnum b : ProviderEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }
    }

    public static final String JSON_PROPERTY_PROVIDER = "provider";
    @jakarta.annotation.Nullable private ProviderEnum provider;

    /** Risk rating threshold */
    public enum RiskRatingEnum {
        LOW(String.valueOf("LOW")),

        MEDIUM(String.valueOf("MEDIUM")),

        HIGH(String.valueOf("HIGH")),

        SEVERE(String.valueOf("SEVERE")),

        ANY(String.valueOf("ANY"));

        private String value;

        RiskRatingEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RiskRatingEnum fromValue(String value) {
            for (RiskRatingEnum b : RiskRatingEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_RISK_RATING = "riskRating";
    @jakarta.annotation.Nullable private RiskRatingEnum riskRating;

    public static final String JSON_PROPERTY_RISK_SCORE = "riskScore";
    @jakarta.annotation.Nullable private String riskScore;

    /** Exposure type */
    public enum ExposureTypeEnum {
        DIRECT(String.valueOf("DIRECT")),

        INDIRECT(String.valueOf("INDIRECT")),

        ANY(String.valueOf("ANY"));

        private String value;

        ExposureTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ExposureTypeEnum fromValue(String value) {
            for (ExposureTypeEnum b : ExposureTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_EXPOSURE_TYPE = "exposureType";
    @jakarta.annotation.Nullable private ExposureTypeEnum exposureType;

    public static final String JSON_PROPERTY_CATEGORY = "category";
    @jakarta.annotation.Nullable private List<String> category = new ArrayList<>();

    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nullable private List<String> name = new ArrayList<>();

    public static final String JSON_PROPERTY_CATEGORY_ID = "categoryId";
    @jakarta.annotation.Nullable private List<String> categoryId = new ArrayList<>();

    /** Transaction status */
    public enum StatusEnum {
        COMPLETED(String.valueOf("COMPLETED")),

        PENDING(String.valueOf("PENDING")),

        REJECTED(String.valueOf("REJECTED")),

        FAILED(String.valueOf("FAILED")),

        CANCELED(String.valueOf("CANCELED")),

        BLOCKING_TIME_EXPIRED(String.valueOf("BLOCKING_TIME_EXPIRED"));

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nullable private StatusEnum status;

    public static final String JSON_PROPERTY_SOURCE_ADDRESS = "sourceAddress";
    @jakarta.annotation.Nullable private String sourceAddress;

    public static final String JSON_PROPERTY_DEST_ADDRESS = "destAddress";
    @jakarta.annotation.Nullable private String destAddress;

    public ScreeningMetadataConfig() {}

    @JsonCreator
    public ScreeningMetadataConfig(
            @JsonProperty(value = JSON_PROPERTY_DIRECTION, required = true)
                    DirectionEnum direction) {
        this.direction = direction;
    }

    public ScreeningMetadataConfig direction(@jakarta.annotation.Nonnull DirectionEnum direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Direction of transaction
     *
     * @return direction
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DIRECTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public DirectionEnum getDirection() {
        return direction;
    }

    @JsonProperty(JSON_PROPERTY_DIRECTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDirection(@jakarta.annotation.Nonnull DirectionEnum direction) {
        this.direction = direction;
    }

    public ScreeningMetadataConfig provider(@jakarta.annotation.Nullable ProviderEnum provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Screening provider
     *
     * @return provider
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROVIDER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ProviderEnum getProvider() {
        return provider;
    }

    @JsonProperty(JSON_PROPERTY_PROVIDER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProvider(@jakarta.annotation.Nullable ProviderEnum provider) {
        this.provider = provider;
    }

    public ScreeningMetadataConfig riskRating(
            @jakarta.annotation.Nullable RiskRatingEnum riskRating) {
        this.riskRating = riskRating;
        return this;
    }

    /**
     * Risk rating threshold
     *
     * @return riskRating
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RISK_RATING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public RiskRatingEnum getRiskRating() {
        return riskRating;
    }

    @JsonProperty(JSON_PROPERTY_RISK_RATING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRiskRating(@jakarta.annotation.Nullable RiskRatingEnum riskRating) {
        this.riskRating = riskRating;
    }

    public ScreeningMetadataConfig riskScore(@jakarta.annotation.Nullable String riskScore) {
        this.riskScore = riskScore;
        return this;
    }

    /**
     * Risk score threshold
     *
     * @return riskScore
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RISK_SCORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRiskScore() {
        return riskScore;
    }

    @JsonProperty(JSON_PROPERTY_RISK_SCORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRiskScore(@jakarta.annotation.Nullable String riskScore) {
        this.riskScore = riskScore;
    }

    public ScreeningMetadataConfig exposureType(
            @jakarta.annotation.Nullable ExposureTypeEnum exposureType) {
        this.exposureType = exposureType;
        return this;
    }

    /**
     * Exposure type
     *
     * @return exposureType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXPOSURE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ExposureTypeEnum getExposureType() {
        return exposureType;
    }

    @JsonProperty(JSON_PROPERTY_EXPOSURE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExposureType(@jakarta.annotation.Nullable ExposureTypeEnum exposureType) {
        this.exposureType = exposureType;
    }

    public ScreeningMetadataConfig category(@jakarta.annotation.Nullable List<String> category) {
        this.category = category;
        return this;
    }

    public ScreeningMetadataConfig addCategoryItem(String categoryItem) {
        if (this.category == null) {
            this.category = new ArrayList<>();
        }
        this.category.add(categoryItem);
        return this;
    }

    /**
     * Get category
     *
     * @return category
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getCategory() {
        return category;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCategory(@jakarta.annotation.Nullable List<String> category) {
        this.category = category;
    }

    public ScreeningMetadataConfig name(@jakarta.annotation.Nullable List<String> name) {
        this.name = name;
        return this;
    }

    public ScreeningMetadataConfig addNameItem(String nameItem) {
        if (this.name == null) {
            this.name = new ArrayList<>();
        }
        this.name.add(nameItem);
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(@jakarta.annotation.Nullable List<String> name) {
        this.name = name;
    }

    public ScreeningMetadataConfig categoryId(
            @jakarta.annotation.Nullable List<String> categoryId) {
        this.categoryId = categoryId;
        return this;
    }

    public ScreeningMetadataConfig addCategoryIdItem(String categoryIdItem) {
        if (this.categoryId == null) {
            this.categoryId = new ArrayList<>();
        }
        this.categoryId.add(categoryIdItem);
        return this;
    }

    /**
     * Get categoryId
     *
     * @return categoryId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getCategoryId() {
        return categoryId;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCategoryId(@jakarta.annotation.Nullable List<String> categoryId) {
        this.categoryId = categoryId;
    }

    public ScreeningMetadataConfig status(@jakarta.annotation.Nullable StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Transaction status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatus(@jakarta.annotation.Nullable StatusEnum status) {
        this.status = status;
    }

    public ScreeningMetadataConfig sourceAddress(
            @jakarta.annotation.Nullable String sourceAddress) {
        this.sourceAddress = sourceAddress;
        return this;
    }

    /**
     * Source address
     *
     * @return sourceAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SOURCE_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSourceAddress() {
        return sourceAddress;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSourceAddress(@jakarta.annotation.Nullable String sourceAddress) {
        this.sourceAddress = sourceAddress;
    }

    public ScreeningMetadataConfig destAddress(@jakarta.annotation.Nullable String destAddress) {
        this.destAddress = destAddress;
        return this;
    }

    /**
     * Destination address
     *
     * @return destAddress
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DEST_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDestAddress() {
        return destAddress;
    }

    @JsonProperty(JSON_PROPERTY_DEST_ADDRESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDestAddress(@jakarta.annotation.Nullable String destAddress) {
        this.destAddress = destAddress;
    }

    /** Return true if this ScreeningMetadataConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ScreeningMetadataConfig screeningMetadataConfig = (ScreeningMetadataConfig) o;
        return Objects.equals(this.direction, screeningMetadataConfig.direction)
                && Objects.equals(this.provider, screeningMetadataConfig.provider)
                && Objects.equals(this.riskRating, screeningMetadataConfig.riskRating)
                && Objects.equals(this.riskScore, screeningMetadataConfig.riskScore)
                && Objects.equals(this.exposureType, screeningMetadataConfig.exposureType)
                && Objects.equals(this.category, screeningMetadataConfig.category)
                && Objects.equals(this.name, screeningMetadataConfig.name)
                && Objects.equals(this.categoryId, screeningMetadataConfig.categoryId)
                && Objects.equals(this.status, screeningMetadataConfig.status)
                && Objects.equals(this.sourceAddress, screeningMetadataConfig.sourceAddress)
                && Objects.equals(this.destAddress, screeningMetadataConfig.destAddress);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                direction,
                provider,
                riskRating,
                riskScore,
                exposureType,
                category,
                name,
                categoryId,
                status,
                sourceAddress,
                destAddress);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ScreeningMetadataConfig {\n");
        sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
        sb.append("    riskRating: ").append(toIndentedString(riskRating)).append("\n");
        sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
        sb.append("    exposureType: ").append(toIndentedString(exposureType)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
        sb.append("    destAddress: ").append(toIndentedString(destAddress)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `direction` to the URL query string
        if (getDirection() != null) {
            joiner.add(
                    String.format(
                            "%sdirection%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDirection()))));
        }

        // add `provider` to the URL query string
        if (getProvider() != null) {
            joiner.add(
                    String.format(
                            "%sprovider%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getProvider()))));
        }

        // add `riskRating` to the URL query string
        if (getRiskRating() != null) {
            joiner.add(
                    String.format(
                            "%sriskRating%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRiskRating()))));
        }

        // add `riskScore` to the URL query string
        if (getRiskScore() != null) {
            joiner.add(
                    String.format(
                            "%sriskScore%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getRiskScore()))));
        }

        // add `exposureType` to the URL query string
        if (getExposureType() != null) {
            joiner.add(
                    String.format(
                            "%sexposureType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getExposureType()))));
        }

        // add `category` to the URL query string
        if (getCategory() != null) {
            for (int i = 0; i < getCategory().size(); i++) {
                joiner.add(
                        String.format(
                                "%scategory%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getCategory().get(i)))));
            }
        }

        // add `name` to the URL query string
        if (getName() != null) {
            for (int i = 0; i < getName().size(); i++) {
                joiner.add(
                        String.format(
                                "%sname%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(ApiClient.valueToString(getName().get(i)))));
            }
        }

        // add `categoryId` to the URL query string
        if (getCategoryId() != null) {
            for (int i = 0; i < getCategoryId().size(); i++) {
                joiner.add(
                        String.format(
                                "%scategoryId%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                ApiClient.urlEncode(
                                        ApiClient.valueToString(getCategoryId().get(i)))));
            }
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `sourceAddress` to the URL query string
        if (getSourceAddress() != null) {
            joiner.add(
                    String.format(
                            "%ssourceAddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSourceAddress()))));
        }

        // add `destAddress` to the URL query string
        if (getDestAddress() != null) {
            joiner.add(
                    String.format(
                            "%sdestAddress%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getDestAddress()))));
        }

        return joiner.toString();
    }
}
