/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.Objects;
import java.util.StringJoiner;

/** EmbeddedWalletAssetBalance */
@JsonPropertyOrder({
    EmbeddedWalletAssetBalance.JSON_PROPERTY_ID,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_TOTAL,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_AVAILABLE,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_PENDING,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_FROZEN,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_LOCKED_AMOUNT,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_BLOCK_HEIGHT,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_BLOCK_HASH,
    EmbeddedWalletAssetBalance.JSON_PROPERTY_REWARD_INFO
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class EmbeddedWalletAssetBalance {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_TOTAL = "total";
    @jakarta.annotation.Nonnull private String total;

    public static final String JSON_PROPERTY_AVAILABLE = "available";
    @jakarta.annotation.Nonnull private String available;

    public static final String JSON_PROPERTY_PENDING = "pending";
    @jakarta.annotation.Nonnull private String pending;

    public static final String JSON_PROPERTY_FROZEN = "frozen";
    @jakarta.annotation.Nonnull private String frozen;

    public static final String JSON_PROPERTY_LOCKED_AMOUNT = "lockedAmount";
    @jakarta.annotation.Nonnull private String lockedAmount;

    public static final String JSON_PROPERTY_BLOCK_HEIGHT = "blockHeight";
    @jakarta.annotation.Nullable private String blockHeight;

    public static final String JSON_PROPERTY_BLOCK_HASH = "blockHash";
    @jakarta.annotation.Nullable private String blockHash;

    public static final String JSON_PROPERTY_REWARD_INFO = "rewardInfo";
    @jakarta.annotation.Nullable private EmbeddedWalletAssetRewardInfo rewardInfo;

    public EmbeddedWalletAssetBalance() {}

    @JsonCreator
    public EmbeddedWalletAssetBalance(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_TOTAL, required = true) String total,
            @JsonProperty(value = JSON_PROPERTY_AVAILABLE, required = true) String available,
            @JsonProperty(value = JSON_PROPERTY_PENDING, required = true) String pending,
            @JsonProperty(value = JSON_PROPERTY_FROZEN, required = true) String frozen,
            @JsonProperty(value = JSON_PROPERTY_LOCKED_AMOUNT, required = true)
                    String lockedAmount) {
        this.id = id;
        this.total = total;
        this.available = available;
        this.pending = pending;
        this.frozen = frozen;
        this.lockedAmount = lockedAmount;
    }

    public EmbeddedWalletAssetBalance id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier of the asset balance entry
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public EmbeddedWalletAssetBalance total(@jakarta.annotation.Nonnull String total) {
        this.total = total;
        return this;
    }

    /**
     * Total balance amount for the asset in the account (including pending, locked, and available)
     *
     * @return total
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTotal() {
        return total;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotal(@jakarta.annotation.Nonnull String total) {
        this.total = total;
    }

    public EmbeddedWalletAssetBalance available(@jakarta.annotation.Nonnull String available) {
        this.available = available;
        return this;
    }

    /**
     * The balance available for use or withdrawal
     *
     * @return available
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AVAILABLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getAvailable() {
        return available;
    }

    @JsonProperty(JSON_PROPERTY_AVAILABLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAvailable(@jakarta.annotation.Nonnull String available) {
        this.available = available;
    }

    public EmbeddedWalletAssetBalance pending(@jakarta.annotation.Nonnull String pending) {
        this.pending = pending;
        return this;
    }

    /**
     * Amount pending confirmation from blockchain (e.g., unconfirmed deposits)
     *
     * @return pending
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PENDING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getPending() {
        return pending;
    }

    @JsonProperty(JSON_PROPERTY_PENDING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPending(@jakarta.annotation.Nonnull String pending) {
        this.pending = pending;
    }

    public EmbeddedWalletAssetBalance frozen(@jakarta.annotation.Nonnull String frozen) {
        this.frozen = frozen;
        return this;
    }

    /**
     * Balance that is frozen due to policy or regulatory lock
     *
     * @return frozen
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_FROZEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFrozen() {
        return frozen;
    }

    @JsonProperty(JSON_PROPERTY_FROZEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFrozen(@jakarta.annotation.Nonnull String frozen) {
        this.frozen = frozen;
    }

    public EmbeddedWalletAssetBalance lockedAmount(
            @jakarta.annotation.Nonnull String lockedAmount) {
        this.lockedAmount = lockedAmount;
        return this;
    }

    /**
     * Funds locked for operations such as staking or delegation
     *
     * @return lockedAmount
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LOCKED_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getLockedAmount() {
        return lockedAmount;
    }

    @JsonProperty(JSON_PROPERTY_LOCKED_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLockedAmount(@jakarta.annotation.Nonnull String lockedAmount) {
        this.lockedAmount = lockedAmount;
    }

    public EmbeddedWalletAssetBalance blockHeight(@jakarta.annotation.Nullable String blockHeight) {
        this.blockHeight = blockHeight;
        return this;
    }

    /**
     * Latest known blockchain height when balance was fetched
     *
     * @return blockHeight
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BLOCK_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBlockHeight() {
        return blockHeight;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlockHeight(@jakarta.annotation.Nullable String blockHeight) {
        this.blockHeight = blockHeight;
    }

    public EmbeddedWalletAssetBalance blockHash(@jakarta.annotation.Nullable String blockHash) {
        this.blockHash = blockHash;
        return this;
    }

    /**
     * Hash of the blockchain block associated with the current balance state
     *
     * @return blockHash
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BLOCK_HASH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBlockHash() {
        return blockHash;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK_HASH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlockHash(@jakarta.annotation.Nullable String blockHash) {
        this.blockHash = blockHash;
    }

    public EmbeddedWalletAssetBalance rewardInfo(
            @jakarta.annotation.Nullable EmbeddedWalletAssetRewardInfo rewardInfo) {
        this.rewardInfo = rewardInfo;
        return this;
    }

    /**
     * Get rewardInfo
     *
     * @return rewardInfo
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REWARD_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public EmbeddedWalletAssetRewardInfo getRewardInfo() {
        return rewardInfo;
    }

    @JsonProperty(JSON_PROPERTY_REWARD_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRewardInfo(
            @jakarta.annotation.Nullable EmbeddedWalletAssetRewardInfo rewardInfo) {
        this.rewardInfo = rewardInfo;
    }

    /** Return true if this EmbeddedWalletAssetBalance object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbeddedWalletAssetBalance embeddedWalletAssetBalance = (EmbeddedWalletAssetBalance) o;
        return Objects.equals(this.id, embeddedWalletAssetBalance.id)
                && Objects.equals(this.total, embeddedWalletAssetBalance.total)
                && Objects.equals(this.available, embeddedWalletAssetBalance.available)
                && Objects.equals(this.pending, embeddedWalletAssetBalance.pending)
                && Objects.equals(this.frozen, embeddedWalletAssetBalance.frozen)
                && Objects.equals(this.lockedAmount, embeddedWalletAssetBalance.lockedAmount)
                && Objects.equals(this.blockHeight, embeddedWalletAssetBalance.blockHeight)
                && Objects.equals(this.blockHash, embeddedWalletAssetBalance.blockHash)
                && Objects.equals(this.rewardInfo, embeddedWalletAssetBalance.rewardInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                total,
                available,
                pending,
                frozen,
                lockedAmount,
                blockHeight,
                blockHash,
                rewardInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmbeddedWalletAssetBalance {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("    available: ").append(toIndentedString(available)).append("\n");
        sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
        sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
        sb.append("    lockedAmount: ").append(toIndentedString(lockedAmount)).append("\n");
        sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
        sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
        sb.append("    rewardInfo: ").append(toIndentedString(rewardInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `total` to the URL query string
        if (getTotal() != null) {
            joiner.add(
                    String.format(
                            "%stotal%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTotal()))));
        }

        // add `available` to the URL query string
        if (getAvailable() != null) {
            joiner.add(
                    String.format(
                            "%savailable%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getAvailable()))));
        }

        // add `pending` to the URL query string
        if (getPending() != null) {
            joiner.add(
                    String.format(
                            "%spending%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getPending()))));
        }

        // add `frozen` to the URL query string
        if (getFrozen() != null) {
            joiner.add(
                    String.format(
                            "%sfrozen%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getFrozen()))));
        }

        // add `lockedAmount` to the URL query string
        if (getLockedAmount() != null) {
            joiner.add(
                    String.format(
                            "%slockedAmount%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getLockedAmount()))));
        }

        // add `blockHeight` to the URL query string
        if (getBlockHeight() != null) {
            joiner.add(
                    String.format(
                            "%sblockHeight%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBlockHeight()))));
        }

        // add `blockHash` to the URL query string
        if (getBlockHash() != null) {
            joiner.add(
                    String.format(
                            "%sblockHash%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getBlockHash()))));
        }

        // add `rewardInfo` to the URL query string
        if (getRewardInfo() != null) {
            joiner.add(getRewardInfo().toUrlQueryString(prefix + "rewardInfo" + suffix));
        }

        return joiner.toString();
    }
}
