/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** Request body for calculating deterministic address */
@JsonPropertyOrder({
    GetDeployableAddressRequest.JSON_PROPERTY_CHAIN_DESCRIPTOR,
    GetDeployableAddressRequest.JSON_PROPERTY_TEMPLATE_ID,
    GetDeployableAddressRequest.JSON_PROPERTY_INIT_PARAMS,
    GetDeployableAddressRequest.JSON_PROPERTY_SALT
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class GetDeployableAddressRequest {
    public static final String JSON_PROPERTY_CHAIN_DESCRIPTOR = "chainDescriptor";
    @jakarta.annotation.Nonnull private String chainDescriptor;

    public static final String JSON_PROPERTY_TEMPLATE_ID = "templateId";
    @jakarta.annotation.Nonnull private UUID templateId;

    public static final String JSON_PROPERTY_INIT_PARAMS = "initParams";
    @jakarta.annotation.Nonnull private List<ParameterWithValue> initParams;

    public static final String JSON_PROPERTY_SALT = "salt";
    @jakarta.annotation.Nonnull private String salt;

    public GetDeployableAddressRequest() {}

    @JsonCreator
    public GetDeployableAddressRequest(
            @JsonProperty(value = JSON_PROPERTY_CHAIN_DESCRIPTOR, required = true)
                    String chainDescriptor,
            @JsonProperty(value = JSON_PROPERTY_TEMPLATE_ID, required = true) UUID templateId,
            @JsonProperty(value = JSON_PROPERTY_INIT_PARAMS, required = true)
                    List<ParameterWithValue> initParams,
            @JsonProperty(value = JSON_PROPERTY_SALT, required = true) String salt) {
        this.chainDescriptor = chainDescriptor;
        this.templateId = templateId;
        this.initParams = initParams;
        this.salt = salt;
    }

    public GetDeployableAddressRequest chainDescriptor(
            @jakarta.annotation.Nonnull String chainDescriptor) {
        this.chainDescriptor = chainDescriptor;
        return this;
    }

    /**
     * The base asset identifier of the blockchain (legacyId) to calculate deterministic address
     *
     * @return chainDescriptor
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CHAIN_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getChainDescriptor() {
        return chainDescriptor;
    }

    @JsonProperty(JSON_PROPERTY_CHAIN_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setChainDescriptor(@jakarta.annotation.Nonnull String chainDescriptor) {
        this.chainDescriptor = chainDescriptor;
    }

    public GetDeployableAddressRequest templateId(@jakarta.annotation.Nonnull UUID templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * The template identifier
     *
     * @return templateId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TEMPLATE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getTemplateId() {
        return templateId;
    }

    @JsonProperty(JSON_PROPERTY_TEMPLATE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTemplateId(@jakarta.annotation.Nonnull UUID templateId) {
        this.templateId = templateId;
    }

    public GetDeployableAddressRequest initParams(
            @jakarta.annotation.Nonnull List<ParameterWithValue> initParams) {
        this.initParams = initParams;
        return this;
    }

    public GetDeployableAddressRequest addInitParamsItem(ParameterWithValue initParamsItem) {
        if (this.initParams == null) {
            this.initParams = new ArrayList<>();
        }
        this.initParams.add(initParamsItem);
        return this;
    }

    /**
     * The deploy function parameters and values of the contract template
     *
     * @return initParams
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INIT_PARAMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<ParameterWithValue> getInitParams() {
        return initParams;
    }

    @JsonProperty(JSON_PROPERTY_INIT_PARAMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInitParams(@jakarta.annotation.Nonnull List<ParameterWithValue> initParams) {
        this.initParams = initParams;
    }

    public GetDeployableAddressRequest salt(@jakarta.annotation.Nonnull String salt) {
        this.salt = salt;
        return this;
    }

    /**
     * The salt to calculate the deterministic address. Must be a number between 0 and 2^256 -1, for
     * it to fit in the bytes32 parameter
     *
     * @return salt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SALT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSalt() {
        return salt;
    }

    @JsonProperty(JSON_PROPERTY_SALT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSalt(@jakarta.annotation.Nonnull String salt) {
        this.salt = salt;
    }

    /** Return true if this GetDeployableAddressRequest object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDeployableAddressRequest getDeployableAddressRequest = (GetDeployableAddressRequest) o;
        return Objects.equals(this.chainDescriptor, getDeployableAddressRequest.chainDescriptor)
                && Objects.equals(this.templateId, getDeployableAddressRequest.templateId)
                && Objects.equals(this.initParams, getDeployableAddressRequest.initParams)
                && Objects.equals(this.salt, getDeployableAddressRequest.salt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(chainDescriptor, templateId, initParams, salt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetDeployableAddressRequest {\n");
        sb.append("    chainDescriptor: ").append(toIndentedString(chainDescriptor)).append("\n");
        sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
        sb.append("    initParams: ").append(toIndentedString(initParams)).append("\n");
        sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `chainDescriptor` to the URL query string
        if (getChainDescriptor() != null) {
            joiner.add(
                    String.format(
                            "%schainDescriptor%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getChainDescriptor()))));
        }

        // add `templateId` to the URL query string
        if (getTemplateId() != null) {
            joiner.add(
                    String.format(
                            "%stemplateId%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getTemplateId()))));
        }

        // add `initParams` to the URL query string
        if (getInitParams() != null) {
            for (int i = 0; i < getInitParams().size(); i++) {
                if (getInitParams().get(i) != null) {
                    joiner.add(
                            getInitParams()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sinitParams%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        // add `salt` to the URL query string
        if (getSalt() != null) {
            joiner.add(
                    String.format(
                            "%ssalt%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSalt()))));
        }

        return joiner.toString();
    }
}
