/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** TravelRuleNaturalNameIdentifiers */
@JsonPropertyOrder({
    TravelRuleNaturalNameIdentifiers.JSON_PROPERTY_PRIMARY_IDENTIFIER,
    TravelRuleNaturalNameIdentifiers.JSON_PROPERTY_SECONDARY_IDENTIFIER,
    TravelRuleNaturalNameIdentifiers.JSON_PROPERTY_NAME_IDENTIFIER_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TravelRuleNaturalNameIdentifiers {
    public static final String JSON_PROPERTY_PRIMARY_IDENTIFIER = "primaryIdentifier";
    private String primaryIdentifier;

    public static final String JSON_PROPERTY_SECONDARY_IDENTIFIER = "secondaryIdentifier";
    private String secondaryIdentifier;

    public static final String JSON_PROPERTY_NAME_IDENTIFIER_TYPE = "nameIdentifierType";
    private String nameIdentifierType;

    public TravelRuleNaturalNameIdentifiers() {}

    public TravelRuleNaturalNameIdentifiers primaryIdentifier(String primaryIdentifier) {
        this.primaryIdentifier = primaryIdentifier;
        return this;
    }

    /**
     * Get primaryIdentifier
     *
     * @return primaryIdentifier
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PRIMARY_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPrimaryIdentifier() {
        return primaryIdentifier;
    }

    @JsonProperty(JSON_PROPERTY_PRIMARY_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrimaryIdentifier(String primaryIdentifier) {
        this.primaryIdentifier = primaryIdentifier;
    }

    public TravelRuleNaturalNameIdentifiers secondaryIdentifier(String secondaryIdentifier) {
        this.secondaryIdentifier = secondaryIdentifier;
        return this;
    }

    /**
     * Get secondaryIdentifier
     *
     * @return secondaryIdentifier
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SECONDARY_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSecondaryIdentifier() {
        return secondaryIdentifier;
    }

    @JsonProperty(JSON_PROPERTY_SECONDARY_IDENTIFIER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSecondaryIdentifier(String secondaryIdentifier) {
        this.secondaryIdentifier = secondaryIdentifier;
    }

    public TravelRuleNaturalNameIdentifiers nameIdentifierType(String nameIdentifierType) {
        this.nameIdentifierType = nameIdentifierType;
        return this;
    }

    /**
     * Get nameIdentifierType
     *
     * @return nameIdentifierType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME_IDENTIFIER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNameIdentifierType() {
        return nameIdentifierType;
    }

    @JsonProperty(JSON_PROPERTY_NAME_IDENTIFIER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNameIdentifierType(String nameIdentifierType) {
        this.nameIdentifierType = nameIdentifierType;
    }

    /** Return true if this TravelRuleNaturalNameIdentifiers object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TravelRuleNaturalNameIdentifiers travelRuleNaturalNameIdentifiers =
                (TravelRuleNaturalNameIdentifiers) o;
        return Objects.equals(
                        this.primaryIdentifier, travelRuleNaturalNameIdentifiers.primaryIdentifier)
                && Objects.equals(
                        this.secondaryIdentifier,
                        travelRuleNaturalNameIdentifiers.secondaryIdentifier)
                && Objects.equals(
                        this.nameIdentifierType,
                        travelRuleNaturalNameIdentifiers.nameIdentifierType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(primaryIdentifier, secondaryIdentifier, nameIdentifierType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TravelRuleNaturalNameIdentifiers {\n");
        sb.append("    primaryIdentifier: ")
                .append(toIndentedString(primaryIdentifier))
                .append("\n");
        sb.append("    secondaryIdentifier: ")
                .append(toIndentedString(secondaryIdentifier))
                .append("\n");
        sb.append("    nameIdentifierType: ")
                .append(toIndentedString(nameIdentifierType))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `primaryIdentifier` to the URL query string
        if (getPrimaryIdentifier() != null) {
            joiner.add(
                    String.format(
                            "%sprimaryIdentifier%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getPrimaryIdentifier()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `secondaryIdentifier` to the URL query string
        if (getSecondaryIdentifier() != null) {
            joiner.add(
                    String.format(
                            "%ssecondaryIdentifier%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getSecondaryIdentifier()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `nameIdentifierType` to the URL query string
        if (getNameIdentifierType() != null) {
            joiner.add(
                    String.format(
                            "%snameIdentifierType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getNameIdentifierType()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
