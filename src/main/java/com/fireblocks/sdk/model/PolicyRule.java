/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.StringJoiner;

/** V2 Policy rule which is enforced on transactions */
@JsonPropertyOrder({
    PolicyRule.JSON_PROPERTY_NAME,
    PolicyRule.JSON_PROPERTY_ID,
    PolicyRule.JSON_PROPERTY_POLICY_ENGINE_VERSION,
    PolicyRule.JSON_PROPERTY_TYPE,
    PolicyRule.JSON_PROPERTY_SUB_TYPE,
    PolicyRule.JSON_PROPERTY_INITIATOR,
    PolicyRule.JSON_PROPERTY_ASSET,
    PolicyRule.JSON_PROPERTY_SOURCE,
    PolicyRule.JSON_PROPERTY_DESTINATION,
    PolicyRule.JSON_PROPERTY_ACCOUNT,
    PolicyRule.JSON_PROPERTY_VERDICT,
    PolicyRule.JSON_PROPERTY_AMOUNT_OVER_TIME,
    PolicyRule.JSON_PROPERTY_AMOUNT,
    PolicyRule.JSON_PROPERTY_EXTERNAL_DESCRIPTOR,
    PolicyRule.JSON_PROPERTY_METHOD,
    PolicyRule.JSON_PROPERTY_IS_GLOBAL_POLICY,
    PolicyRule.JSON_PROPERTY_PROGRAM_CALL,
    PolicyRule.JSON_PROPERTY_SCREENING_METADATA,
    PolicyRule.JSON_PROPERTY_QUOTE_ASSET,
    PolicyRule.JSON_PROPERTY_BASE_ASSET,
    PolicyRule.JSON_PROPERTY_QUOTE_AMOUNT,
    PolicyRule.JSON_PROPERTY_BASE_AMOUNT,
    PolicyRule.JSON_PROPERTY_DERIVATION_PATH,
    PolicyRule.JSON_PROPERTY_INDEX
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class PolicyRule {
    public static final String JSON_PROPERTY_NAME = "name";
    @jakarta.annotation.Nonnull private String name;

    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    /** Policy engine version */
    public enum PolicyEngineVersionEnum {
        V2(String.valueOf("v2"));

        private String value;

        PolicyEngineVersionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static PolicyEngineVersionEnum fromValue(String value) {
            for (PolicyEngineVersionEnum b : PolicyEngineVersionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_POLICY_ENGINE_VERSION = "policyEngineVersion";
    @jakarta.annotation.Nonnull private PolicyEngineVersionEnum policyEngineVersion;

    public static final String JSON_PROPERTY_TYPE = "type";
    @jakarta.annotation.Nonnull private PolicyType type;

    public static final String JSON_PROPERTY_SUB_TYPE = "subType";
    @jakarta.annotation.Nullable private PolicyType subType;

    public static final String JSON_PROPERTY_INITIATOR = "initiator";
    @jakarta.annotation.Nonnull private InitiatorConfigPattern initiator;

    public static final String JSON_PROPERTY_ASSET = "asset";
    @jakarta.annotation.Nonnull private AssetConfig asset;

    public static final String JSON_PROPERTY_SOURCE = "source";
    @jakarta.annotation.Nonnull private AccountConfig source;

    public static final String JSON_PROPERTY_DESTINATION = "destination";
    @jakarta.annotation.Nullable private DestinationConfig destination;

    public static final String JSON_PROPERTY_ACCOUNT = "account";
    @jakarta.annotation.Nullable private AccountConfig account;

    public static final String JSON_PROPERTY_VERDICT = "verdict";
    @jakarta.annotation.Nonnull private VerdictConfig verdict;

    public static final String JSON_PROPERTY_AMOUNT_OVER_TIME = "amountOverTime";
    @jakarta.annotation.Nullable private AmountOverTimeConfig amountOverTime;

    public static final String JSON_PROPERTY_AMOUNT = "amount";
    @jakarta.annotation.Nullable private AmountRange amount;

    public static final String JSON_PROPERTY_EXTERNAL_DESCRIPTOR = "externalDescriptor";
    @jakarta.annotation.Nullable private String externalDescriptor;

    public static final String JSON_PROPERTY_METHOD = "method";
    @jakarta.annotation.Nullable private ContractMethodPattern method;

    public static final String JSON_PROPERTY_IS_GLOBAL_POLICY = "isGlobalPolicy";
    @jakarta.annotation.Nullable private Boolean isGlobalPolicy;

    public static final String JSON_PROPERTY_PROGRAM_CALL = "programCall";
    @jakarta.annotation.Nullable private ProgramCallConfig programCall;

    public static final String JSON_PROPERTY_SCREENING_METADATA = "screeningMetadata";
    @jakarta.annotation.Nullable private ScreeningMetadataConfig screeningMetadata;

    public static final String JSON_PROPERTY_QUOTE_ASSET = "quoteAsset";
    @jakarta.annotation.Nullable private AssetConfig quoteAsset;

    public static final String JSON_PROPERTY_BASE_ASSET = "baseAsset";
    @jakarta.annotation.Nullable private AssetConfig baseAsset;

    public static final String JSON_PROPERTY_QUOTE_AMOUNT = "quoteAmount";
    @jakarta.annotation.Nullable private AmountRange quoteAmount;

    public static final String JSON_PROPERTY_BASE_AMOUNT = "baseAmount";
    @jakarta.annotation.Nullable private AmountRange baseAmount;

    public static final String JSON_PROPERTY_DERIVATION_PATH = "derivationPath";
    @jakarta.annotation.Nullable private DerivationPathConfig derivationPath;

    public static final String JSON_PROPERTY_INDEX = "index";
    @jakarta.annotation.Nullable private BigDecimal index;

    public PolicyRule() {}

    @JsonCreator
    public PolicyRule(
            @JsonProperty(value = JSON_PROPERTY_NAME, required = true) String name,
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_POLICY_ENGINE_VERSION, required = true)
                    PolicyEngineVersionEnum policyEngineVersion,
            @JsonProperty(value = JSON_PROPERTY_TYPE, required = true) PolicyType type,
            @JsonProperty(value = JSON_PROPERTY_INITIATOR, required = true)
                    InitiatorConfigPattern initiator,
            @JsonProperty(value = JSON_PROPERTY_ASSET, required = true) AssetConfig asset,
            @JsonProperty(value = JSON_PROPERTY_SOURCE, required = true) AccountConfig source,
            @JsonProperty(value = JSON_PROPERTY_VERDICT, required = true) VerdictConfig verdict) {
        this.name = name;
        this.id = id;
        this.policyEngineVersion = policyEngineVersion;
        this.type = type;
        this.initiator = initiator;
        this.asset = asset;
        this.source = source;
        this.verdict = verdict;
    }

    public PolicyRule name(@jakarta.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of the policy rule
     *
     * @return name
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(@jakarta.annotation.Nonnull String name) {
        this.name = name;
    }

    public PolicyRule id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier for the policy rule
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public PolicyRule policyEngineVersion(
            @jakarta.annotation.Nonnull PolicyEngineVersionEnum policyEngineVersion) {
        this.policyEngineVersion = policyEngineVersion;
        return this;
    }

    /**
     * Policy engine version
     *
     * @return policyEngineVersion
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_POLICY_ENGINE_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PolicyEngineVersionEnum getPolicyEngineVersion() {
        return policyEngineVersion;
    }

    @JsonProperty(JSON_PROPERTY_POLICY_ENGINE_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPolicyEngineVersion(
            @jakarta.annotation.Nonnull PolicyEngineVersionEnum policyEngineVersion) {
        this.policyEngineVersion = policyEngineVersion;
    }

    public PolicyRule type(@jakarta.annotation.Nonnull PolicyType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public PolicyType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(@jakarta.annotation.Nonnull PolicyType type) {
        this.type = type;
    }

    public PolicyRule subType(@jakarta.annotation.Nullable PolicyType subType) {
        this.subType = subType;
        return this;
    }

    /**
     * Get subType
     *
     * @return subType
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PolicyType getSubType() {
        return subType;
    }

    @JsonProperty(JSON_PROPERTY_SUB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSubType(@jakarta.annotation.Nullable PolicyType subType) {
        this.subType = subType;
    }

    public PolicyRule initiator(@jakarta.annotation.Nonnull InitiatorConfigPattern initiator) {
        this.initiator = initiator;
        return this;
    }

    /**
     * Get initiator
     *
     * @return initiator
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_INITIATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public InitiatorConfigPattern getInitiator() {
        return initiator;
    }

    @JsonProperty(JSON_PROPERTY_INITIATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInitiator(@jakarta.annotation.Nonnull InitiatorConfigPattern initiator) {
        this.initiator = initiator;
    }

    public PolicyRule asset(@jakarta.annotation.Nonnull AssetConfig asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AssetConfig getAsset() {
        return asset;
    }

    @JsonProperty(JSON_PROPERTY_ASSET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAsset(@jakarta.annotation.Nonnull AssetConfig asset) {
        this.asset = asset;
    }

    public PolicyRule source(@jakarta.annotation.Nonnull AccountConfig source) {
        this.source = source;
        return this;
    }

    /**
     * Get source
     *
     * @return source
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AccountConfig getSource() {
        return source;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSource(@jakarta.annotation.Nonnull AccountConfig source) {
        this.source = source;
    }

    public PolicyRule destination(@jakarta.annotation.Nullable DestinationConfig destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get destination
     *
     * @return destination
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESTINATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DestinationConfig getDestination() {
        return destination;
    }

    @JsonProperty(JSON_PROPERTY_DESTINATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDestination(@jakarta.annotation.Nullable DestinationConfig destination) {
        this.destination = destination;
    }

    public PolicyRule account(@jakarta.annotation.Nullable AccountConfig account) {
        this.account = account;
        return this;
    }

    /**
     * Get account
     *
     * @return account
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ACCOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AccountConfig getAccount() {
        return account;
    }

    @JsonProperty(JSON_PROPERTY_ACCOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAccount(@jakarta.annotation.Nullable AccountConfig account) {
        this.account = account;
    }

    public PolicyRule verdict(@jakarta.annotation.Nonnull VerdictConfig verdict) {
        this.verdict = verdict;
        return this;
    }

    /**
     * Get verdict
     *
     * @return verdict
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VERDICT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public VerdictConfig getVerdict() {
        return verdict;
    }

    @JsonProperty(JSON_PROPERTY_VERDICT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVerdict(@jakarta.annotation.Nonnull VerdictConfig verdict) {
        this.verdict = verdict;
    }

    public PolicyRule amountOverTime(
            @jakarta.annotation.Nullable AmountOverTimeConfig amountOverTime) {
        this.amountOverTime = amountOverTime;
        return this;
    }

    /**
     * Get amountOverTime
     *
     * @return amountOverTime
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AMOUNT_OVER_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AmountOverTimeConfig getAmountOverTime() {
        return amountOverTime;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT_OVER_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAmountOverTime(
            @jakarta.annotation.Nullable AmountOverTimeConfig amountOverTime) {
        this.amountOverTime = amountOverTime;
    }

    public PolicyRule amount(@jakarta.annotation.Nullable AmountRange amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AmountRange getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAmount(@jakarta.annotation.Nullable AmountRange amount) {
        this.amount = amount;
    }

    public PolicyRule externalDescriptor(@jakarta.annotation.Nullable String externalDescriptor) {
        this.externalDescriptor = externalDescriptor;
        return this;
    }

    /**
     * External descriptor for the rule
     *
     * @return externalDescriptor
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXTERNAL_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getExternalDescriptor() {
        return externalDescriptor;
    }

    @JsonProperty(JSON_PROPERTY_EXTERNAL_DESCRIPTOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExternalDescriptor(@jakarta.annotation.Nullable String externalDescriptor) {
        this.externalDescriptor = externalDescriptor;
    }

    public PolicyRule method(@jakarta.annotation.Nullable ContractMethodPattern method) {
        this.method = method;
        return this;
    }

    /**
     * Get method
     *
     * @return method
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ContractMethodPattern getMethod() {
        return method;
    }

    @JsonProperty(JSON_PROPERTY_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMethod(@jakarta.annotation.Nullable ContractMethodPattern method) {
        this.method = method;
    }

    public PolicyRule isGlobalPolicy(@jakarta.annotation.Nullable Boolean isGlobalPolicy) {
        this.isGlobalPolicy = isGlobalPolicy;
        return this;
    }

    /**
     * Whether this is a global policy
     *
     * @return isGlobalPolicy
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_IS_GLOBAL_POLICY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIsGlobalPolicy() {
        return isGlobalPolicy;
    }

    @JsonProperty(JSON_PROPERTY_IS_GLOBAL_POLICY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsGlobalPolicy(@jakarta.annotation.Nullable Boolean isGlobalPolicy) {
        this.isGlobalPolicy = isGlobalPolicy;
    }

    public PolicyRule programCall(@jakarta.annotation.Nullable ProgramCallConfig programCall) {
        this.programCall = programCall;
        return this;
    }

    /**
     * Get programCall
     *
     * @return programCall
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROGRAM_CALL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ProgramCallConfig getProgramCall() {
        return programCall;
    }

    @JsonProperty(JSON_PROPERTY_PROGRAM_CALL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProgramCall(@jakarta.annotation.Nullable ProgramCallConfig programCall) {
        this.programCall = programCall;
    }

    public PolicyRule screeningMetadata(
            @jakarta.annotation.Nullable ScreeningMetadataConfig screeningMetadata) {
        this.screeningMetadata = screeningMetadata;
        return this;
    }

    /**
     * Get screeningMetadata
     *
     * @return screeningMetadata
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SCREENING_METADATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ScreeningMetadataConfig getScreeningMetadata() {
        return screeningMetadata;
    }

    @JsonProperty(JSON_PROPERTY_SCREENING_METADATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScreeningMetadata(
            @jakarta.annotation.Nullable ScreeningMetadataConfig screeningMetadata) {
        this.screeningMetadata = screeningMetadata;
    }

    public PolicyRule quoteAsset(@jakarta.annotation.Nullable AssetConfig quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AssetConfig getQuoteAsset() {
        return quoteAsset;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_ASSET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuoteAsset(@jakarta.annotation.Nullable AssetConfig quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    public PolicyRule baseAsset(@jakarta.annotation.Nullable AssetConfig baseAsset) {
        this.baseAsset = baseAsset;
        return this;
    }

    /**
     * Get baseAsset
     *
     * @return baseAsset
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BASE_ASSET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AssetConfig getBaseAsset() {
        return baseAsset;
    }

    @JsonProperty(JSON_PROPERTY_BASE_ASSET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBaseAsset(@jakarta.annotation.Nullable AssetConfig baseAsset) {
        this.baseAsset = baseAsset;
    }

    public PolicyRule quoteAmount(@jakarta.annotation.Nullable AmountRange quoteAmount) {
        this.quoteAmount = quoteAmount;
        return this;
    }

    /**
     * Get quoteAmount
     *
     * @return quoteAmount
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AmountRange getQuoteAmount() {
        return quoteAmount;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuoteAmount(@jakarta.annotation.Nullable AmountRange quoteAmount) {
        this.quoteAmount = quoteAmount;
    }

    public PolicyRule baseAmount(@jakarta.annotation.Nullable AmountRange baseAmount) {
        this.baseAmount = baseAmount;
        return this;
    }

    /**
     * Get baseAmount
     *
     * @return baseAmount
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BASE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AmountRange getBaseAmount() {
        return baseAmount;
    }

    @JsonProperty(JSON_PROPERTY_BASE_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBaseAmount(@jakarta.annotation.Nullable AmountRange baseAmount) {
        this.baseAmount = baseAmount;
    }

    public PolicyRule derivationPath(
            @jakarta.annotation.Nullable DerivationPathConfig derivationPath) {
        this.derivationPath = derivationPath;
        return this;
    }

    /**
     * Get derivationPath
     *
     * @return derivationPath
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DERIVATION_PATH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DerivationPathConfig getDerivationPath() {
        return derivationPath;
    }

    @JsonProperty(JSON_PROPERTY_DERIVATION_PATH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDerivationPath(
            @jakarta.annotation.Nullable DerivationPathConfig derivationPath) {
        this.derivationPath = derivationPath;
    }

    public PolicyRule index(@jakarta.annotation.Nullable BigDecimal index) {
        this.index = index;
        return this;
    }

    /**
     * Index for the policy rule
     *
     * @return index
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getIndex() {
        return index;
    }

    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIndex(@jakarta.annotation.Nullable BigDecimal index) {
        this.index = index;
    }

    /** Return true if this PolicyRule object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PolicyRule policyRule = (PolicyRule) o;
        return Objects.equals(this.name, policyRule.name)
                && Objects.equals(this.id, policyRule.id)
                && Objects.equals(this.policyEngineVersion, policyRule.policyEngineVersion)
                && Objects.equals(this.type, policyRule.type)
                && Objects.equals(this.subType, policyRule.subType)
                && Objects.equals(this.initiator, policyRule.initiator)
                && Objects.equals(this.asset, policyRule.asset)
                && Objects.equals(this.source, policyRule.source)
                && Objects.equals(this.destination, policyRule.destination)
                && Objects.equals(this.account, policyRule.account)
                && Objects.equals(this.verdict, policyRule.verdict)
                && Objects.equals(this.amountOverTime, policyRule.amountOverTime)
                && Objects.equals(this.amount, policyRule.amount)
                && Objects.equals(this.externalDescriptor, policyRule.externalDescriptor)
                && Objects.equals(this.method, policyRule.method)
                && Objects.equals(this.isGlobalPolicy, policyRule.isGlobalPolicy)
                && Objects.equals(this.programCall, policyRule.programCall)
                && Objects.equals(this.screeningMetadata, policyRule.screeningMetadata)
                && Objects.equals(this.quoteAsset, policyRule.quoteAsset)
                && Objects.equals(this.baseAsset, policyRule.baseAsset)
                && Objects.equals(this.quoteAmount, policyRule.quoteAmount)
                && Objects.equals(this.baseAmount, policyRule.baseAmount)
                && Objects.equals(this.derivationPath, policyRule.derivationPath)
                && Objects.equals(this.index, policyRule.index);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                name,
                id,
                policyEngineVersion,
                type,
                subType,
                initiator,
                asset,
                source,
                destination,
                account,
                verdict,
                amountOverTime,
                amount,
                externalDescriptor,
                method,
                isGlobalPolicy,
                programCall,
                screeningMetadata,
                quoteAsset,
                baseAsset,
                quoteAmount,
                baseAmount,
                derivationPath,
                index);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PolicyRule {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    policyEngineVersion: ")
                .append(toIndentedString(policyEngineVersion))
                .append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
        sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
        sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
        sb.append("    account: ").append(toIndentedString(account)).append("\n");
        sb.append("    verdict: ").append(toIndentedString(verdict)).append("\n");
        sb.append("    amountOverTime: ").append(toIndentedString(amountOverTime)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    externalDescriptor: ")
                .append(toIndentedString(externalDescriptor))
                .append("\n");
        sb.append("    method: ").append(toIndentedString(method)).append("\n");
        sb.append("    isGlobalPolicy: ").append(toIndentedString(isGlobalPolicy)).append("\n");
        sb.append("    programCall: ").append(toIndentedString(programCall)).append("\n");
        sb.append("    screeningMetadata: ")
                .append(toIndentedString(screeningMetadata))
                .append("\n");
        sb.append("    quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("    baseAsset: ").append(toIndentedString(baseAsset)).append("\n");
        sb.append("    quoteAmount: ").append(toIndentedString(quoteAmount)).append("\n");
        sb.append("    baseAmount: ").append(toIndentedString(baseAmount)).append("\n");
        sb.append("    derivationPath: ").append(toIndentedString(derivationPath)).append("\n");
        sb.append("    index: ").append(toIndentedString(index)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(
                    String.format(
                            "%sname%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getName()))));
        }

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `policyEngineVersion` to the URL query string
        if (getPolicyEngineVersion() != null) {
            joiner.add(
                    String.format(
                            "%spolicyEngineVersion%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getPolicyEngineVersion()))));
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(
                    String.format(
                            "%stype%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getType()))));
        }

        // add `subType` to the URL query string
        if (getSubType() != null) {
            joiner.add(
                    String.format(
                            "%ssubType%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getSubType()))));
        }

        // add `initiator` to the URL query string
        if (getInitiator() != null) {
            joiner.add(getInitiator().toUrlQueryString(prefix + "initiator" + suffix));
        }

        // add `asset` to the URL query string
        if (getAsset() != null) {
            joiner.add(getAsset().toUrlQueryString(prefix + "asset" + suffix));
        }

        // add `source` to the URL query string
        if (getSource() != null) {
            joiner.add(getSource().toUrlQueryString(prefix + "source" + suffix));
        }

        // add `destination` to the URL query string
        if (getDestination() != null) {
            joiner.add(getDestination().toUrlQueryString(prefix + "destination" + suffix));
        }

        // add `account` to the URL query string
        if (getAccount() != null) {
            joiner.add(getAccount().toUrlQueryString(prefix + "account" + suffix));
        }

        // add `verdict` to the URL query string
        if (getVerdict() != null) {
            joiner.add(getVerdict().toUrlQueryString(prefix + "verdict" + suffix));
        }

        // add `amountOverTime` to the URL query string
        if (getAmountOverTime() != null) {
            joiner.add(getAmountOverTime().toUrlQueryString(prefix + "amountOverTime" + suffix));
        }

        // add `amount` to the URL query string
        if (getAmount() != null) {
            joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
        }

        // add `externalDescriptor` to the URL query string
        if (getExternalDescriptor() != null) {
            joiner.add(
                    String.format(
                            "%sexternalDescriptor%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getExternalDescriptor()))));
        }

        // add `method` to the URL query string
        if (getMethod() != null) {
            joiner.add(getMethod().toUrlQueryString(prefix + "method" + suffix));
        }

        // add `isGlobalPolicy` to the URL query string
        if (getIsGlobalPolicy() != null) {
            joiner.add(
                    String.format(
                            "%sisGlobalPolicy%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getIsGlobalPolicy()))));
        }

        // add `programCall` to the URL query string
        if (getProgramCall() != null) {
            joiner.add(getProgramCall().toUrlQueryString(prefix + "programCall" + suffix));
        }

        // add `screeningMetadata` to the URL query string
        if (getScreeningMetadata() != null) {
            joiner.add(
                    getScreeningMetadata().toUrlQueryString(prefix + "screeningMetadata" + suffix));
        }

        // add `quoteAsset` to the URL query string
        if (getQuoteAsset() != null) {
            joiner.add(getQuoteAsset().toUrlQueryString(prefix + "quoteAsset" + suffix));
        }

        // add `baseAsset` to the URL query string
        if (getBaseAsset() != null) {
            joiner.add(getBaseAsset().toUrlQueryString(prefix + "baseAsset" + suffix));
        }

        // add `quoteAmount` to the URL query string
        if (getQuoteAmount() != null) {
            joiner.add(getQuoteAmount().toUrlQueryString(prefix + "quoteAmount" + suffix));
        }

        // add `baseAmount` to the URL query string
        if (getBaseAmount() != null) {
            joiner.add(getBaseAmount().toUrlQueryString(prefix + "baseAmount" + suffix));
        }

        // add `derivationPath` to the URL query string
        if (getDerivationPath() != null) {
            joiner.add(getDerivationPath().toUrlQueryString(prefix + "derivationPath" + suffix));
        }

        // add `index` to the URL query string
        if (getIndex() != null) {
            joiner.add(
                    String.format(
                            "%sindex%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getIndex()))));
        }

        return joiner.toString();
    }
}
