/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fireblocks.sdk.ApiClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/** Approvers configuration */
@JsonPropertyOrder({
    ApproversConfig.JSON_PROPERTY_CAN_INITIATOR_APPROVE,
    ApproversConfig.JSON_PROPERTY_OPERATOR,
    ApproversConfig.JSON_PROPERTY_ALLOW_OPERATOR_AS_AUTHORIZER,
    ApproversConfig.JSON_PROPERTY_APPROVAL_GROUPS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class ApproversConfig {
    public static final String JSON_PROPERTY_CAN_INITIATOR_APPROVE = "canInitiatorApprove";
    @jakarta.annotation.Nullable private Boolean canInitiatorApprove;

    /** Operator for approval groups */
    public enum OperatorEnum {
        AND(String.valueOf("AND")),

        OR(String.valueOf("OR"));

        private String value;

        OperatorEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OperatorEnum fromValue(String value) {
            for (OperatorEnum b : OperatorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_OPERATOR = "operator";
    @jakarta.annotation.Nullable private OperatorEnum operator;

    public static final String JSON_PROPERTY_ALLOW_OPERATOR_AS_AUTHORIZER =
            "allowOperatorAsAuthorizer";
    @jakarta.annotation.Nullable private Boolean allowOperatorAsAuthorizer;

    public static final String JSON_PROPERTY_APPROVAL_GROUPS = "approvalGroups";
    @jakarta.annotation.Nullable private List<ApproversConfigApprovalGroupsInner> approvalGroups;

    public ApproversConfig() {}

    public ApproversConfig canInitiatorApprove(
            @jakarta.annotation.Nullable Boolean canInitiatorApprove) {
        this.canInitiatorApprove = canInitiatorApprove;
        return this;
    }

    /**
     * Whether initiator can approve
     *
     * @return canInitiatorApprove
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CAN_INITIATOR_APPROVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCanInitiatorApprove() {
        return canInitiatorApprove;
    }

    @JsonProperty(JSON_PROPERTY_CAN_INITIATOR_APPROVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCanInitiatorApprove(@jakarta.annotation.Nullable Boolean canInitiatorApprove) {
        this.canInitiatorApprove = canInitiatorApprove;
    }

    public ApproversConfig operator(@jakarta.annotation.Nullable OperatorEnum operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Operator for approval groups
     *
     * @return operator
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OperatorEnum getOperator() {
        return operator;
    }

    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOperator(@jakarta.annotation.Nullable OperatorEnum operator) {
        this.operator = operator;
    }

    public ApproversConfig allowOperatorAsAuthorizer(
            @jakarta.annotation.Nullable Boolean allowOperatorAsAuthorizer) {
        this.allowOperatorAsAuthorizer = allowOperatorAsAuthorizer;
        return this;
    }

    /**
     * Whether operator can be authorizer
     *
     * @return allowOperatorAsAuthorizer
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ALLOW_OPERATOR_AS_AUTHORIZER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getAllowOperatorAsAuthorizer() {
        return allowOperatorAsAuthorizer;
    }

    @JsonProperty(JSON_PROPERTY_ALLOW_OPERATOR_AS_AUTHORIZER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAllowOperatorAsAuthorizer(
            @jakarta.annotation.Nullable Boolean allowOperatorAsAuthorizer) {
        this.allowOperatorAsAuthorizer = allowOperatorAsAuthorizer;
    }

    public ApproversConfig approvalGroups(
            @jakarta.annotation.Nullable List<ApproversConfigApprovalGroupsInner> approvalGroups) {
        this.approvalGroups = approvalGroups;
        return this;
    }

    public ApproversConfig addApprovalGroupsItem(
            ApproversConfigApprovalGroupsInner approvalGroupsItem) {
        if (this.approvalGroups == null) {
            this.approvalGroups = new ArrayList<>();
        }
        this.approvalGroups.add(approvalGroupsItem);
        return this;
    }

    /**
     * List of approval groups
     *
     * @return approvalGroups
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_APPROVAL_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<ApproversConfigApprovalGroupsInner> getApprovalGroups() {
        return approvalGroups;
    }

    @JsonProperty(JSON_PROPERTY_APPROVAL_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApprovalGroups(
            @jakarta.annotation.Nullable List<ApproversConfigApprovalGroupsInner> approvalGroups) {
        this.approvalGroups = approvalGroups;
    }

    /** Return true if this ApproversConfig object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApproversConfig approversConfig = (ApproversConfig) o;
        return Objects.equals(this.canInitiatorApprove, approversConfig.canInitiatorApprove)
                && Objects.equals(this.operator, approversConfig.operator)
                && Objects.equals(
                        this.allowOperatorAsAuthorizer, approversConfig.allowOperatorAsAuthorizer)
                && Objects.equals(this.approvalGroups, approversConfig.approvalGroups);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                canInitiatorApprove, operator, allowOperatorAsAuthorizer, approvalGroups);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApproversConfig {\n");
        sb.append("    canInitiatorApprove: ")
                .append(toIndentedString(canInitiatorApprove))
                .append("\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("    allowOperatorAsAuthorizer: ")
                .append(toIndentedString(allowOperatorAsAuthorizer))
                .append("\n");
        sb.append("    approvalGroups: ").append(toIndentedString(approvalGroups)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `canInitiatorApprove` to the URL query string
        if (getCanInitiatorApprove() != null) {
            joiner.add(
                    String.format(
                            "%scanInitiatorApprove%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getCanInitiatorApprove()))));
        }

        // add `operator` to the URL query string
        if (getOperator() != null) {
            joiner.add(
                    String.format(
                            "%soperator%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getOperator()))));
        }

        // add `allowOperatorAsAuthorizer` to the URL query string
        if (getAllowOperatorAsAuthorizer() != null) {
            joiner.add(
                    String.format(
                            "%sallowOperatorAsAuthorizer%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(
                                    ApiClient.valueToString(getAllowOperatorAsAuthorizer()))));
        }

        // add `approvalGroups` to the URL query string
        if (getApprovalGroups() != null) {
            for (int i = 0; i < getApprovalGroups().size(); i++) {
                if (getApprovalGroups().get(i) != null) {
                    joiner.add(
                            getApprovalGroups()
                                    .get(i)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sapprovalGroups%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    i,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
