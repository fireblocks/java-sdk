/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fireblocks.sdk.ApiClient;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

/** NetworkConnectionResponse */
@JsonPropertyOrder({
    NetworkConnectionResponse.JSON_PROPERTY_ID,
    NetworkConnectionResponse.JSON_PROPERTY_LOCAL_CHANNEL,
    NetworkConnectionResponse.JSON_PROPERTY_REMOTE_CHANNEL,
    NetworkConnectionResponse.JSON_PROPERTY_STATUS,
    NetworkConnectionResponse.JSON_PROPERTY_LOCAL_NETWORK_ID,
    NetworkConnectionResponse.JSON_PROPERTY_REMOTE_NETWORK_ID,
    NetworkConnectionResponse.JSON_PROPERTY_ROUTING_POLICY
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.14.0")
public class NetworkConnectionResponse {
    public static final String JSON_PROPERTY_ID = "id";
    @jakarta.annotation.Nonnull private String id;

    public static final String JSON_PROPERTY_LOCAL_CHANNEL = "localChannel";
    @jakarta.annotation.Nullable private NetworkChannel localChannel;

    public static final String JSON_PROPERTY_REMOTE_CHANNEL = "remoteChannel";
    @jakarta.annotation.Nullable private NetworkChannel remoteChannel;

    public static final String JSON_PROPERTY_STATUS = "status";
    @jakarta.annotation.Nonnull private NetworkConnectionStatus status;

    public static final String JSON_PROPERTY_LOCAL_NETWORK_ID = "localNetworkId";
    @jakarta.annotation.Nonnull private NetworkId localNetworkId;

    public static final String JSON_PROPERTY_REMOTE_NETWORK_ID = "remoteNetworkId";
    @jakarta.annotation.Nonnull private NetworkId remoteNetworkId;

    public static final String JSON_PROPERTY_ROUTING_POLICY = "routingPolicy";

    @jakarta.annotation.Nonnull
    private Map<String, NetworkConnectionRoutingPolicyValue> routingPolicy = new HashMap<>();

    public NetworkConnectionResponse() {}

    @JsonCreator
    public NetworkConnectionResponse(
            @JsonProperty(value = JSON_PROPERTY_ID, required = true) String id,
            @JsonProperty(value = JSON_PROPERTY_STATUS, required = true)
                    NetworkConnectionStatus status,
            @JsonProperty(value = JSON_PROPERTY_LOCAL_NETWORK_ID, required = true)
                    NetworkId localNetworkId,
            @JsonProperty(value = JSON_PROPERTY_REMOTE_NETWORK_ID, required = true)
                    NetworkId remoteNetworkId,
            @JsonProperty(value = JSON_PROPERTY_ROUTING_POLICY, required = true)
                    Map<String, NetworkConnectionRoutingPolicyValue> routingPolicy) {
        this.id = id;
        this.status = status;
        this.localNetworkId = localNetworkId;
        this.remoteNetworkId = remoteNetworkId;
        this.routingPolicy = routingPolicy;
    }

    public NetworkConnectionResponse id(@jakarta.annotation.Nonnull String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(@jakarta.annotation.Nonnull String id) {
        this.id = id;
    }

    public NetworkConnectionResponse localChannel(
            @jakarta.annotation.Nullable NetworkChannel localChannel) {
        this.localChannel = localChannel;
        return this;
    }

    /**
     * Deprecated - Replaced by &#x60;localNetworkId&#x60;
     *
     * @return localChannel
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LOCAL_CHANNEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public NetworkChannel getLocalChannel() {
        return localChannel;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL_CHANNEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLocalChannel(@jakarta.annotation.Nullable NetworkChannel localChannel) {
        this.localChannel = localChannel;
    }

    public NetworkConnectionResponse remoteChannel(
            @jakarta.annotation.Nullable NetworkChannel remoteChannel) {
        this.remoteChannel = remoteChannel;
        return this;
    }

    /**
     * Deprecated - Replaced by &#x60;remoteNetworkId&#x60;
     *
     * @return remoteChannel
     * @deprecated
     */
    @Deprecated
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REMOTE_CHANNEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public NetworkChannel getRemoteChannel() {
        return remoteChannel;
    }

    @JsonProperty(JSON_PROPERTY_REMOTE_CHANNEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRemoteChannel(@jakarta.annotation.Nullable NetworkChannel remoteChannel) {
        this.remoteChannel = remoteChannel;
    }

    public NetworkConnectionResponse status(
            @jakarta.annotation.Nonnull NetworkConnectionStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NetworkConnectionStatus getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(@jakarta.annotation.Nonnull NetworkConnectionStatus status) {
        this.status = status;
    }

    public NetworkConnectionResponse localNetworkId(
            @jakarta.annotation.Nonnull NetworkId localNetworkId) {
        this.localNetworkId = localNetworkId;
        return this;
    }

    /**
     * Get localNetworkId
     *
     * @return localNetworkId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NetworkId getLocalNetworkId() {
        return localNetworkId;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLocalNetworkId(@jakarta.annotation.Nonnull NetworkId localNetworkId) {
        this.localNetworkId = localNetworkId;
    }

    public NetworkConnectionResponse remoteNetworkId(
            @jakarta.annotation.Nonnull NetworkId remoteNetworkId) {
        this.remoteNetworkId = remoteNetworkId;
        return this;
    }

    /**
     * Get remoteNetworkId
     *
     * @return remoteNetworkId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REMOTE_NETWORK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NetworkId getRemoteNetworkId() {
        return remoteNetworkId;
    }

    @JsonProperty(JSON_PROPERTY_REMOTE_NETWORK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRemoteNetworkId(@jakarta.annotation.Nonnull NetworkId remoteNetworkId) {
        this.remoteNetworkId = remoteNetworkId;
    }

    public NetworkConnectionResponse routingPolicy(
            @jakarta.annotation.Nonnull
                    Map<String, NetworkConnectionRoutingPolicyValue> routingPolicy) {
        this.routingPolicy = routingPolicy;
        return this;
    }

    public NetworkConnectionResponse putRoutingPolicyItem(
            String key, NetworkConnectionRoutingPolicyValue routingPolicyItem) {
        if (this.routingPolicy == null) {
            this.routingPolicy = new HashMap<>();
        }
        this.routingPolicy.put(key, routingPolicyItem);
        return this;
    }

    /**
     * Get routingPolicy
     *
     * @return routingPolicy
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ROUTING_POLICY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Map<String, NetworkConnectionRoutingPolicyValue> getRoutingPolicy() {
        return routingPolicy;
    }

    @JsonProperty(JSON_PROPERTY_ROUTING_POLICY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRoutingPolicy(
            @jakarta.annotation.Nonnull
                    Map<String, NetworkConnectionRoutingPolicyValue> routingPolicy) {
        this.routingPolicy = routingPolicy;
    }

    /** Return true if this NetworkConnectionResponse object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NetworkConnectionResponse networkConnectionResponse = (NetworkConnectionResponse) o;
        return Objects.equals(this.id, networkConnectionResponse.id)
                && Objects.equals(this.localChannel, networkConnectionResponse.localChannel)
                && Objects.equals(this.remoteChannel, networkConnectionResponse.remoteChannel)
                && Objects.equals(this.status, networkConnectionResponse.status)
                && Objects.equals(this.localNetworkId, networkConnectionResponse.localNetworkId)
                && Objects.equals(this.remoteNetworkId, networkConnectionResponse.remoteNetworkId)
                && Objects.equals(this.routingPolicy, networkConnectionResponse.routingPolicy);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                localChannel,
                remoteChannel,
                status,
                localNetworkId,
                remoteNetworkId,
                routingPolicy);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NetworkConnectionResponse {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    localChannel: ").append(toIndentedString(localChannel)).append("\n");
        sb.append("    remoteChannel: ").append(toIndentedString(remoteChannel)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    localNetworkId: ").append(toIndentedString(localNetworkId)).append("\n");
        sb.append("    remoteNetworkId: ").append(toIndentedString(remoteNetworkId)).append("\n");
        sb.append("    routingPolicy: ").append(toIndentedString(routingPolicy)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
        }

        // add `localChannel` to the URL query string
        if (getLocalChannel() != null) {
            joiner.add(getLocalChannel().toUrlQueryString(prefix + "localChannel" + suffix));
        }

        // add `remoteChannel` to the URL query string
        if (getRemoteChannel() != null) {
            joiner.add(getRemoteChannel().toUrlQueryString(prefix + "remoteChannel" + suffix));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
        }

        // add `localNetworkId` to the URL query string
        if (getLocalNetworkId() != null) {
            joiner.add(getLocalNetworkId().toUrlQueryString(prefix + "localNetworkId" + suffix));
        }

        // add `remoteNetworkId` to the URL query string
        if (getRemoteNetworkId() != null) {
            joiner.add(getRemoteNetworkId().toUrlQueryString(prefix + "remoteNetworkId" + suffix));
        }

        // add `routingPolicy` to the URL query string
        if (getRoutingPolicy() != null) {
            for (String _key : getRoutingPolicy().keySet()) {
                if (getRoutingPolicy().get(_key) != null) {
                    joiner.add(
                            getRoutingPolicy()
                                    .get(_key)
                                    .toUrlQueryString(
                                            String.format(
                                                    "%sroutingPolicy%s%s",
                                                    prefix,
                                                    suffix,
                                                    "".equals(suffix)
                                                            ? ""
                                                            : String.format(
                                                                    "%s%d%s",
                                                                    containerPrefix,
                                                                    _key,
                                                                    containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
