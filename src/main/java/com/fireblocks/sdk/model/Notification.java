/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/** Notification */
@JsonPropertyOrder({
    Notification.JSON_PROPERTY_ID,
    Notification.JSON_PROPERTY_CREATED_AT,
    Notification.JSON_PROPERTY_UPDATED_AT,
    Notification.JSON_PROPERTY_STATUS,
    Notification.JSON_PROPERTY_EVENT_TYPE,
    Notification.JSON_PROPERTY_EVENT_VERSION,
    Notification.JSON_PROPERTY_RESOURCE_ID,
    Notification.JSON_PROPERTY_ATTEMPTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Notification {
    public static final String JSON_PROPERTY_ID = "id";
    private UUID id;

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    private OffsetDateTime updatedAt;

    public static final String JSON_PROPERTY_STATUS = "status";
    private NotificationStatus status;

    public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
    private WebhookEvent eventType;

    public static final String JSON_PROPERTY_EVENT_VERSION = "eventVersion";
    private BigDecimal eventVersion;

    public static final String JSON_PROPERTY_RESOURCE_ID = "resourceId";
    private UUID resourceId;

    public static final String JSON_PROPERTY_ATTEMPTS = "attempts";
    private List<String> attempts = new ArrayList<>();

    public Notification() {}

    public Notification id(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * The id of the Notification
     *
     * @return id
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(UUID id) {
        this.id = id;
    }

    public Notification createdAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The creation date of the notification
     *
     * @return createdAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public Notification updatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date when the notification was updated
     *
     * @return updatedAt
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Notification status(NotificationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NotificationStatus getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(NotificationStatus status) {
        this.status = status;
    }

    public Notification eventType(WebhookEvent eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get eventType
     *
     * @return eventType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public WebhookEvent getEventType() {
        return eventType;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventType(WebhookEvent eventType) {
        this.eventType = eventType;
    }

    public Notification eventVersion(BigDecimal eventVersion) {
        this.eventVersion = eventVersion;
        return this;
    }

    /**
     * The event version of the Notification
     *
     * @return eventVersion
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EVENT_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getEventVersion() {
        return eventVersion;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventVersion(BigDecimal eventVersion) {
        this.eventVersion = eventVersion;
    }

    public Notification resourceId(UUID resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * The resource id of the event which the Notification is listen to
     *
     * @return resourceId
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public UUID getResourceId() {
        return resourceId;
    }

    @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResourceId(UUID resourceId) {
        this.resourceId = resourceId;
    }

    public Notification attempts(List<String> attempts) {
        this.attempts = attempts;
        return this;
    }

    public Notification addAttemptsItem(String attemptsItem) {
        if (this.attempts == null) {
            this.attempts = new ArrayList<>();
        }
        this.attempts.add(attemptsItem);
        return this;
    }

    /**
     * The attempts related to Notification
     *
     * @return attempts
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ATTEMPTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getAttempts() {
        return attempts;
    }

    @JsonProperty(JSON_PROPERTY_ATTEMPTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAttempts(List<String> attempts) {
        this.attempts = attempts;
    }

    /** Return true if this Notification object is equal to o. */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Notification notification = (Notification) o;
        return Objects.equals(this.id, notification.id)
                && Objects.equals(this.createdAt, notification.createdAt)
                && Objects.equals(this.updatedAt, notification.updatedAt)
                && Objects.equals(this.status, notification.status)
                && Objects.equals(this.eventType, notification.eventType)
                && Objects.equals(this.eventVersion, notification.eventVersion)
                && Objects.equals(this.resourceId, notification.resourceId)
                && Objects.equals(this.attempts, notification.attempts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id, createdAt, updatedAt, status, eventType, eventVersion, resourceId, attempts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Notification {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    eventVersion: ").append(toIndentedString(eventVersion)).append("\n");
        sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
        sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `id` to the URL query string
        if (getId() != null) {
            joiner.add(
                    String.format(
                            "%sid%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `createdAt` to the URL query string
        if (getCreatedAt() != null) {
            joiner.add(
                    String.format(
                            "%screatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getCreatedAt()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `updatedAt` to the URL query string
        if (getUpdatedAt() != null) {
            joiner.add(
                    String.format(
                            "%supdatedAt%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getUpdatedAt()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `status` to the URL query string
        if (getStatus() != null) {
            joiner.add(
                    String.format(
                            "%sstatus%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `eventType` to the URL query string
        if (getEventType() != null) {
            joiner.add(
                    String.format(
                            "%seventType%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getEventType()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `eventVersion` to the URL query string
        if (getEventVersion() != null) {
            joiner.add(
                    String.format(
                            "%seventVersion%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getEventVersion()),
                                            StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `resourceId` to the URL query string
        if (getResourceId() != null) {
            joiner.add(
                    String.format(
                            "%sresourceId%s=%s",
                            prefix,
                            suffix,
                            URLEncoder.encode(
                                            String.valueOf(getResourceId()), StandardCharsets.UTF_8)
                                    .replaceAll("\\+", "%20")));
        }

        // add `attempts` to the URL query string
        if (getAttempts() != null) {
            for (int i = 0; i < getAttempts().size(); i++) {
                joiner.add(
                        String.format(
                                "%sattempts%s%s=%s",
                                prefix,
                                suffix,
                                "".equals(suffix)
                                        ? ""
                                        : String.format(
                                                "%s%d%s", containerPrefix, i, containerSuffix),
                                URLEncoder.encode(
                                                String.valueOf(getAttempts().get(i)),
                                                StandardCharsets.UTF_8)
                                        .replaceAll("\\+", "%20")));
            }
        }

        return joiner.toString();
    }
}
