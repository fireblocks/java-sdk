/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fireblocks.sdk.ApiClient;
import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.Pair;
import com.fireblocks.sdk.ValidationUtils;
import com.fireblocks.sdk.model.PublicKeyInformation;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EmbeddedWalletsApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

    public EmbeddedWalletsApi() {
        this(new ApiClient());
    }

    public EmbeddedWalletsApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
    }

    private ApiException getApiException(String operationId, HttpResponse<String> response) {
        String message =
                formatExceptionMessage(operationId, response.statusCode(), response.body());
        return new ApiException(
                response.statusCode(), message, response.headers(), response.body());
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * Get the public key of an asset Gets the public key of an asset associated with a specific
     * account within a Non-Custodial Wallet
     *
     * @param walletId The ID of the Non-Custodial wallet (required)
     * @param accountId The ID of the account (required)
     * @param assetId The ID of the asset (required)
     * @param change BIP44 derivation path - change value (required)
     * @param addressIndex BIP44 derivation path - index value (required)
     * @param compressed Compressed/Uncompressed public key format (optional)
     * @return CompletableFuture&lt;ApiResponse&lt;PublicKeyInformation&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<PublicKeyInformation>> getPublicKeyInfoForAddressNcw(
            String walletId,
            String accountId,
            String assetId,
            BigDecimal change,
            BigDecimal addressIndex,
            Boolean compressed)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    getPublicKeyInfoForAddressNcwRequestBuilder(
                            walletId, accountId, assetId, change, addressIndex, compressed);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException(
                                                    "getPublicKeyInfoForAddressNcw",
                                                    localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<PublicKeyInformation>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            PublicKeyInformation>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder getPublicKeyInfoForAddressNcwRequestBuilder(
            String walletId,
            String accountId,
            String assetId,
            BigDecimal change,
            BigDecimal addressIndex,
            Boolean compressed)
            throws ApiException {
        ValidationUtils.assertParamExistsAndNotEmpty(
                "getPublicKeyInfoForAddressNcw", "walletId", walletId);
        ValidationUtils.assertParamExistsAndNotEmpty(
                "getPublicKeyInfoForAddressNcw", "accountId", accountId);
        ValidationUtils.assertParamExistsAndNotEmpty(
                "getPublicKeyInfoForAddressNcw", "assetId", assetId);
        ValidationUtils.assertParamExists("getPublicKeyInfoForAddressNcw", "change", change);
        ValidationUtils.assertParamExists(
                "getPublicKeyInfoForAddressNcw", "addressIndex", addressIndex);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/ncw/{walletId}/accounts/{accountId}/{assetId}/{change}/{addressIndex}/public_key_info"
                        .replace("{walletId}", ApiClient.urlEncode(walletId.toString()))
                        .replace("{accountId}", ApiClient.urlEncode(accountId.toString()))
                        .replace("{assetId}", ApiClient.urlEncode(assetId.toString()))
                        .replace("{change}", ApiClient.urlEncode(change.toString()))
                        .replace("{addressIndex}", ApiClient.urlEncode(addressIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "compressed";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("compressed", compressed));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(
                    URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Get the public key for a derivation path Gets the public key information based on derivation
     * path and signing algorithm within a Non-Custodial Wallet
     *
     * @param walletId The ID of the Non-Custodial wallet (required)
     * @param derivationPath An array of integers (passed as JSON stringified array) representing
     *     the full BIP44 derivation path of the requested public key. The first element must always
     *     be 44. (required)
     * @param algorithm Elliptic Curve (required)
     * @param compressed (optional)
     * @return CompletableFuture&lt;ApiResponse&lt;PublicKeyInformation&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<PublicKeyInformation>> getPublicKeyInfoNcw(
            String walletId, String derivationPath, String algorithm, Boolean compressed)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    getPublicKeyInfoNcwRequestBuilder(
                            walletId, derivationPath, algorithm, compressed);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException(
                                                    "getPublicKeyInfoNcw", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<PublicKeyInformation>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            PublicKeyInformation>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder getPublicKeyInfoNcwRequestBuilder(
            String walletId, String derivationPath, String algorithm, Boolean compressed)
            throws ApiException {
        ValidationUtils.assertParamExistsAndNotEmpty("getPublicKeyInfoNcw", "walletId", walletId);
        ValidationUtils.assertParamExistsAndNotEmpty(
                "getPublicKeyInfoNcw", "derivationPath", derivationPath);
        ValidationUtils.assertParamExistsAndNotEmpty("getPublicKeyInfoNcw", "algorithm", algorithm);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/ncw/{walletId}/public_key_info"
                        .replace("{walletId}", ApiClient.urlEncode(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "derivationPath";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("derivationPath", derivationPath));
        localVarQueryParameterBaseName = "algorithm";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("algorithm", algorithm));
        localVarQueryParameterBaseName = "compressed";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("compressed", compressed));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(
                    URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}
