/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.fireblocks.sdk.api;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fireblocks.sdk.ApiClient;
import com.fireblocks.sdk.ApiException;
import com.fireblocks.sdk.ApiResponse;
import com.fireblocks.sdk.Pair;
import com.fireblocks.sdk.ValidationUtils;
import com.fireblocks.sdk.model.CreateSigningKeyDto;
import com.fireblocks.sdk.model.CreateValidationKeyDto;
import com.fireblocks.sdk.model.CreateValidationKeyResponseDto;
import com.fireblocks.sdk.model.GetSigningKeyResponseDto;
import com.fireblocks.sdk.model.GetValidationKeyResponseDto;
import com.fireblocks.sdk.model.ModifySigningKeyAgentIdDto;
import com.fireblocks.sdk.model.ModifySigningKeyDto;
import com.fireblocks.sdk.model.ModifyValidationKeyDto;
import com.fireblocks.sdk.model.SigningKeyDto;
import com.fireblocks.sdk.model.ValidationKeyDto;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeyLinkBetaApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

    public KeyLinkBetaApi() {
        this(new ApiClient());
    }

    public KeyLinkBetaApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
    }

    private ApiException getApiException(String operationId, HttpResponse<String> response) {
        String message =
                formatExceptionMessage(operationId, response.statusCode(), response.body());
        return new ApiException(
                response.statusCode(), message, response.headers(), response.body());
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * Add a new signing key Adds a new signing key to the workspace. The added key will be linked
     * to the specific Fireblocks agent user ID. The same user will receive the proof of ownership
     * message to be signed, and upon successful proof, the key will become enabled. Please note
     * that this endpoint is available only for Key Link enabled workspaces. **Note:** This endpoint
     * is currently in beta and might be subject to changes. If you want to participate and learn
     * more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager
     * or send an email to CSM@fireblocks.com.
     *
     * @param createSigningKeyDto (required)
     * @param idempotencyKey A unique identifier for the request. If the request is sent multiple
     *     times with the same idempotency key, the server will return the same response as the
     *     first request. The idempotency key is valid for 24 hours. (optional)
     * @return CompletableFuture&lt;ApiResponse&lt;SigningKeyDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<SigningKeyDto>> createSigningKey(
            CreateSigningKeyDto createSigningKeyDto, String idempotencyKey) throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    createSigningKeyRequestBuilder(createSigningKeyDto, idempotencyKey);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException("createSigningKey", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<SigningKeyDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            SigningKeyDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder createSigningKeyRequestBuilder(
            CreateSigningKeyDto createSigningKeyDto, String idempotencyKey) throws ApiException {
        ValidationUtils.assertParamExists(
                "createSigningKey", "createSigningKeyDto", createSigningKeyDto);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/key_link/signing_keys";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (idempotencyKey != null) {
            localVarRequestBuilder.header("Idempotency-Key", idempotencyKey.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createSigningKeyDto);
            localVarRequestBuilder.method(
                    "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Add a new validation key Adds a new validation key used to validate signing keys. The new
     * validation key will undergo an approval process by the workspace quorum. Please note that
     * this endpoint is available only for Key Link enabled workspaces. **Note:** This endpoint is
     * currently in beta and might be subject to changes. If you want to participate and learn more
     * about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or
     * send an email to CSM@fireblocks.com.
     *
     * @param createValidationKeyDto (required)
     * @param idempotencyKey A unique identifier for the request. If the request is sent multiple
     *     times with the same idempotency key, the server will return the same response as the
     *     first request. The idempotency key is valid for 24 hours. (optional)
     * @return CompletableFuture&lt;ApiResponse&lt;CreateValidationKeyResponseDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<CreateValidationKeyResponseDto>> createValidationKey(
            CreateValidationKeyDto createValidationKeyDto, String idempotencyKey)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    createValidationKeyRequestBuilder(createValidationKeyDto, idempotencyKey);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException(
                                                    "createValidationKey", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<CreateValidationKeyResponseDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            CreateValidationKeyResponseDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder createValidationKeyRequestBuilder(
            CreateValidationKeyDto createValidationKeyDto, String idempotencyKey)
            throws ApiException {
        ValidationUtils.assertParamExists(
                "createValidationKey", "createValidationKeyDto", createValidationKeyDto);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/key_link/validation_keys";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (idempotencyKey != null) {
            localVarRequestBuilder.header("Idempotency-Key", idempotencyKey.toString());
        }
        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(createValidationKeyDto);
            localVarRequestBuilder.method(
                    "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Disables a validation key Allows disabling validation key even if it has not expired yet. It
     * is not allowed to enable the validation key back. Another key has to be used for future
     * validations. Please note that this endpoint is available only for Key Link enabled
     * workspaces. **Note:** This endpoint is currently in beta and might be subject to changes. If
     * you want to participate and learn more about the Fireblocks Key Link, please contact your
     * Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     *
     * @param modifyValidationKeyDto (required)
     * @param keyId The unique identifier for the validation key provided by Fireblocks (required)
     * @return CompletableFuture&lt;ApiResponse&lt;ValidationKeyDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<ValidationKeyDto>> disableValidationKey(
            ModifyValidationKeyDto modifyValidationKeyDto, String keyId) throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    disableValidationKeyRequestBuilder(modifyValidationKeyDto, keyId);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException(
                                                    "disableValidationKey", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<ValidationKeyDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            ValidationKeyDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder disableValidationKeyRequestBuilder(
            ModifyValidationKeyDto modifyValidationKeyDto, String keyId) throws ApiException {
        ValidationUtils.assertParamExists(
                "disableValidationKey", "modifyValidationKeyDto", modifyValidationKeyDto);
        ValidationUtils.assertParamExistsAndNotEmpty("disableValidationKey", "keyId", keyId);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/key_link/validation_keys/{keyId}"
                        .replace("{keyId}", ApiClient.urlEncode(keyId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(modifyValidationKeyDto);
            localVarRequestBuilder.method(
                    "PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Get a signing key by &#x60;keyId&#x60; Returns a signing key if it exists, identified by the
     * specified Fireblocks provided &#x60;keyId&#x60;. Please note that this endpoint is available
     * only for Key Link enabled workspaces. **Note:** This endpoint is currently in beta and might
     * be subject to changes. If you want to participate and learn more about the Fireblocks Key
     * Link, please contact your Fireblocks Customer Success Manager or send an email to
     * CSM@fireblocks.com.
     *
     * @param keyId The unique identifier for the signing key provided by Fireblocks (required)
     * @return CompletableFuture&lt;ApiResponse&lt;SigningKeyDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<SigningKeyDto>> getSigningKey(String keyId)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder = getSigningKeyRequestBuilder(keyId);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException("getSigningKey", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<SigningKeyDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            SigningKeyDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder getSigningKeyRequestBuilder(String keyId) throws ApiException {
        ValidationUtils.assertParamExistsAndNotEmpty("getSigningKey", "keyId", keyId);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/key_link/signing_keys/{keyId}"
                        .replace("{keyId}", ApiClient.urlEncode(keyId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Get list of signing keys Returns the list of signing keys in the workspace Please note that
     * this endpoint is available only for Key Link enabled workspaces. **Note:** This endpoint is
     * currently in beta and might be subject to changes. If you want to participate and learn more
     * about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or
     * send an email to CSM@fireblocks.com.
     *
     * @param pageCursor Cursor to the next page (optional)
     * @param pageSize Amount of results to return in the next page (optional, default to 10)
     * @param sortBy Field(s) to use for sorting (optional, default to createdAt)
     * @param order Is the order ascending or descending (optional, default to ASC)
     * @return CompletableFuture&lt;ApiResponse&lt;GetSigningKeyResponseDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<GetSigningKeyResponseDto>> getSigningKeysList(
            String pageCursor, BigDecimal pageSize, String sortBy, String order)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    getSigningKeysListRequestBuilder(pageCursor, pageSize, sortBy, order);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException(
                                                    "getSigningKeysList", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<GetSigningKeyResponseDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            GetSigningKeyResponseDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder getSigningKeysListRequestBuilder(
            String pageCursor, BigDecimal pageSize, String sortBy, String order)
            throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/key_link/signing_keys";

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "pageCursor";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("pageCursor", pageCursor));
        localVarQueryParameterBaseName = "pageSize";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
        localVarQueryParameterBaseName = "sortBy";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("sortBy", sortBy));
        localVarQueryParameterBaseName = "order";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(
                    URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Get a validation key by &#x60;keyId&#x60; Returns a validation key if it exists, identified
     * by the specified &#x60;keyId&#x60;. Please note that this endpoint is available only for Key
     * Link enabled workspaces. **Note:** This endpoint is currently in beta and might be subject to
     * changes. If you want to participate and learn more about the Fireblocks Key Link, please
     * contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     *
     * @param keyId (required)
     * @return CompletableFuture&lt;ApiResponse&lt;ValidationKeyDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<ValidationKeyDto>> getValidationKey(String keyId)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder = getValidationKeyRequestBuilder(keyId);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException("getValidationKey", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<ValidationKeyDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            ValidationKeyDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder getValidationKeyRequestBuilder(String keyId) throws ApiException {
        ValidationUtils.assertParamExistsAndNotEmpty("getValidationKey", "keyId", keyId);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/key_link/validation_keys/{keyId}"
                        .replace("{keyId}", ApiClient.urlEncode(keyId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Get list of registered validation keys Returns the list of validation keys in the workspace
     * Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**
     * This endpoint is currently in beta and might be subject to changes. If you want to
     * participate and learn more about the Fireblocks Key Link, please contact your Fireblocks
     * Customer Success Manager or send an email to CSM@fireblocks.com.
     *
     * @param pageCursor Cursor to the next page (optional)
     * @param pageSize Amount of results to return in the next page (optional, default to 10)
     * @param sortBy Field(s) to use for sorting (optional, default to createdAt)
     * @param order Is the order ascending or descending (optional, default to ASC)
     * @return CompletableFuture&lt;ApiResponse&lt;GetValidationKeyResponseDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<GetValidationKeyResponseDto>> getValidationKeysList(
            String pageCursor, BigDecimal pageSize, String sortBy, String order)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    getValidationKeysListRequestBuilder(pageCursor, pageSize, sortBy, order);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException(
                                                    "getValidationKeysList", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<GetValidationKeyResponseDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            GetValidationKeyResponseDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder getValidationKeysListRequestBuilder(
            String pageCursor, BigDecimal pageSize, String sortBy, String order)
            throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/key_link/validation_keys";

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "pageCursor";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("pageCursor", pageCursor));
        localVarQueryParameterBaseName = "pageSize";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
        localVarQueryParameterBaseName = "sortBy";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("sortBy", sortBy));
        localVarQueryParameterBaseName = "order";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(
                    URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Set agent user id that can sign with the signing key identified by the Fireblocks provided
     * &#x60;keyId&#x60; Can modify existing signing key id if the key is not enabled. The change
     * done in background and will be visible once applied. If key is already enabled (after proof
     * of ownership) the user cannot be changed. Please note that this endpoint is available only
     * for Key Link enabled workspaces. **Note:** This endpoint is currently in beta and might be
     * subject to changes. If you want to participate and learn more about the Fireblocks Key Link,
     * please contact your Fireblocks Customer Success Manager or send an email to
     * CSM@fireblocks.com.
     *
     * @param modifySigningKeyAgentIdDto (required)
     * @param keyId The unique identifier for the signing key provided by Fireblocks (required)
     * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<Void>> setAgentId(
            ModifySigningKeyAgentIdDto modifySigningKeyAgentIdDto, String keyId)
            throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    setAgentIdRequestBuilder(modifySigningKeyAgentIdDto, keyId);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException("setAgentId", localVarResponse));
                                }
                                return CompletableFuture.completedFuture(
                                        new ApiResponse<Void>(
                                                localVarResponse.statusCode(),
                                                localVarResponse.headers().map(),
                                                null));
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder setAgentIdRequestBuilder(
            ModifySigningKeyAgentIdDto modifySigningKeyAgentIdDto, String keyId)
            throws ApiException {
        ValidationUtils.assertParamExists(
                "setAgentId", "modifySigningKeyAgentIdDto", modifySigningKeyAgentIdDto);
        ValidationUtils.assertParamExistsAndNotEmpty("setAgentId", "keyId", keyId);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/key_link/signing_keys/{keyId}/agent_user_id"
                        .replace("{keyId}", ApiClient.urlEncode(keyId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody =
                    memberVarObjectMapper.writeValueAsBytes(modifySigningKeyAgentIdDto);
            localVarRequestBuilder.method(
                    "PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /**
     * Modify the signing by Fireblocks provided &#x60;keyId&#x60; Allows assigning the signing key
     * to a vault account, if it hasn&#39;t been assigned to any other vault accounts yet. Please
     * note that this endpoint is available only for Key Link enabled workspaces. **Note:** This
     * endpoint is currently in beta and might be subject to changes. If you want to participate and
     * learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success
     * Manager or send an email to CSM@fireblocks.com.
     *
     * @param modifySigningKeyDto (required)
     * @param keyId The unique identifier for the signing key provided by Fireblocks (required)
     * @return CompletableFuture&lt;ApiResponse&lt;SigningKeyDto&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public CompletableFuture<ApiResponse<SigningKeyDto>> updateSigningKey(
            ModifySigningKeyDto modifySigningKeyDto, String keyId) throws ApiException {
        try {
            HttpRequest.Builder localVarRequestBuilder =
                    updateSigningKeyRequestBuilder(modifySigningKeyDto, keyId);
            return memberVarHttpClient
                    .sendAsync(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofString())
                    .thenComposeAsync(
                            localVarResponse -> {
                                if (memberVarAsyncResponseInterceptor != null) {
                                    memberVarAsyncResponseInterceptor.accept(localVarResponse);
                                }
                                if (localVarResponse.statusCode() / 100 != 2) {
                                    return CompletableFuture.failedFuture(
                                            getApiException("updateSigningKey", localVarResponse));
                                }
                                try {
                                    String responseBody = localVarResponse.body();
                                    return CompletableFuture.completedFuture(
                                            new ApiResponse<SigningKeyDto>(
                                                    localVarResponse.statusCode(),
                                                    localVarResponse.headers().map(),
                                                    responseBody == null || responseBody.isBlank()
                                                            ? null
                                                            : memberVarObjectMapper.readValue(
                                                                    responseBody,
                                                                    new TypeReference<
                                                                            SigningKeyDto>() {})));
                                } catch (IOException e) {
                                    return CompletableFuture.failedFuture(new ApiException(e));
                                }
                            });
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    private HttpRequest.Builder updateSigningKeyRequestBuilder(
            ModifySigningKeyDto modifySigningKeyDto, String keyId) throws ApiException {
        ValidationUtils.assertParamExists(
                "updateSigningKey", "modifySigningKeyDto", modifySigningKeyDto);
        ValidationUtils.assertParamExistsAndNotEmpty("updateSigningKey", "keyId", keyId);

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath =
                "/key_link/signing_keys/{keyId}"
                        .replace("{keyId}", ApiClient.urlEncode(keyId.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(modifySigningKeyDto);
            localVarRequestBuilder.method(
                    "PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}
