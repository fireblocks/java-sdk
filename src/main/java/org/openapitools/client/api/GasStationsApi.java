/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.GasStationConfiguration;
import org.openapitools.client.model.GasStationPropertiesResponse;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GasStationsApi {
  private ApiClient apiClient;

  public GasStationsApi() {
    this.apiClient = new ApiClient();
  }

  public GasStationsApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get gas station settings
   * Returns gas station settings and ETH balance.
   * @return GasStationPropertiesResponse
   * @throws ApiException if fails to make API call
   */
  public GasStationPropertiesResponse getGasStation() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/gas_station";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<GasStationPropertiesResponse> localVarReturnType = new GenericType<GasStationPropertiesResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get gas station settings by asset
   * Returns gas station settings and balances for a requested asset.
   * @param assetId The ID of the asset (required)
   * @return GasStationPropertiesResponse
   * @throws ApiException if fails to make API call
   */
  public GasStationPropertiesResponse getGasStationByAssetId(String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getGasStationByAssetId");
    }
    
    // create path and map variables
    String localVarPath = "/gas_station/{assetId}"
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<GasStationPropertiesResponse> localVarReturnType = new GenericType<GasStationPropertiesResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Edit gas station settings
   * Configures gas station settings for ETH.
   * @param gasStationConfiguration  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateGasStationConfiguration(GasStationConfiguration gasStationConfiguration) throws ApiException {
    Object localVarPostBody = gasStationConfiguration;
    
    // verify the required parameter 'gasStationConfiguration' is set
    if (gasStationConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'gasStationConfiguration' when calling updateGasStationConfiguration");
    }
    
    // create path and map variables
    String localVarPath = "/gas_station/configuration";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Edit gas station settings for an asset
   * Configures gas station settings for a requested asset.
   * @param assetId The ID of the asset (required)
   * @param gasStationConfiguration  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateGasStationConfigurationByAssetId(String assetId, GasStationConfiguration gasStationConfiguration) throws ApiException {
    Object localVarPostBody = gasStationConfiguration;
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling updateGasStationConfigurationByAssetId");
    }
    
    // verify the required parameter 'gasStationConfiguration' is set
    if (gasStationConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'gasStationConfiguration' when calling updateGasStationConfigurationByAssetId");
    }
    
    // create path and map variables
    String localVarPath = "/gas_station/configuration/{assetId}"
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
}
