/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.XBSettlementConfigCreationRequestBody;
import org.openapitools.client.model.XBSettlementConfigEditRequestBody;
import org.openapitools.client.model.XBSettlementConfigModel;
import org.openapitools.client.model.XBSettlementCreateFlowRequestBody;
import org.openapitools.client.model.XBSettlementFlowExecutionModel;
import org.openapitools.client.model.XBSettlementFlowExecutionRequestBody;
import org.openapitools.client.model.XBSettlementFlowPreviewModel;
import org.openapitools.client.model.XBSettlementGetAllConfigsResponse;
import org.openapitools.client.model.XBSettlementGetFlowResponse;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentsCrossBorderSettlementApi {
  private ApiClient apiClient;

  public PaymentsCrossBorderSettlementApi() {
    this.apiClient = new ApiClient();
  }

  public PaymentsCrossBorderSettlementApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create a new cross-border settlement configuration
   * &lt;u&gt;&lt;b&gt;Create a new cross-border settlement configuration. &lt;/u&gt;&lt;/b&gt;&lt;/br&gt;Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. &lt;/br&gt;  A configuration must contain at least two steps - &#x60;ON_RAMP&#x60; and &#x60;VAULT_ACCOUNT&#x60;. &lt;/br&gt; All other steps (e.g., &#x60;OFF_RAMP&#x60;, &#x60;FIAT_DESTINATION&#x60;, etc.) are optional. &lt;/br&gt; Every step must include the &#x60;accountId&#x60; to be used, while &#x60;inputAssetId&#x60; and &#x60;outputAssetId&#x60; are optional.  If those are not provided, a default value will be used from the Corridor Settings.&lt;/br&gt; If the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..&lt;/br&gt; You can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. &lt;/br&gt; **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param xbSettlementConfigCreationRequestBody  (optional)
   * @return XBSettlementConfigModel
   * @throws ApiException if fails to make API call
   */
  public XBSettlementConfigModel createXBSettlementConfig(XBSettlementConfigCreationRequestBody xbSettlementConfigCreationRequestBody) throws ApiException {
    Object localVarPostBody = xbSettlementConfigCreationRequestBody;
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/configs";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementConfigModel> localVarReturnType = new GenericType<XBSettlementConfigModel>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create a new cross-border settlement flow
   * Create a cross-border flow (based on a cross-border configuration) with an amount to transfer.  The assetId is defined by the cross-border configuration. Creating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided. Creating a cross-border flow will not execute the flow.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param xbSettlementCreateFlowRequestBody  (optional)
   * @return XBSettlementFlowPreviewModel
   * @throws ApiException if fails to make API call
   */
  public XBSettlementFlowPreviewModel createXBSettlementFlow(XBSettlementCreateFlowRequestBody xbSettlementCreateFlowRequestBody) throws ApiException {
    Object localVarPostBody = xbSettlementCreateFlowRequestBody;
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/flows";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementFlowPreviewModel> localVarReturnType = new GenericType<XBSettlementFlowPreviewModel>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete a cross-border settlement configuration
   * Delete a cross-border settlement configuration. This does not delete or remove previously executed flows that used this configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param configId The cross-border settlement configuration ID. (required)
   * @return XBSettlementConfigModel
   * @throws ApiException if fails to make API call
   */
  public XBSettlementConfigModel deleteXBSettlementConfig(String configId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'configId' is set
    if (configId == null) {
      throw new ApiException(400, "Missing the required parameter 'configId' when calling deleteXBSettlementConfig");
    }
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/configs/{configId}"
      .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementConfigModel> localVarReturnType = new GenericType<XBSettlementConfigModel>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Execute cross-border settlement flow
   * Send a payment flow with &#39;flowId&#39; for execution. If a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param flowId The cross-border settlement flow ID. (required)
   * @param xbSettlementFlowExecutionRequestBody  (optional)
   * @return XBSettlementFlowExecutionModel
   * @throws ApiException if fails to make API call
   */
  public XBSettlementFlowExecutionModel executeXBSettlementFlowAction(String flowId, XBSettlementFlowExecutionRequestBody xbSettlementFlowExecutionRequestBody) throws ApiException {
    Object localVarPostBody = xbSettlementFlowExecutionRequestBody;
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling executeXBSettlementFlowAction");
    }
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/flows/{flowId}/actions/execute"
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementFlowExecutionModel> localVarReturnType = new GenericType<XBSettlementFlowExecutionModel>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get a specific cross-border settlement configuration
   * Get a specific cross-border settlement configuration.&lt;/br&gt; **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param configId The cross-border settlement configuration ID. (required)
   * @return XBSettlementConfigModel
   * @throws ApiException if fails to make API call
   */
  public XBSettlementConfigModel getXBSettlementConfigById(String configId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'configId' is set
    if (configId == null) {
      throw new ApiException(400, "Missing the required parameter 'configId' when calling getXBSettlementConfigById");
    }
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/configs/{configId}"
      .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementConfigModel> localVarReturnType = new GenericType<XBSettlementConfigModel>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get all the cross-border settlement configurations
   * Get all the cross-border settlement configurations. &lt;/br&gt; **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @return XBSettlementGetAllConfigsResponse
   * @throws ApiException if fails to make API call
   */
  public XBSettlementGetAllConfigsResponse getXBSettlementConfigs() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/configs";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementGetAllConfigsResponse> localVarReturnType = new GenericType<XBSettlementGetAllConfigsResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get specific cross-border settlement flow details
   * Gets details for a specific cross-border settlement flow **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param flowId The cross-border settlement flow ID. (required)
   * @return XBSettlementGetFlowResponse
   * @throws ApiException if fails to make API call
   */
  public XBSettlementGetFlowResponse getXBSettlementFlowById(String flowId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling getXBSettlementFlowById");
    }
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/flows/{flowId}"
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementGetFlowResponse> localVarReturnType = new GenericType<XBSettlementGetFlowResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Edit a cross-border settlement configuration
   * Edit a cross-border settlement configuration. Editing a configuration does not affect previously executed flows that used the configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
   * @param configId The cross-border settlement configuration ID. (required)
   * @param xbSettlementConfigEditRequestBody  (optional)
   * @return XBSettlementConfigModel
   * @throws ApiException if fails to make API call
   */
  public XBSettlementConfigModel updateXBSettlementConfig(String configId, XBSettlementConfigEditRequestBody xbSettlementConfigEditRequestBody) throws ApiException {
    Object localVarPostBody = xbSettlementConfigEditRequestBody;
    
    // verify the required parameter 'configId' is set
    if (configId == null) {
      throw new ApiException(400, "Missing the required parameter 'configId' when calling updateXBSettlementConfig");
    }
    
    // create path and map variables
    String localVarPath = "/payments/xb-settlements/configs/{configId}"
      .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<XBSettlementConfigModel> localVarReturnType = new GenericType<XBSettlementConfigModel>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
