/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import java.math.BigDecimal;
import org.openapitools.client.model.GetNFTTokens200Response;
import org.openapitools.client.model.GetOwnershipTokens200Response;
import org.openapitools.client.model.TokenResponse;
import org.openapitools.client.model.UpdateTokenOwnershipStatusDto;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NftsBetaApi {
  private ApiClient apiClient;

  public NftsBetaApi() {
    this.apiClient = new ApiClient();
  }

  public NftsBetaApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * List token data by ID
   * Returns the requested token data.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta &amp; enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com). 
   * @param id NFT ID (required)
   * @return TokenResponse
   * @throws ApiException if fails to make API call
   */
  public TokenResponse getNFTTokenById(String id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getNFTTokenById");
    }
    
    // create path and map variables
    String localVarPath = "/nfts/tokens/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<TokenResponse> localVarReturnType = new GenericType<TokenResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List tokens by IDs
   * Returns the requested tokens data  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta &amp; enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com). 
   * @param ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
   * @param pageCursor Page cursor to fetch (optional)
   * @param pageSize Items per page (max 100) (optional)
   * @param sort Sort by param, it can be one param or a list of params separated by comma (optional
   * @param order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to ASC)
   * @return GetNFTTokens200Response
   * @throws ApiException if fails to make API call
   */
  public GetNFTTokens200Response getNFTTokens(String ids, String pageCursor, BigDecimal pageSize, List<String> sort, String order) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'ids' is set
    if (ids == null) {
      throw new ApiException(400, "Missing the required parameter 'ids' when calling getNFTTokens");
    }
    
    // create path and map variables
    String localVarPath = "/nfts/tokens";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageCursor", pageCursor));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<GetNFTTokens200Response> localVarReturnType = new GenericType<GetNFTTokens200Response>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List all owned tokens (paginated)
   * Returns all tokens and their data in your workspace.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta &amp; enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com). 
   * @param blockchainDescriptor Blockchain descriptor filter (optional)
   * @param vaultAccountIds A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request (optional)
   * @param ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (optional)
   * @param collectionIds A comma separated list of collection IDs. Up to 100 are allowed in a single request. (optional)
   * @param pageCursor Page cursor to fetch (optional)
   * @param pageSize Items per page (max 100) (optional)
   * @param sort Sort by param, it can be one param or a list of params separated by comma (optional
   * @param order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to ASC)
   * @param status Token ownership status (optional, default to LISTED)
   * @return GetOwnershipTokens200Response
   * @throws ApiException if fails to make API call
   */
  public GetOwnershipTokens200Response getOwnershipTokens(String blockchainDescriptor, String vaultAccountIds, String ids, String collectionIds, String pageCursor, BigDecimal pageSize, List<String> sort, String order, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/nfts/ownership/tokens";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("blockchainDescriptor", blockchainDescriptor));
    localVarQueryParams.addAll(apiClient.parameterToPair("vaultAccountIds", vaultAccountIds));
    localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
    localVarQueryParams.addAll(apiClient.parameterToPair("collectionIds", collectionIds));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageCursor", pageCursor));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<GetOwnershipTokens200Response> localVarReturnType = new GenericType<GetOwnershipTokens200Response>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Refresh token metadata
   * Updates the latest token metadata.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta &amp; enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com). 
   * @param id NFT ID (required)
   * @throws ApiException if fails to make API call
   */
  public void updateNFTTokenById(String id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateNFTTokenById");
    }
    
    // create path and map variables
    String localVarPath = "/nfts/tokens/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Update token ownership status
   * Updates token ownership status for a tenant, in all tenant vaults.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta &amp; enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com). 
   * @param id NFT ID (required)
   * @param updateTokenOwnershipStatusDto  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateNFTTokenStatus(String id, UpdateTokenOwnershipStatusDto updateTokenOwnershipStatusDto) throws ApiException {
    Object localVarPostBody = updateTokenOwnershipStatusDto;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateNFTTokenStatus");
    }
    
    // verify the required parameter 'updateTokenOwnershipStatusDto' is set
    if (updateTokenOwnershipStatusDto == null) {
      throw new ApiException(400, "Missing the required parameter 'updateTokenOwnershipStatusDto' when calling updateNFTTokenStatus");
    }
    
    // create path and map variables
    String localVarPath = "/nfts/ownership/tokens/{id}/status"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Refresh vault account tokens
   * Updates all tokens and balances per blockchain and vault account.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta &amp; enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com). 
   * @param blockchainDescriptor Blockchain descriptor filter (required)
   * @param vaultAccountId Vault account filter (required)
   * @throws ApiException if fails to make API call
   */
  public void updateOwnershipTokens(String blockchainDescriptor, String vaultAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'blockchainDescriptor' is set
    if (blockchainDescriptor == null) {
      throw new ApiException(400, "Missing the required parameter 'blockchainDescriptor' when calling updateOwnershipTokens");
    }
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling updateOwnershipTokens");
    }
    
    // create path and map variables
    String localVarPath = "/nfts/ownership/tokens";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("blockchainDescriptor", blockchainDescriptor));
    localVarQueryParams.addAll(apiClient.parameterToPair("vaultAccountId", vaultAccountId));

    
    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
}
