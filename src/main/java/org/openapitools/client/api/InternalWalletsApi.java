/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.CreateInternalWalletAssetRequest;
import org.openapitools.client.model.CreateInternalWalletRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SetCustomerRefIdForVaultAccountRequest;
import org.openapitools.client.model.UnmanagedWallet;
import org.openapitools.client.model.WalletAsset;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InternalWalletsApi {
  private ApiClient apiClient;

  public InternalWalletsApi() {
    this.apiClient = new ApiClient();
  }

  public InternalWalletsApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create an internal wallet
   * Creates a new internal wallet with the requested name.
   * @param createInternalWalletRequest  (optional)
   * @return UnmanagedWallet
   * @throws ApiException if fails to make API call
   */
  public UnmanagedWallet createInternalWallet(CreateInternalWalletRequest createInternalWalletRequest) throws ApiException {
    Object localVarPostBody = createInternalWalletRequest;
    
    // create path and map variables
    String localVarPath = "/internal_wallets";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<UnmanagedWallet> localVarReturnType = new GenericType<UnmanagedWallet>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Add an asset to an internal wallet
   * Adds an asset to an existing internal wallet.
   * @param walletId The ID of the wallet (required)
   * @param assetId The ID of the asset to add (required)
   * @param createInternalWalletAssetRequest  (optional)
   * @return WalletAsset
   * @throws ApiException if fails to make API call
   */
  public WalletAsset createInternalWalletAsset(String walletId, String assetId, CreateInternalWalletAssetRequest createInternalWalletAssetRequest) throws ApiException {
    Object localVarPostBody = createInternalWalletAssetRequest;
    
    // verify the required parameter 'walletId' is set
    if (walletId == null) {
      throw new ApiException(400, "Missing the required parameter 'walletId' when calling createInternalWalletAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling createInternalWalletAsset");
    }
    
    // create path and map variables
    String localVarPath = "/internal_wallets/{walletId}/{assetId}"
      .replaceAll("\\{" + "walletId" + "\\}", apiClient.escapeString(walletId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<WalletAsset> localVarReturnType = new GenericType<WalletAsset>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete an internal wallet
   * Deletes an internal wallet by ID.
   * @param walletId The ID of the wallet to delete (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteInternalWallet(String walletId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'walletId' is set
    if (walletId == null) {
      throw new ApiException(400, "Missing the required parameter 'walletId' when calling deleteInternalWallet");
    }
    
    // create path and map variables
    String localVarPath = "/internal_wallets/{walletId}"
      .replaceAll("\\{" + "walletId" + "\\}", apiClient.escapeString(walletId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Delete a whitelisted address from an internal wallet
   * Deletes a whitelisted address (for an asset) from an internal wallet.
   * @param walletId The ID of the wallet (required)
   * @param assetId The ID of the asset to delete (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteInternalWalletAsset(String walletId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'walletId' is set
    if (walletId == null) {
      throw new ApiException(400, "Missing the required parameter 'walletId' when calling deleteInternalWalletAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling deleteInternalWalletAsset");
    }
    
    // create path and map variables
    String localVarPath = "/internal_wallets/{walletId}/{assetId}"
      .replaceAll("\\{" + "walletId" + "\\}", apiClient.escapeString(walletId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Get an asset from an internal wallet
   * Returns information for an asset in an internal wallet.
   * @param walletId The ID of the wallet (required)
   * @param assetId The ID of the asset to return (required)
   * @return WalletAsset
   * @throws ApiException if fails to make API call
   */
  public WalletAsset getInternalWalletAsset(String walletId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'walletId' is set
    if (walletId == null) {
      throw new ApiException(400, "Missing the required parameter 'walletId' when calling getInternalWalletAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getInternalWalletAsset");
    }
    
    // create path and map variables
    String localVarPath = "/internal_wallets/{walletId}/{assetId}"
      .replaceAll("\\{" + "walletId" + "\\}", apiClient.escapeString(walletId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<WalletAsset> localVarReturnType = new GenericType<WalletAsset>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get assets for internal wallet
   * Returns all assets in an internal wallet by ID.
   * @param walletId The ID of the wallet to return (required)
   * @return UnmanagedWallet
   * @throws ApiException if fails to make API call
   */
  public UnmanagedWallet getInternalWalletById(String walletId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'walletId' is set
    if (walletId == null) {
      throw new ApiException(400, "Missing the required parameter 'walletId' when calling getInternalWalletById");
    }
    
    // create path and map variables
    String localVarPath = "/internal_wallets/{walletId}"
      .replaceAll("\\{" + "walletId" + "\\}", apiClient.escapeString(walletId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<UnmanagedWallet> localVarReturnType = new GenericType<UnmanagedWallet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List internal wallets
   * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets. 
   * @return List&lt;UnmanagedWallet&gt;
   * @throws ApiException if fails to make API call
   */
  public List<UnmanagedWallet> getInternalWallets() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/internal_wallets";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<UnmanagedWallet>> localVarReturnType = new GenericType<List<UnmanagedWallet>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Set an AML/KYT customer reference ID for an internal wallet
   * Sets an AML/KYT customer reference ID for the specific internal wallet.
   * @param walletId The wallet ID (required)
   * @param setCustomerRefIdForVaultAccountRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void setCustomerRefIdForInternalWallet(String walletId, SetCustomerRefIdForVaultAccountRequest setCustomerRefIdForVaultAccountRequest) throws ApiException {
    Object localVarPostBody = setCustomerRefIdForVaultAccountRequest;
    
    // verify the required parameter 'walletId' is set
    if (walletId == null) {
      throw new ApiException(400, "Missing the required parameter 'walletId' when calling setCustomerRefIdForInternalWallet");
    }
    
    // verify the required parameter 'setCustomerRefIdForVaultAccountRequest' is set
    if (setCustomerRefIdForVaultAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'setCustomerRefIdForVaultAccountRequest' when calling setCustomerRefIdForInternalWallet");
    }
    
    // create path and map variables
    String localVarPath = "/internal_wallets/{walletId}/set_customer_ref_id"
      .replaceAll("\\{" + "walletId" + "\\}", apiClient.escapeString(walletId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
}
