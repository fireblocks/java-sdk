/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.AddCollateralRequestBody;
import org.openapitools.client.model.CreateTransactionResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExchangeAccount;
import org.openapitools.client.model.RemoveCollateralRequestBody;
import org.openapitools.client.model.SettlementRequestBody;
import org.openapitools.client.model.SettlementResponse;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OffExchangesApi {
  private ApiClient apiClient;

  public OffExchangesApi() {
    this.apiClient = new ApiClient();
  }

  public OffExchangesApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * add collateral
   * add collateral, create deposit request
   * @param addCollateralRequestBody  (optional)
   * @return CreateTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public CreateTransactionResponse addOffExchange(AddCollateralRequestBody addCollateralRequestBody) throws ApiException {
    Object localVarPostBody = addCollateralRequestBody;
    
    // create path and map variables
    String localVarPath = "/off_exchange/add";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateTransactionResponse> localVarReturnType = new GenericType<CreateTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a specific collateral exchange account
   * Returns a collateral account by mainExchangeAccountId.
   * @param mainExchangeAccountId The id of the main exchange account for which the requested collateral account is associated with (required)
   * @return ExchangeAccount
   * @throws ApiException if fails to make API call
   */
  public ExchangeAccount getOffExchangeCollateralAccounts(String mainExchangeAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'mainExchangeAccountId' is set
    if (mainExchangeAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'mainExchangeAccountId' when calling getOffExchangeCollateralAccounts");
    }
    
    // create path and map variables
    String localVarPath = "/off_exchange/collateral_accounts/{mainExchangeAccountId}"
      .replaceAll("\\{" + "mainExchangeAccountId" + "\\}", apiClient.escapeString(mainExchangeAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ExchangeAccount> localVarReturnType = new GenericType<ExchangeAccount>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * get settlements transactions from exchange
   * get settlements transactions from exchange
   * @param mainExchangeAccountId  (required)
   * @return SettlementResponse
   * @throws ApiException if fails to make API call
   */
  public SettlementResponse getOffExchangeSettlementTransactions(String mainExchangeAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'mainExchangeAccountId' is set
    if (mainExchangeAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'mainExchangeAccountId' when calling getOffExchangeSettlementTransactions");
    }
    
    // create path and map variables
    String localVarPath = "/off_exchange/settlements/transactions";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("mainExchangeAccountId", mainExchangeAccountId));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<SettlementResponse> localVarReturnType = new GenericType<SettlementResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * remove collateral
   * remove collateral, create withdraw request
   * @param removeCollateralRequestBody  (optional)
   * @return CreateTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public CreateTransactionResponse removeOffExchange(RemoveCollateralRequestBody removeCollateralRequestBody) throws ApiException {
    Object localVarPostBody = removeCollateralRequestBody;
    
    // create path and map variables
    String localVarPath = "/off_exchange/remove";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateTransactionResponse> localVarReturnType = new GenericType<CreateTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * create settlement for a trader
   * create settlement for a trader
   * @param settlementRequestBody  (optional)
   * @return SettlementResponse
   * @throws ApiException if fails to make API call
   */
  public SettlementResponse settleOffExchangeTrades(SettlementRequestBody settlementRequestBody) throws ApiException {
    Object localVarPostBody = settlementRequestBody;
    
    // create path and map variables
    String localVarPath = "/off_exchange/settlements/trader";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<SettlementResponse> localVarReturnType = new GenericType<SettlementResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
