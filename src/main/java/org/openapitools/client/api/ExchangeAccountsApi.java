/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.ConvertAssetsRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExchangeAccount;
import org.openapitools.client.model.ExchangeAsset;
import org.openapitools.client.model.InternalTransferRequest;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExchangeAccountsApi {
  private ApiClient apiClient;

  public ExchangeAccountsApi() {
    this.apiClient = new ApiClient();
  }

  public ExchangeAccountsApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
   * Convert assets within an exchange account
   * @param exchangeAccountId The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts. (required)
   * @param convertAssetsRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void convertAssets(String exchangeAccountId, ConvertAssetsRequest convertAssetsRequest) throws ApiException {
    Object localVarPostBody = convertAssetsRequest;
    
    // verify the required parameter 'exchangeAccountId' is set
    if (exchangeAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeAccountId' when calling convertAssets");
    }
    
    // create path and map variables
    String localVarPath = "/exchange_accounts/{exchangeAccountId}/convert"
      .replaceAll("\\{" + "exchangeAccountId" + "\\}", apiClient.escapeString(exchangeAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Find an asset for an exchange account
   * Returns an asset for an exchange account.
   * @param exchangeAccountId The ID of the exchange account to return (required)
   * @param assetId The ID of the asset to return (required)
   * @return ExchangeAsset
   * @throws ApiException if fails to make API call
   */
  public ExchangeAsset getExchangeAccountAsset(String exchangeAccountId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'exchangeAccountId' is set
    if (exchangeAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeAccountId' when calling getExchangeAccountAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getExchangeAccountAsset");
    }
    
    // create path and map variables
    String localVarPath = "/exchange_accounts/{exchangeAccountId}/{assetId}"
      .replaceAll("\\{" + "exchangeAccountId" + "\\}", apiClient.escapeString(exchangeAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ExchangeAsset> localVarReturnType = new GenericType<ExchangeAsset>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a specific exchange account
   * Returns an exchange account by ID.
   * @param exchangeAccountId The ID of the exchange account to return (required)
   * @return ExchangeAccount
   * @throws ApiException if fails to make API call
   */
  public ExchangeAccount getExchangeAccountById(String exchangeAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'exchangeAccountId' is set
    if (exchangeAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeAccountId' when calling getExchangeAccountById");
    }
    
    // create path and map variables
    String localVarPath = "/exchange_accounts/{exchangeAccountId}"
      .replaceAll("\\{" + "exchangeAccountId" + "\\}", apiClient.escapeString(exchangeAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ExchangeAccount> localVarReturnType = new GenericType<ExchangeAccount>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List exchange accounts
   * Returns all exchange accounts.
   * @return List&lt;ExchangeAccount&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ExchangeAccount> getExchangeAccounts() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/exchange_accounts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<ExchangeAccount>> localVarReturnType = new GenericType<List<ExchangeAccount>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Internal tranfer for exchange accounts
   * Transfers funds between trading accounts under the same exchange account.
   * @param exchangeAccountId The ID of the exchange account to return (required)
   * @param internalTransferRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void internalTransfer(String exchangeAccountId, InternalTransferRequest internalTransferRequest) throws ApiException {
    Object localVarPostBody = internalTransferRequest;
    
    // verify the required parameter 'exchangeAccountId' is set
    if (exchangeAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeAccountId' when calling internalTransfer");
    }
    
    // create path and map variables
    String localVarPath = "/exchange_accounts/{exchangeAccountId}/internal_transfer"
      .replaceAll("\\{" + "exchangeAccountId" + "\\}", apiClient.escapeString(exchangeAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
}
