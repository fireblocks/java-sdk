/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.CancelTransactionResponse;
import org.openapitools.client.model.CreateTransactionResponse;
import org.openapitools.client.model.DropTransactionRequest;
import org.openapitools.client.model.DropTransactionResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.EstimatedNetworkFeeResponse;
import org.openapitools.client.model.EstimatedTransactionFeeResponse;
import org.openapitools.client.model.FreezeTransactionResponse;
import org.openapitools.client.model.SetConfirmationsThresholdRequest;
import org.openapitools.client.model.SetConfirmationsThresholdResponse;
import org.openapitools.client.model.TransactionRequest;
import org.openapitools.client.model.TransactionResponse;
import org.openapitools.client.model.UnfreezeTransactionResponse;
import org.openapitools.client.model.ValidateAddressResponse;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionsApi {
  private ApiClient apiClient;

  public TransactionsApi() {
    this.apiClient = new ApiClient();
  }

  public TransactionsApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Cancel a transaction
   * Cancels a transaction by ID.
   * @param txId The ID of the transaction to cancel (required)
   * @return CancelTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public CancelTransactionResponse cancelTransaction(String txId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'txId' is set
    if (txId == null) {
      throw new ApiException(400, "Missing the required parameter 'txId' when calling cancelTransaction");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/{txId}/cancel"
      .replaceAll("\\{" + "txId" + "\\}", apiClient.escapeString(txId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CancelTransactionResponse> localVarReturnType = new GenericType<CancelTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create a new transaction
   * Creates a new transaction.
   * @param transactionRequest  (optional)
   * @return CreateTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public CreateTransactionResponse createTransaction(TransactionRequest transactionRequest) throws ApiException {
    Object localVarPostBody = transactionRequest;
    
    // create path and map variables
    String localVarPath = "/transactions";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateTransactionResponse> localVarReturnType = new GenericType<CreateTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Drop ETH transaction by ID
   * Drops a stuck ETH transaction and creates a replacement transaction.
   * @param txId The ID of the transaction (required)
   * @param dropTransactionRequest  (optional)
   * @return DropTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public DropTransactionResponse dropTransaction(String txId, DropTransactionRequest dropTransactionRequest) throws ApiException {
    Object localVarPostBody = dropTransactionRequest;
    
    // verify the required parameter 'txId' is set
    if (txId == null) {
      throw new ApiException(400, "Missing the required parameter 'txId' when calling dropTransaction");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/{txId}/drop"
      .replaceAll("\\{" + "txId" + "\\}", apiClient.escapeString(txId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DropTransactionResponse> localVarReturnType = new GenericType<DropTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Estimate the required fee for an asset
   * Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.
   * @param assetId The asset for which to estimate the fee (required)
   * @return EstimatedNetworkFeeResponse
   * @throws ApiException if fails to make API call
   */
  public EstimatedNetworkFeeResponse estimateNetworkFee(String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling estimateNetworkFee");
    }
    
    // create path and map variables
    String localVarPath = "/estimate_network_fee";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("assetId", assetId));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<EstimatedNetworkFeeResponse> localVarReturnType = new GenericType<EstimatedNetworkFeeResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Estimate transaction fee
   * Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).
   * @param transactionRequest  (optional)
   * @return EstimatedTransactionFeeResponse
   * @throws ApiException if fails to make API call
   */
  public EstimatedTransactionFeeResponse estimateTransactionFee(TransactionRequest transactionRequest) throws ApiException {
    Object localVarPostBody = transactionRequest;
    
    // create path and map variables
    String localVarPath = "/transactions/estimate_fee";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<EstimatedTransactionFeeResponse> localVarReturnType = new GenericType<EstimatedTransactionFeeResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Freeze a transaction
   * Freezes a transaction by ID.
   * @param txId The ID of the transaction to freeze (required)
   * @return FreezeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public FreezeTransactionResponse freezeTransaction(String txId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'txId' is set
    if (txId == null) {
      throw new ApiException(400, "Missing the required parameter 'txId' when calling freezeTransaction");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/{txId}/freeze"
      .replaceAll("\\{" + "txId" + "\\}", apiClient.escapeString(txId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<FreezeTransactionResponse> localVarReturnType = new GenericType<FreezeTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a specific transaction by external transaction ID
   * Returns transaction by external transaction ID.
   * @param externalTxId The external ID of the transaction to return (required)
   * @return TransactionResponse
   * @throws ApiException if fails to make API call
   */
  public TransactionResponse getTransactionByExternalId(String externalTxId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'externalTxId' is set
    if (externalTxId == null) {
      throw new ApiException(400, "Missing the required parameter 'externalTxId' when calling getTransactionByExternalId");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/external_tx_id/{externalTxId}/"
      .replaceAll("\\{" + "externalTxId" + "\\}", apiClient.escapeString(externalTxId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<TransactionResponse> localVarReturnType = new GenericType<TransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a specific transaction by Fireblocks transaction ID
   * Returns a transaction by ID.
   * @param txId The ID of the transaction to return (required)
   * @return TransactionResponse
   * @throws ApiException if fails to make API call
   */
  public TransactionResponse getTransactionById(String txId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'txId' is set
    if (txId == null) {
      throw new ApiException(400, "Missing the required parameter 'txId' when calling getTransactionById");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/{txId}"
      .replaceAll("\\{" + "txId" + "\\}", apiClient.escapeString(txId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<TransactionResponse> localVarReturnType = new GenericType<TransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List transaction history
   * Lists the transaction history for your workspace.
   * @param before Unix timestamp in milliseconds. Returns only transactions created before the specified date (optional)
   * @param after Unix timestamp in milliseconds. Returns only transactions created after the specified date (optional)
   * @param status You can filter by one of the statuses. (optional)
   * @param orderBy The field to order the results by (optional)
   * @param sort The direction to order the results by (optional)
   * @param limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (optional, default to 200)
   * @param sourceType The source type of the transaction (optional)
   * @param sourceId The source ID of the transaction (optional)
   * @param destType The destination type of the transaction (optional)
   * @param destId The destination ID of the transaction (optional)
   * @param assets A list of assets to filter by, seperated by commas (optional)
   * @param txHash Returns only results with a specified txHash (optional)
   * @return List&lt;TransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TransactionResponse> getTransactions(String before, String after, String status, String orderBy, String sort, Integer limit, String sourceType, String sourceId, String destType, String destId, String assets, String txHash) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/transactions";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("sourceType", sourceType));
    localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));
    localVarQueryParams.addAll(apiClient.parameterToPair("destType", destType));
    localVarQueryParams.addAll(apiClient.parameterToPair("destId", destId));
    localVarQueryParams.addAll(apiClient.parameterToPair("assets", assets));
    localVarQueryParams.addAll(apiClient.parameterToPair("txHash", txHash));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<TransactionResponse>> localVarReturnType = new GenericType<List<TransactionResponse>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Set confirmation threshold by transaction ID
   * Overrides the required number of confirmations for transaction completion by transaction ID.
   * @param txId The ID of the transaction (required)
   * @param setConfirmationsThresholdRequest  (optional)
   * @return SetConfirmationsThresholdResponse
   * @throws ApiException if fails to make API call
   */
  public SetConfirmationsThresholdResponse setConfirmationThresholdForTransaction(String txId, SetConfirmationsThresholdRequest setConfirmationsThresholdRequest) throws ApiException {
    Object localVarPostBody = setConfirmationsThresholdRequest;
    
    // verify the required parameter 'txId' is set
    if (txId == null) {
      throw new ApiException(400, "Missing the required parameter 'txId' when calling setConfirmationThresholdForTransaction");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/{txId}/set_confirmation_threshold"
      .replaceAll("\\{" + "txId" + "\\}", apiClient.escapeString(txId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<SetConfirmationsThresholdResponse> localVarReturnType = new GenericType<SetConfirmationsThresholdResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Set confirmation threshold by transaction hash
   * Overrides the required number of confirmations for transaction completion by transaction hash.
   * @param txHash The TxHash (required)
   * @param setConfirmationsThresholdRequest  (optional)
   * @return SetConfirmationsThresholdResponse
   * @throws ApiException if fails to make API call
   */
  public SetConfirmationsThresholdResponse setConfirmationThresholdForTransactionByHash(String txHash, SetConfirmationsThresholdRequest setConfirmationsThresholdRequest) throws ApiException {
    Object localVarPostBody = setConfirmationsThresholdRequest;
    
    // verify the required parameter 'txHash' is set
    if (txHash == null) {
      throw new ApiException(400, "Missing the required parameter 'txHash' when calling setConfirmationThresholdForTransactionByHash");
    }
    
    // create path and map variables
    String localVarPath = "/txHash/{txHash}/set_confirmation_threshold"
      .replaceAll("\\{" + "txHash" + "\\}", apiClient.escapeString(txHash.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<SetConfirmationsThresholdResponse> localVarReturnType = new GenericType<SetConfirmationsThresholdResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Unfreeze a transaction
   * Unfreezes a transaction by ID and makes the transaction available again.
   * @param txId The ID of the transaction to unfreeze (required)
   * @return UnfreezeTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public UnfreezeTransactionResponse unfreezeTransaction(String txId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'txId' is set
    if (txId == null) {
      throw new ApiException(400, "Missing the required parameter 'txId' when calling unfreezeTransaction");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/{txId}/unfreeze"
      .replaceAll("\\{" + "txId" + "\\}", apiClient.escapeString(txId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<UnfreezeTransactionResponse> localVarReturnType = new GenericType<UnfreezeTransactionResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Validate destination address
   * Checks if an address is valid (for XRP, DOT, XLM, and EOS).
   * @param assetId The asset of the address (required)
   * @param address The address to validate (required)
   * @return ValidateAddressResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateAddressResponse validateAddress(String assetId, String address) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling validateAddress");
    }
    
    // verify the required parameter 'address' is set
    if (address == null) {
      throw new ApiException(400, "Missing the required parameter 'address' when calling validateAddress");
    }
    
    // create path and map variables
    String localVarPath = "/transactions/validate_address/{assetId}/{address}"
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()))
      .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ValidateAddressResponse> localVarReturnType = new GenericType<ValidateAddressResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
