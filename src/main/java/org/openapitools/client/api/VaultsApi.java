/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import java.math.BigDecimal;
import org.openapitools.client.model.CreateAddressResponse;
import org.openapitools.client.model.CreateVaultAccountAssetAddressRequest;
import org.openapitools.client.model.CreateVaultAccountAssetRequest;
import org.openapitools.client.model.CreateVaultAccountRequest;
import org.openapitools.client.model.CreateVaultAssetResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedAssetWalletResponse;
import org.openapitools.client.model.PublicKeyInformation;
import org.openapitools.client.model.SetAutoFuelForVaultAccountRequest;
import org.openapitools.client.model.SetCustomerRefIdForVaultAccountRequest;
import org.openapitools.client.model.UnspentInputsResponse;
import org.openapitools.client.model.UpdateVaultAccountAssetAddressRequest;
import org.openapitools.client.model.UpdateVaultAccountRequest;
import org.openapitools.client.model.VaultAccount;
import org.openapitools.client.model.VaultAccountsPagedResponse;
import org.openapitools.client.model.VaultAsset;
import org.openapitools.client.model.VaultWalletAddress;

import com.sun.jersey.api.client.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VaultsApi {
  private ApiClient apiClient;

  public VaultsApi() {
    this.apiClient = new ApiClient();
  }

  public VaultsApi(Configuration config) {
    this.apiClient = new ApiClient(config);
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Activate a wallet in a vault account
   * Initiates activation for a wallet in a vault account.
   * @param vaultAccountId The ID of the vault account to return, or &#39;default&#39; for the default vault account (required)
   * @param assetId The ID of the asset (required)
   * @return CreateVaultAssetResponse
   * @throws ApiException if fails to make API call
   */
  public CreateVaultAssetResponse activateAssetForVaultAccount(String vaultAccountId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling activateAssetForVaultAccount");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling activateAssetForVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/activate"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateVaultAssetResponse> localVarReturnType = new GenericType<CreateVaultAssetResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Convert a segwit address to legacy format
   * Converts an existing segwit address to the legacy format.
   * @param vaultAccountId The ID of the vault account (required)
   * @param assetId The ID of the asset (required)
   * @param addressId The segwit address to translate (required)
   * @return CreateAddressResponse
   * @throws ApiException if fails to make API call
   */
  public CreateAddressResponse createLegacyAddressForVaultAccountAsset(String vaultAccountId, String assetId, String addressId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling createLegacyAddressForVaultAccountAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling createLegacyAddressForVaultAccountAsset");
    }
    
    // verify the required parameter 'addressId' is set
    if (addressId == null) {
      throw new ApiException(400, "Missing the required parameter 'addressId' when calling createLegacyAddressForVaultAccountAsset");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/create_legacy"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()))
      .replaceAll("\\{" + "addressId" + "\\}", apiClient.escapeString(addressId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateAddressResponse> localVarReturnType = new GenericType<CreateAddressResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create a new vault account
   * Creates a new vault account with the requested name.
   * @param createVaultAccountRequest  (required)
   * @return VaultAccount
   * @throws ApiException if fails to make API call
   */
  public VaultAccount createVaultAccount(CreateVaultAccountRequest createVaultAccountRequest) throws ApiException {
    Object localVarPostBody = createVaultAccountRequest;
    
    // verify the required parameter 'createVaultAccountRequest' is set
    if (createVaultAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createVaultAccountRequest' when calling createVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<VaultAccount> localVarReturnType = new GenericType<VaultAccount>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create a new wallet
   * Creates a wallet for a specific asset in a vault account.
   * @param vaultAccountId The ID of the vault account to return, or &#39;default&#39; for the default vault account (required)
   * @param assetId The ID of the asset (required)
   * @param createVaultAccountAssetRequest  (optional)
   * @return CreateVaultAssetResponse
   * @throws ApiException if fails to make API call
   */
  public CreateVaultAssetResponse createVaultAccountAsset(String vaultAccountId, String assetId, CreateVaultAccountAssetRequest createVaultAccountAssetRequest) throws ApiException {
    Object localVarPostBody = createVaultAccountAssetRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling createVaultAccountAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling createVaultAccountAsset");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateVaultAssetResponse> localVarReturnType = new GenericType<CreateVaultAssetResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create new asset deposit address
   * Creates a new deposit address for an asset of a vault account.
   * @param vaultAccountId The ID of the vault account to return (required)
   * @param assetId The ID of the asset (required)
   * @param createVaultAccountAssetAddressRequest  (optional)
   * @return CreateAddressResponse
   * @throws ApiException if fails to make API call
   */
  public CreateAddressResponse createVaultAccountAssetAddress(String vaultAccountId, String assetId, CreateVaultAccountAssetAddressRequest createVaultAccountAssetAddressRequest) throws ApiException {
    Object localVarPostBody = createVaultAccountAssetAddressRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling createVaultAccountAssetAddress");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling createVaultAccountAssetAddress");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/addresses"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateAddressResponse> localVarReturnType = new GenericType<CreateAddressResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List asset wallets (Paginated)
   * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances. **Note:**   - This API endpoint is in limited availability and available for selected customers. If you would like to get early access to this endpoint, please reach out to [Fireblocks Support](https://support.fireblocks.io/hc/en-us/requests/new?ticket_form_id&#x3D;36000337220)   - This API call is subject to [rate limits](https://developers.fireblocks.com/reference/rate-limiting). 
   * @param totalAmountLargerThan When specified, only asset wallets with total balance larger than this amount are returned. (optional)
   * @param assetId When specified, only asset wallets cross vault accounts that have this asset ID are returned. (optional)
   * @param before Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page. (optional)
   * @param after Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page. (optional)
   * @param limit The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000. (optional, default to 200)
   * @return PaginatedAssetWalletResponse
   * @throws ApiException if fails to make API call
   */
  public PaginatedAssetWalletResponse getAssetWallets(BigDecimal totalAmountLargerThan, String assetId, String before, String after, BigDecimal limit) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/vault/asset_wallets";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("totalAmountLargerThan", totalAmountLargerThan));
    localVarQueryParams.addAll(apiClient.parameterToPair("assetId", assetId));
    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<PaginatedAssetWalletResponse> localVarReturnType = new GenericType<PaginatedAssetWalletResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get the maximum spendable amount in a single transaction.
   * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
   * @param vaultAccountId The ID of the vault account, or &#39;default&#39; for the default vault account (required)
   * @param assetId The ID of the asset (required)
   * @param manualSignging False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device. (optional)
   * @throws ApiException if fails to make API call
   */
  public void getMaxSpendableAmount(String vaultAccountId, String assetId, Boolean manualSignging) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling getMaxSpendableAmount");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getMaxSpendableAmount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/max_spendable_amount"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("manualSignging", manualSignging));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * List vault acounts (Paginated)
   * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
   * @param namePrefix  (optional)
   * @param nameSuffix  (optional)
   * @param minAmountThreshold  (optional)
   * @param assetId  (optional)
   * @param maxBip44AddressIndexUsed  (optional)
   * @param maxBip44ChangeAddressIndexUsed  (optional)
   * @param orderBy  (optional, default to DESC)
   * @param before  (optional)
   * @param after  (optional)
   * @param limit  (optional, default to 200)
   * @return VaultAccountsPagedResponse
   * @throws ApiException if fails to make API call
   */
  public VaultAccountsPagedResponse getPagedVaultAccounts(String namePrefix, String nameSuffix, BigDecimal minAmountThreshold, String assetId, BigDecimal maxBip44AddressIndexUsed, BigDecimal maxBip44ChangeAddressIndexUsed, String orderBy, String before, String after, BigDecimal limit) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/vault/accounts_paged";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("namePrefix", namePrefix));
    localVarQueryParams.addAll(apiClient.parameterToPair("nameSuffix", nameSuffix));
    localVarQueryParams.addAll(apiClient.parameterToPair("minAmountThreshold", minAmountThreshold));
    localVarQueryParams.addAll(apiClient.parameterToPair("assetId", assetId));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxBip44AddressIndexUsed", maxBip44AddressIndexUsed));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxBip44ChangeAddressIndexUsed", maxBip44ChangeAddressIndexUsed));
    localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<VaultAccountsPagedResponse> localVarReturnType = new GenericType<VaultAccountsPagedResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get the public key information
   * Gets the public key information based on derivation path and signing algorithm.
   * @param derivationPath  (required)
   * @param algorithm  (required)
   * @param compressed  (optional)
   * @return PublicKeyInformation
   * @throws ApiException if fails to make API call
   */
  public PublicKeyInformation getPublicKeyInfo(String derivationPath, String algorithm, Boolean compressed) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'derivationPath' is set
    if (derivationPath == null) {
      throw new ApiException(400, "Missing the required parameter 'derivationPath' when calling getPublicKeyInfo");
    }
    
    // verify the required parameter 'algorithm' is set
    if (algorithm == null) {
      throw new ApiException(400, "Missing the required parameter 'algorithm' when calling getPublicKeyInfo");
    }
    
    // create path and map variables
    String localVarPath = "/vault/public_key_info/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("derivationPath", derivationPath));
    localVarQueryParams.addAll(apiClient.parameterToPair("algorithm", algorithm));
    localVarQueryParams.addAll(apiClient.parameterToPair("compressed", compressed));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<PublicKeyInformation> localVarReturnType = new GenericType<PublicKeyInformation>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get the public key for a vault account
   * Gets the public key information for the vault account.
   * @param vaultAccountId  (required)
   * @param assetId  (required)
   * @param change  (required)
   * @param addressIndex  (required)
   * @param compressed  (optional)
   * @return PublicKeyInformation
   * @throws ApiException if fails to make API call
   */
  public PublicKeyInformation getPublicKeyInfoForAddress(String vaultAccountId, String assetId, BigDecimal change, BigDecimal addressIndex, Boolean compressed) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling getPublicKeyInfoForAddress");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getPublicKeyInfoForAddress");
    }
    
    // verify the required parameter 'change' is set
    if (change == null) {
      throw new ApiException(400, "Missing the required parameter 'change' when calling getPublicKeyInfoForAddress");
    }
    
    // verify the required parameter 'addressIndex' is set
    if (addressIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'addressIndex' when calling getPublicKeyInfoForAddress");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/{change}/{addressIndex}/public_key_info"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()))
      .replaceAll("\\{" + "change" + "\\}", apiClient.escapeString(change.toString()))
      .replaceAll("\\{" + "addressIndex" + "\\}", apiClient.escapeString(addressIndex.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("compressed", compressed));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<PublicKeyInformation> localVarReturnType = new GenericType<PublicKeyInformation>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get the asset balance for a vault account
   * Returns a wallet for a specific asset of a vault account.
   * @param vaultAccountId The ID of the vault account to return (required)
   * @param assetId The ID of the asset (required)
   * @return VaultAsset
   * @throws ApiException if fails to make API call
   */
  public VaultAsset getVaultAccountAsset(String vaultAccountId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling getVaultAccountAsset");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getVaultAccountAsset");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<VaultAsset> localVarReturnType = new GenericType<VaultAsset>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get asset addresses
   * Lists all addresses for specific asset of vault account.
   * @param vaultAccountId The ID of the vault account to return (required)
   * @param assetId The ID of the asset (required)
   * @return List&lt;VaultWalletAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public List<VaultWalletAddress> getVaultAccountAssetAddresses(String vaultAccountId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling getVaultAccountAssetAddresses");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getVaultAccountAssetAddresses");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/addresses"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<VaultWalletAddress>> localVarReturnType = new GenericType<List<VaultWalletAddress>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get UTXO unspent inputs information
   * Returns unspent inputs information of an asset in a vault account.
   * @param vaultAccountId The ID of the vault account (required)
   * @param assetId The ID of the asset (required)
   * @return List&lt;UnspentInputsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<UnspentInputsResponse> getVaultAccountAssetUnspentInputs(String vaultAccountId, String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling getVaultAccountAssetUnspentInputs");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getVaultAccountAssetUnspentInputs");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/unspent_inputs"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<UnspentInputsResponse>> localVarReturnType = new GenericType<List<UnspentInputsResponse>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a vault account by ID
   * Returns the requested vault account.
   * @param vaultAccountId The ID of the vault account to return type: string (required)
   * @return VaultAccount
   * @throws ApiException if fails to make API call
   */
  public VaultAccount getVaultAccountById(String vaultAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling getVaultAccountById");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<VaultAccount> localVarReturnType = new GenericType<VaultAccount>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List vault accounts
   * Gets all vault accounts in your workspace.
   * @param namePrefix  (optional)
   * @param nameSuffix  (optional)
   * @param minAmountThreshold  (optional)
   * @param assetId  (optional)
   * @param maxBip44AddressIndexUsed  (optional)
   * @param maxBip44ChangeAddressIndexUsed  (optional)
   * @return List&lt;VaultAccount&gt;
   * @throws ApiException if fails to make API call
   */
  public List<VaultAccount> getVaultAccounts(String namePrefix, String nameSuffix, BigDecimal minAmountThreshold, String assetId, BigDecimal maxBip44AddressIndexUsed, BigDecimal maxBip44ChangeAddressIndexUsed) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/vault/accounts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("namePrefix", namePrefix));
    localVarQueryParams.addAll(apiClient.parameterToPair("nameSuffix", nameSuffix));
    localVarQueryParams.addAll(apiClient.parameterToPair("minAmountThreshold", minAmountThreshold));
    localVarQueryParams.addAll(apiClient.parameterToPair("assetId", assetId));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxBip44AddressIndexUsed", maxBip44AddressIndexUsed));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxBip44ChangeAddressIndexUsed", maxBip44ChangeAddressIndexUsed));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<VaultAccount>> localVarReturnType = new GenericType<List<VaultAccount>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get vault balance by asset
   * Gets the vault balance summary for an asset.
   * @param assetId  (required)
   * @return VaultAsset
   * @throws ApiException if fails to make API call
   */
  public VaultAsset getVaultAssetById(String assetId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling getVaultAssetById");
    }
    
    // create path and map variables
    String localVarPath = "/vault/assets/{assetId}"
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<VaultAsset> localVarReturnType = new GenericType<VaultAsset>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get asset balance for chosen assets
   * Gets the assets amount summary for all accounts or filtered accounts.
   * @param accountNamePrefix  (optional)
   * @param accountNameSuffix  (optional)
   * @return List&lt;VaultAsset&gt;
   * @throws ApiException if fails to make API call
   */
  public List<VaultAsset> getVaultAssets(String accountNamePrefix, String accountNameSuffix) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/vault/assets";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("accountNamePrefix", accountNamePrefix));
    localVarQueryParams.addAll(apiClient.parameterToPair("accountNameSuffix", accountNameSuffix));

    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<VaultAsset>> localVarReturnType = new GenericType<List<VaultAsset>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Hide a vault account in the console
   * Hides the requested vault account from the web console view.
   * @param vaultAccountId The vault account to hide (required)
   * @throws ApiException if fails to make API call
   */
  public void hideVaultAccount(String vaultAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling hideVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/hide"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Turn autofueling on or off
   * Sets the autofueling property of the vault account to enabled or disabled.
   * @param vaultAccountId The vault account ID (required)
   * @param setAutoFuelForVaultAccountRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void setAutoFuelForVaultAccount(String vaultAccountId, SetAutoFuelForVaultAccountRequest setAutoFuelForVaultAccountRequest) throws ApiException {
    Object localVarPostBody = setAutoFuelForVaultAccountRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling setAutoFuelForVaultAccount");
    }
    
    // verify the required parameter 'setAutoFuelForVaultAccountRequest' is set
    if (setAutoFuelForVaultAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'setAutoFuelForVaultAccountRequest' when calling setAutoFuelForVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/set_auto_fuel"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Set an AML/KYT customer reference ID for a vault account
   * Assigns an AML/KYT customer reference ID for the vault account.
   * @param vaultAccountId The vault account ID (required)
   * @param setCustomerRefIdForVaultAccountRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void setCustomerRefIdForVaultAccount(String vaultAccountId, SetCustomerRefIdForVaultAccountRequest setCustomerRefIdForVaultAccountRequest) throws ApiException {
    Object localVarPostBody = setCustomerRefIdForVaultAccountRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling setCustomerRefIdForVaultAccount");
    }
    
    // verify the required parameter 'setCustomerRefIdForVaultAccountRequest' is set
    if (setCustomerRefIdForVaultAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'setCustomerRefIdForVaultAccountRequest' when calling setCustomerRefIdForVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/set_customer_ref_id"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Assign AML customer reference ID
   * Sets an AML/KYT customer reference ID for a specific address.
   * @param vaultAccountId The ID of the vault account (required)
   * @param assetId The ID of the asset (required)
   * @param addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address (required)
   * @param setCustomerRefIdForVaultAccountRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void setCustomerRefIdForVaultAccountAssetAddress(String vaultAccountId, String assetId, String addressId, SetCustomerRefIdForVaultAccountRequest setCustomerRefIdForVaultAccountRequest) throws ApiException {
    Object localVarPostBody = setCustomerRefIdForVaultAccountRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling setCustomerRefIdForVaultAccountAssetAddress");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling setCustomerRefIdForVaultAccountAssetAddress");
    }
    
    // verify the required parameter 'addressId' is set
    if (addressId == null) {
      throw new ApiException(400, "Missing the required parameter 'addressId' when calling setCustomerRefIdForVaultAccountAssetAddress");
    }
    
    // verify the required parameter 'setCustomerRefIdForVaultAccountRequest' is set
    if (setCustomerRefIdForVaultAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'setCustomerRefIdForVaultAccountRequest' when calling setCustomerRefIdForVaultAccountAssetAddress");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/set_customer_ref_id"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()))
      .replaceAll("\\{" + "addressId" + "\\}", apiClient.escapeString(addressId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Unhide a vault account in the console
   * Makes a hidden vault account visible in web console view.
   * @param vaultAccountId The vault account to unhide (required)
   * @throws ApiException if fails to make API call
   */
  public void unhideVaultAccount(String vaultAccountId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling unhideVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/unhide"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Rename a vault account
   * Renames the requested vault account.
   * @param vaultAccountId The ID of the vault account to edit (required)
   * @param updateVaultAccountRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateVaultAccount(String vaultAccountId, UpdateVaultAccountRequest updateVaultAccountRequest) throws ApiException {
    Object localVarPostBody = updateVaultAccountRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling updateVaultAccount");
    }
    
    // verify the required parameter 'updateVaultAccountRequest' is set
    if (updateVaultAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateVaultAccountRequest' when calling updateVaultAccount");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Update address description
   * Updates the description of an existing address of an asset in a vault account.
   * @param vaultAccountId The ID of the vault account (required)
   * @param assetId The ID of the asset (required)
   * @param addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address (required)
   * @param updateVaultAccountAssetAddressRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateVaultAccountAssetAddress(String vaultAccountId, String assetId, String addressId, UpdateVaultAccountAssetAddressRequest updateVaultAccountAssetAddressRequest) throws ApiException {
    Object localVarPostBody = updateVaultAccountAssetAddressRequest;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling updateVaultAccountAssetAddress");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling updateVaultAccountAssetAddress");
    }
    
    // verify the required parameter 'addressId' is set
    if (addressId == null) {
      throw new ApiException(400, "Missing the required parameter 'addressId' when calling updateVaultAccountAssetAddress");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()))
      .replaceAll("\\{" + "addressId" + "\\}", apiClient.escapeString(addressId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Refresh asset balance data
   * Updates the balance of a specific asset in a vault account.
   * @param vaultAccountId The ID of the vault account to return (required)
   * @param assetId The ID of the asset (required)
   * @param body  (optional)
   * @return VaultAsset
   * @throws ApiException if fails to make API call
   */
  public VaultAsset updateVaultAccountAssetBalance(String vaultAccountId, String assetId, Object body) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'vaultAccountId' is set
    if (vaultAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'vaultAccountId' when calling updateVaultAccountAssetBalance");
    }
    
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      throw new ApiException(400, "Missing the required parameter 'assetId' when calling updateVaultAccountAssetBalance");
    }
    
    // create path and map variables
    String localVarPath = "/vault/accounts/{vaultAccountId}/{assetId}/balance"
      .replaceAll("\\{" + "vaultAccountId" + "\\}", apiClient.escapeString(vaultAccountId.toString()))
      .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<VaultAsset> localVarReturnType = new GenericType<VaultAsset>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
