/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateConnectionRequest
 */
@JsonPropertyOrder({
  CreateConnectionRequest.JSON_PROPERTY_VAULT_ACCOUNT_ID,
  CreateConnectionRequest.JSON_PROPERTY_FEE_LEVEL,
  CreateConnectionRequest.JSON_PROPERTY_URI,
  CreateConnectionRequest.JSON_PROPERTY_CHAIN_IDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateConnectionRequest {
  public static final String JSON_PROPERTY_VAULT_ACCOUNT_ID = "vaultAccountId";
  private BigDecimal vaultAccountId;

  /**
   * The default fee level. Valid values are &#x60;MEDIUM&#x60; and &#x60;HIGH&#x60;.
   */
  public enum FeeLevelEnum {
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    FeeLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FeeLevelEnum fromValue(String value) {
      for (FeeLevelEnum b : FeeLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FEE_LEVEL = "feeLevel";
  private FeeLevelEnum feeLevel;

  public static final String JSON_PROPERTY_URI = "uri";
  private String uri;

  public static final String JSON_PROPERTY_CHAIN_IDS = "chainIds";
  private List<String> chainIds = new ArrayList<>();

  public CreateConnectionRequest() {
  }

  public CreateConnectionRequest vaultAccountId(BigDecimal vaultAccountId) {
    
    this.vaultAccountId = vaultAccountId;
    return this;
  }

   /**
   * The ID of the vault to connect to the Web3 connection.
   * @return vaultAccountId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getVaultAccountId() {
    return vaultAccountId;
  }


  @JsonProperty(JSON_PROPERTY_VAULT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVaultAccountId(BigDecimal vaultAccountId) {
    this.vaultAccountId = vaultAccountId;
  }


  public CreateConnectionRequest feeLevel(FeeLevelEnum feeLevel) {
    
    this.feeLevel = feeLevel;
    return this;
  }

   /**
   * The default fee level. Valid values are &#x60;MEDIUM&#x60; and &#x60;HIGH&#x60;.
   * @return feeLevel
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FeeLevelEnum getFeeLevel() {
    return feeLevel;
  }


  @JsonProperty(JSON_PROPERTY_FEE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFeeLevel(FeeLevelEnum feeLevel) {
    this.feeLevel = feeLevel;
  }


  public CreateConnectionRequest uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The WalletConnect uri provided by the dapp.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(String uri) {
    this.uri = uri;
  }


  public CreateConnectionRequest chainIds(List<String> chainIds) {
    
    this.chainIds = chainIds;
    return this;
  }

  public CreateConnectionRequest addChainIdsItem(String chainIdsItem) {
    if (this.chainIds == null) {
      this.chainIds = new ArrayList<>();
    }
    this.chainIds.add(chainIdsItem);
    return this;
  }

   /**
   * The ID of the blockchain network used in the Web3 connection.
   * @return chainIds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CHAIN_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getChainIds() {
    return chainIds;
  }


  @JsonProperty(JSON_PROPERTY_CHAIN_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChainIds(List<String> chainIds) {
    this.chainIds = chainIds;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConnectionRequest createConnectionRequest = (CreateConnectionRequest) o;
    return Objects.equals(this.vaultAccountId, createConnectionRequest.vaultAccountId) &&
        Objects.equals(this.feeLevel, createConnectionRequest.feeLevel) &&
        Objects.equals(this.uri, createConnectionRequest.uri) &&
        Objects.equals(this.chainIds, createConnectionRequest.chainIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vaultAccountId, feeLevel, uri, chainIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConnectionRequest {\n");
    sb.append("    vaultAccountId: ").append(toIndentedString(vaultAccountId)).append("\n");
    sb.append("    feeLevel: ").append(toIndentedString(feeLevel)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    chainIds: ").append(toIndentedString(chainIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `vaultAccountId` to the URL query string
    if (getVaultAccountId() != null) {
      try {
        joiner.add(String.format("%svaultAccountId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVaultAccountId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `feeLevel` to the URL query string
    if (getFeeLevel() != null) {
      try {
        joiner.add(String.format("%sfeeLevel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFeeLevel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `uri` to the URL query string
    if (getUri() != null) {
      try {
        joiner.add(String.format("%suri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUri()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `chainIds` to the URL query string
    if (getChainIds() != null) {
      for (int i = 0; i < getChainIds().size(); i++) {
        try {
          joiner.add(String.format("%schainIds%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getChainIds().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

