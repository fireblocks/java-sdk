/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ConvertExchangeAccountRequest
 */
@JsonPropertyOrder({
  ConvertExchangeAccountRequest.JSON_PROPERTY_SRC_ASSET,
  ConvertExchangeAccountRequest.JSON_PROPERTY_DEST_ASSET,
  ConvertExchangeAccountRequest.JSON_PROPERTY_AMOUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConvertExchangeAccountRequest {
  public static final String JSON_PROPERTY_SRC_ASSET = "srcAsset";
  private String srcAsset;

  public static final String JSON_PROPERTY_DEST_ASSET = "destAsset";
  private String destAsset;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public ConvertExchangeAccountRequest() {
  }

  public ConvertExchangeAccountRequest srcAsset(String srcAsset) {
    
    this.srcAsset = srcAsset;
    return this;
  }

   /**
   * Name of the source asset (must be in a currency that is supported for conversions in the selected exchange type that corresponds to your exchange ID)
   * @return srcAsset
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SRC_ASSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSrcAsset() {
    return srcAsset;
  }


  @JsonProperty(JSON_PROPERTY_SRC_ASSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSrcAsset(String srcAsset) {
    this.srcAsset = srcAsset;
  }


  public ConvertExchangeAccountRequest destAsset(String destAsset) {
    
    this.destAsset = destAsset;
    return this;
  }

   /**
   * Name of the destination asset (must be in a currency that is supported for conversions in the selected exchange type that corresponds to your exchange ID)
   * @return destAsset
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEST_ASSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDestAsset() {
    return destAsset;
  }


  @JsonProperty(JSON_PROPERTY_DEST_ASSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDestAsset(String destAsset) {
    this.destAsset = destAsset;
  }


  public ConvertExchangeAccountRequest amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount to transfer (in the currency of the source asset)
   * @return amount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertExchangeAccountRequest convertExchangeAccountRequest = (ConvertExchangeAccountRequest) o;
    return Objects.equals(this.srcAsset, convertExchangeAccountRequest.srcAsset) &&
        Objects.equals(this.destAsset, convertExchangeAccountRequest.destAsset) &&
        Objects.equals(this.amount, convertExchangeAccountRequest.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcAsset, destAsset, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertExchangeAccountRequest {\n");
    sb.append("    srcAsset: ").append(toIndentedString(srcAsset)).append("\n");
    sb.append("    destAsset: ").append(toIndentedString(destAsset)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `srcAsset` to the URL query string
    if (getSrcAsset() != null) {
      try {
        joiner.add(String.format("%ssrcAsset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSrcAsset()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `destAsset` to the URL query string
    if (getDestAsset() != null) {
      try {
        joiner.add(String.format("%sdestAsset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestAsset()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      try {
        joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

