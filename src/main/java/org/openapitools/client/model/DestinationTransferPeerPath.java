/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.OneTimeAddress;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * DestinationTransferPeerPath
 */
@JsonPropertyOrder({
  DestinationTransferPeerPath.JSON_PROPERTY_TYPE,
  DestinationTransferPeerPath.JSON_PROPERTY_ID,
  DestinationTransferPeerPath.JSON_PROPERTY_WALLET_ID,
  DestinationTransferPeerPath.JSON_PROPERTY_ONE_TIME_ADDRESS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DestinationTransferPeerPath {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    VAULT_ACCOUNT("VAULT_ACCOUNT"),
    
    EXCHANGE_ACCOUNT("EXCHANGE_ACCOUNT"),
    
    INTERNAL_WALLET("INTERNAL_WALLET"),
    
    EXTERNAL_WALLET("EXTERNAL_WALLET"),
    
    NETWORK_CONNECTION("NETWORK_CONNECTION"),
    
    FIAT_ACCOUNT("FIAT_ACCOUNT"),
    
    COMPOUND("COMPOUND"),
    
    GAS_STATION("GAS_STATION"),
    
    ONE_TIME_ADDRESS("ONE_TIME_ADDRESS"),
    
    UNKNOWN("UNKNOWN"),
    
    END_USER_WALLET("END_USER_WALLET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_WALLET_ID = "walletId";
  private String walletId;

  public static final String JSON_PROPERTY_ONE_TIME_ADDRESS = "oneTimeAddress";
  private OneTimeAddress oneTimeAddress;

  public DestinationTransferPeerPath() {
  }

  public DestinationTransferPeerPath type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DestinationTransferPeerPath id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public DestinationTransferPeerPath walletId(String walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Get walletId
   * @return walletId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWalletId() {
    return walletId;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public DestinationTransferPeerPath oneTimeAddress(OneTimeAddress oneTimeAddress) {
    
    this.oneTimeAddress = oneTimeAddress;
    return this;
  }

   /**
   * Get oneTimeAddress
   * @return oneTimeAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ONE_TIME_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OneTimeAddress getOneTimeAddress() {
    return oneTimeAddress;
  }


  @JsonProperty(JSON_PROPERTY_ONE_TIME_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOneTimeAddress(OneTimeAddress oneTimeAddress) {
    this.oneTimeAddress = oneTimeAddress;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationTransferPeerPath destinationTransferPeerPath = (DestinationTransferPeerPath) o;
    return Objects.equals(this.type, destinationTransferPeerPath.type) &&
        Objects.equals(this.id, destinationTransferPeerPath.id) &&
        Objects.equals(this.walletId, destinationTransferPeerPath.walletId) &&
        Objects.equals(this.oneTimeAddress, destinationTransferPeerPath.oneTimeAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, walletId, oneTimeAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationTransferPeerPath {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    oneTimeAddress: ").append(toIndentedString(oneTimeAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `walletId` to the URL query string
    if (getWalletId() != null) {
      try {
        joiner.add(String.format("%swalletId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWalletId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `oneTimeAddress` to the URL query string
    if (getOneTimeAddress() != null) {
      joiner.add(getOneTimeAddress().toUrlQueryString(prefix + "oneTimeAddress" + suffix));
    }

    return joiner.toString();
  }

}

