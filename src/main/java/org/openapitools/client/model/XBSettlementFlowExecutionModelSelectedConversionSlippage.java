/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import org.openapitools.client.model.XBSettlementFlowSelectedConversionSlippageReason;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Indicates the selected slippage used during the flow since override logic may have taken place.
 */
@JsonPropertyOrder({
  XBSettlementFlowExecutionModelSelectedConversionSlippage.JSON_PROPERTY_BASIS_POINTS,
  XBSettlementFlowExecutionModelSelectedConversionSlippage.JSON_PROPERTY_REASON
})
@JsonTypeName("XBSettlementFlowExecutionModel_selectedConversionSlippage")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class XBSettlementFlowExecutionModelSelectedConversionSlippage {
  public static final String JSON_PROPERTY_BASIS_POINTS = "basisPoints";
  private BigDecimal basisPoints;

  public static final String JSON_PROPERTY_REASON = "reason";
  private XBSettlementFlowSelectedConversionSlippageReason reason;

  public XBSettlementFlowExecutionModelSelectedConversionSlippage() {
  }

  public XBSettlementFlowExecutionModelSelectedConversionSlippage basisPoints(BigDecimal basisPoints) {
    
    this.basisPoints = basisPoints;
    return this;
  }

   /**
   * Get basisPoints
   * @return basisPoints
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BASIS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getBasisPoints() {
    return basisPoints;
  }


  @JsonProperty(JSON_PROPERTY_BASIS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBasisPoints(BigDecimal basisPoints) {
    this.basisPoints = basisPoints;
  }


  public XBSettlementFlowExecutionModelSelectedConversionSlippage reason(XBSettlementFlowSelectedConversionSlippageReason reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementFlowSelectedConversionSlippageReason getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReason(XBSettlementFlowSelectedConversionSlippageReason reason) {
    this.reason = reason;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XBSettlementFlowExecutionModelSelectedConversionSlippage xbSettlementFlowExecutionModelSelectedConversionSlippage = (XBSettlementFlowExecutionModelSelectedConversionSlippage) o;
    return Objects.equals(this.basisPoints, xbSettlementFlowExecutionModelSelectedConversionSlippage.basisPoints) &&
        Objects.equals(this.reason, xbSettlementFlowExecutionModelSelectedConversionSlippage.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basisPoints, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XBSettlementFlowExecutionModelSelectedConversionSlippage {\n");
    sb.append("    basisPoints: ").append(toIndentedString(basisPoints)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `basisPoints` to the URL query string
    if (getBasisPoints() != null) {
      try {
        joiner.add(String.format("%sbasisPoints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBasisPoints()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reason` to the URL query string
    if (getReason() != null) {
      try {
        joiner.add(String.format("%sreason%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReason()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

