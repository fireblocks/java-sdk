/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.UUID;
import org.openapitools.client.model.XBSettlementAsset;
import org.openapitools.client.model.XBSettlementFlowExecutionModelSelectedConversionSlippage;
import org.openapitools.client.model.XBSettlementFlowExecutionStatus;
import org.openapitools.client.model.XBSettlementFlowStepsExecutionRecord;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * XBSettlementFlowExecutionModel
 */
@JsonPropertyOrder({
  XBSettlementFlowExecutionModel.JSON_PROPERTY_FLOW_ID,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_CONFIG_ID,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_INPUT_AMOUNT,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_OUTPUT_AMOUNT,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_TOTAL_FEE,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_INITIATED_AT,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_INITIATED_BY,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_STATE,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_STEPS,
  XBSettlementFlowExecutionModel.JSON_PROPERTY_SELECTED_CONVERSION_SLIPPAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class XBSettlementFlowExecutionModel {
  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  private String flowId;

  public static final String JSON_PROPERTY_CONFIG_ID = "configId";
  private UUID configId;

  public static final String JSON_PROPERTY_INPUT_AMOUNT = "inputAmount";
  private XBSettlementAsset inputAmount;

  public static final String JSON_PROPERTY_OUTPUT_AMOUNT = "outputAmount";
  private XBSettlementAsset outputAmount;

  public static final String JSON_PROPERTY_TOTAL_FEE = "totalFee";
  private XBSettlementAsset totalFee;

  public static final String JSON_PROPERTY_INITIATED_AT = "initiatedAt";
  private BigDecimal initiatedAt;

  public static final String JSON_PROPERTY_INITIATED_BY = "initiatedBy";
  private String initiatedBy;

  public static final String JSON_PROPERTY_STATE = "state";
  private XBSettlementFlowExecutionStatus state;

  public static final String JSON_PROPERTY_STEPS = "steps";
  private XBSettlementFlowStepsExecutionRecord steps;

  public static final String JSON_PROPERTY_SELECTED_CONVERSION_SLIPPAGE = "selectedConversionSlippage";
  private XBSettlementFlowExecutionModelSelectedConversionSlippage selectedConversionSlippage;

  public XBSettlementFlowExecutionModel() {
  }

  public XBSettlementFlowExecutionModel flowId(String flowId) {
    
    this.flowId = flowId;
    return this;
  }

   /**
   * The unique id for the cross-border flow.
   * @return flowId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowId() {
    return flowId;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }


  public XBSettlementFlowExecutionModel configId(UUID configId) {
    
    this.configId = configId;
    return this;
  }

   /**
   * Cross Bodrder configuraion unique id
   * @return configId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getConfigId() {
    return configId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigId(UUID configId) {
    this.configId = configId;
  }


  public XBSettlementFlowExecutionModel inputAmount(XBSettlementAsset inputAmount) {
    
    this.inputAmount = inputAmount;
    return this;
  }

   /**
   * Get inputAmount
   * @return inputAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementAsset getInputAmount() {
    return inputAmount;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputAmount(XBSettlementAsset inputAmount) {
    this.inputAmount = inputAmount;
  }


  public XBSettlementFlowExecutionModel outputAmount(XBSettlementAsset outputAmount) {
    
    this.outputAmount = outputAmount;
    return this;
  }

   /**
   * Get outputAmount
   * @return outputAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementAsset getOutputAmount() {
    return outputAmount;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputAmount(XBSettlementAsset outputAmount) {
    this.outputAmount = outputAmount;
  }


  public XBSettlementFlowExecutionModel totalFee(XBSettlementAsset totalFee) {
    
    this.totalFee = totalFee;
    return this;
  }

   /**
   * Get totalFee
   * @return totalFee
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_FEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementAsset getTotalFee() {
    return totalFee;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_FEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalFee(XBSettlementAsset totalFee) {
    this.totalFee = totalFee;
  }


  public XBSettlementFlowExecutionModel initiatedAt(BigDecimal initiatedAt) {
    
    this.initiatedAt = initiatedAt;
    return this;
  }

   /**
   * The time the cross-border flow executed in epoch format.
   * @return initiatedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INITIATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getInitiatedAt() {
    return initiatedAt;
  }


  @JsonProperty(JSON_PROPERTY_INITIATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInitiatedAt(BigDecimal initiatedAt) {
    this.initiatedAt = initiatedAt;
  }


  public XBSettlementFlowExecutionModel initiatedBy(String initiatedBy) {
    
    this.initiatedBy = initiatedBy;
    return this;
  }

   /**
   * The id of the user which launched the flow
   * @return initiatedBy
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INITIATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInitiatedBy() {
    return initiatedBy;
  }


  @JsonProperty(JSON_PROPERTY_INITIATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInitiatedBy(String initiatedBy) {
    this.initiatedBy = initiatedBy;
  }


  public XBSettlementFlowExecutionModel state(XBSettlementFlowExecutionStatus state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementFlowExecutionStatus getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(XBSettlementFlowExecutionStatus state) {
    this.state = state;
  }


  public XBSettlementFlowExecutionModel steps(XBSettlementFlowStepsExecutionRecord steps) {
    
    this.steps = steps;
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementFlowStepsExecutionRecord getSteps() {
    return steps;
  }


  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSteps(XBSettlementFlowStepsExecutionRecord steps) {
    this.steps = steps;
  }


  public XBSettlementFlowExecutionModel selectedConversionSlippage(XBSettlementFlowExecutionModelSelectedConversionSlippage selectedConversionSlippage) {
    
    this.selectedConversionSlippage = selectedConversionSlippage;
    return this;
  }

   /**
   * Get selectedConversionSlippage
   * @return selectedConversionSlippage
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SELECTED_CONVERSION_SLIPPAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public XBSettlementFlowExecutionModelSelectedConversionSlippage getSelectedConversionSlippage() {
    return selectedConversionSlippage;
  }


  @JsonProperty(JSON_PROPERTY_SELECTED_CONVERSION_SLIPPAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSelectedConversionSlippage(XBSettlementFlowExecutionModelSelectedConversionSlippage selectedConversionSlippage) {
    this.selectedConversionSlippage = selectedConversionSlippage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XBSettlementFlowExecutionModel xbSettlementFlowExecutionModel = (XBSettlementFlowExecutionModel) o;
    return Objects.equals(this.flowId, xbSettlementFlowExecutionModel.flowId) &&
        Objects.equals(this.configId, xbSettlementFlowExecutionModel.configId) &&
        Objects.equals(this.inputAmount, xbSettlementFlowExecutionModel.inputAmount) &&
        Objects.equals(this.outputAmount, xbSettlementFlowExecutionModel.outputAmount) &&
        Objects.equals(this.totalFee, xbSettlementFlowExecutionModel.totalFee) &&
        Objects.equals(this.initiatedAt, xbSettlementFlowExecutionModel.initiatedAt) &&
        Objects.equals(this.initiatedBy, xbSettlementFlowExecutionModel.initiatedBy) &&
        Objects.equals(this.state, xbSettlementFlowExecutionModel.state) &&
        Objects.equals(this.steps, xbSettlementFlowExecutionModel.steps) &&
        Objects.equals(this.selectedConversionSlippage, xbSettlementFlowExecutionModel.selectedConversionSlippage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowId, configId, inputAmount, outputAmount, totalFee, initiatedAt, initiatedBy, state, steps, selectedConversionSlippage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XBSettlementFlowExecutionModel {\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    inputAmount: ").append(toIndentedString(inputAmount)).append("\n");
    sb.append("    outputAmount: ").append(toIndentedString(outputAmount)).append("\n");
    sb.append("    totalFee: ").append(toIndentedString(totalFee)).append("\n");
    sb.append("    initiatedAt: ").append(toIndentedString(initiatedAt)).append("\n");
    sb.append("    initiatedBy: ").append(toIndentedString(initiatedBy)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    selectedConversionSlippage: ").append(toIndentedString(selectedConversionSlippage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `flowId` to the URL query string
    if (getFlowId() != null) {
      try {
        joiner.add(String.format("%sflowId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlowId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `configId` to the URL query string
    if (getConfigId() != null) {
      try {
        joiner.add(String.format("%sconfigId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfigId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inputAmount` to the URL query string
    if (getInputAmount() != null) {
      joiner.add(getInputAmount().toUrlQueryString(prefix + "inputAmount" + suffix));
    }

    // add `outputAmount` to the URL query string
    if (getOutputAmount() != null) {
      joiner.add(getOutputAmount().toUrlQueryString(prefix + "outputAmount" + suffix));
    }

    // add `totalFee` to the URL query string
    if (getTotalFee() != null) {
      joiner.add(getTotalFee().toUrlQueryString(prefix + "totalFee" + suffix));
    }

    // add `initiatedAt` to the URL query string
    if (getInitiatedAt() != null) {
      try {
        joiner.add(String.format("%sinitiatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitiatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `initiatedBy` to the URL query string
    if (getInitiatedBy() != null) {
      try {
        joiner.add(String.format("%sinitiatedBy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitiatedBy()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      try {
        joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `steps` to the URL query string
    if (getSteps() != null) {
      try {
        joiner.add(String.format("%ssteps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `selectedConversionSlippage` to the URL query string
    if (getSelectedConversionSlippage() != null) {
      joiner.add(getSelectedConversionSlippage().toUrlQueryString(prefix + "selectedConversionSlippage" + suffix));
    }

    return joiner.toString();
  }

}

