/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * PublicKeyInformation
 */
@JsonPropertyOrder({
  PublicKeyInformation.JSON_PROPERTY_ALGORITHM,
  PublicKeyInformation.JSON_PROPERTY_DERIVATION_PATH,
  PublicKeyInformation.JSON_PROPERTY_PUBLIC_KEY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PublicKeyInformation {
  public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
  private String algorithm;

  public static final String JSON_PROPERTY_DERIVATION_PATH = "derivationPath";
  private List<BigDecimal> derivationPath;

  public static final String JSON_PROPERTY_PUBLIC_KEY = "publicKey";
  private String publicKey;

  public PublicKeyInformation() {
  }

  public PublicKeyInformation algorithm(String algorithm) {
    
    this.algorithm = algorithm;
    return this;
  }

   /**
   * Get algorithm
   * @return algorithm
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlgorithm() {
    return algorithm;
  }


  @JsonProperty(JSON_PROPERTY_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
  }


  public PublicKeyInformation derivationPath(List<BigDecimal> derivationPath) {
    
    this.derivationPath = derivationPath;
    return this;
  }

  public PublicKeyInformation addDerivationPathItem(BigDecimal derivationPathItem) {
    if (this.derivationPath == null) {
      this.derivationPath = new ArrayList<>();
    }
    this.derivationPath.add(derivationPathItem);
    return this;
  }

   /**
   * Get derivationPath
   * @return derivationPath
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DERIVATION_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BigDecimal> getDerivationPath() {
    return derivationPath;
  }


  @JsonProperty(JSON_PROPERTY_DERIVATION_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDerivationPath(List<BigDecimal> derivationPath) {
    this.derivationPath = derivationPath;
  }


  public PublicKeyInformation publicKey(String publicKey) {
    
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Get publicKey
   * @return publicKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicKey() {
    return publicKey;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicKeyInformation publicKeyInformation = (PublicKeyInformation) o;
    return Objects.equals(this.algorithm, publicKeyInformation.algorithm) &&
        Objects.equals(this.derivationPath, publicKeyInformation.derivationPath) &&
        Objects.equals(this.publicKey, publicKeyInformation.publicKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, derivationPath, publicKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicKeyInformation {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    derivationPath: ").append(toIndentedString(derivationPath)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `algorithm` to the URL query string
    if (getAlgorithm() != null) {
      try {
        joiner.add(String.format("%salgorithm%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlgorithm()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `derivationPath` to the URL query string
    if (getDerivationPath() != null) {
      for (int i = 0; i < getDerivationPath().size(); i++) {
        if (getDerivationPath().get(i) != null) {
          try {
            joiner.add(String.format("%sderivationPath%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getDerivationPath().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `publicKey` to the URL query string
    if (getPublicKey() != null) {
      try {
        joiner.add(String.format("%spublicKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPublicKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

