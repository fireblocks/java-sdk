/*
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;
import com.sun.jersey.api.client.GenericType;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Information about the originator of the transaction
 */
@JsonPropertyOrder({
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_FULL_NAME,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_DATE_OF_BIRTH,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_PLACE_OF_BIRTH,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_ADDRESS,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_IDENTIFICATION_NUMBER,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_NATIONALITY,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_COUNTRY_OF_RESIDENCE,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_TAX_IDENTIFICATION_NUMBER,
  TravelRuleValidateFullTransactionRequestOriginator.JSON_PROPERTY_CUSTOMER_NUMBER
})
@JsonTypeName("TravelRuleValidateFullTransactionRequest_originator")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TravelRuleValidateFullTransactionRequestOriginator {
  public static final String JSON_PROPERTY_FULL_NAME = "fullName";
  private String fullName;

  public static final String JSON_PROPERTY_DATE_OF_BIRTH = "dateOfBirth";
  private String dateOfBirth;

  public static final String JSON_PROPERTY_PLACE_OF_BIRTH = "placeOfBirth";
  private String placeOfBirth;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private String address;

  public static final String JSON_PROPERTY_IDENTIFICATION_NUMBER = "identificationNumber";
  private String identificationNumber;

  public static final String JSON_PROPERTY_NATIONALITY = "nationality";
  private String nationality;

  public static final String JSON_PROPERTY_COUNTRY_OF_RESIDENCE = "countryOfResidence";
  private String countryOfResidence;

  public static final String JSON_PROPERTY_TAX_IDENTIFICATION_NUMBER = "taxIdentificationNumber";
  private String taxIdentificationNumber;

  public static final String JSON_PROPERTY_CUSTOMER_NUMBER = "customerNumber";
  private String customerNumber;

  public TravelRuleValidateFullTransactionRequestOriginator() {
  }

  public TravelRuleValidateFullTransactionRequestOriginator fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFullName() {
    return fullName;
  }


  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public TravelRuleValidateFullTransactionRequestOriginator dateOfBirth(String dateOfBirth) {
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE_OF_BIRTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDateOfBirth() {
    return dateOfBirth;
  }


  @JsonProperty(JSON_PROPERTY_DATE_OF_BIRTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public TravelRuleValidateFullTransactionRequestOriginator placeOfBirth(String placeOfBirth) {
    
    this.placeOfBirth = placeOfBirth;
    return this;
  }

   /**
   * Get placeOfBirth
   * @return placeOfBirth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLACE_OF_BIRTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPlaceOfBirth() {
    return placeOfBirth;
  }


  @JsonProperty(JSON_PROPERTY_PLACE_OF_BIRTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlaceOfBirth(String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
  }


  public TravelRuleValidateFullTransactionRequestOriginator address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddress(String address) {
    this.address = address;
  }


  public TravelRuleValidateFullTransactionRequestOriginator identificationNumber(String identificationNumber) {
    
    this.identificationNumber = identificationNumber;
    return this;
  }

   /**
   * Get identificationNumber
   * @return identificationNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTIFICATION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentificationNumber() {
    return identificationNumber;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFICATION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentificationNumber(String identificationNumber) {
    this.identificationNumber = identificationNumber;
  }


  public TravelRuleValidateFullTransactionRequestOriginator nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Get nationality
   * @return nationality
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NATIONALITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNationality() {
    return nationality;
  }


  @JsonProperty(JSON_PROPERTY_NATIONALITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public TravelRuleValidateFullTransactionRequestOriginator countryOfResidence(String countryOfResidence) {
    
    this.countryOfResidence = countryOfResidence;
    return this;
  }

   /**
   * Get countryOfResidence
   * @return countryOfResidence
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTRY_OF_RESIDENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountryOfResidence() {
    return countryOfResidence;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_OF_RESIDENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountryOfResidence(String countryOfResidence) {
    this.countryOfResidence = countryOfResidence;
  }


  public TravelRuleValidateFullTransactionRequestOriginator taxIdentificationNumber(String taxIdentificationNumber) {
    
    this.taxIdentificationNumber = taxIdentificationNumber;
    return this;
  }

   /**
   * Get taxIdentificationNumber
   * @return taxIdentificationNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAX_IDENTIFICATION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTaxIdentificationNumber() {
    return taxIdentificationNumber;
  }


  @JsonProperty(JSON_PROPERTY_TAX_IDENTIFICATION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaxIdentificationNumber(String taxIdentificationNumber) {
    this.taxIdentificationNumber = taxIdentificationNumber;
  }


  public TravelRuleValidateFullTransactionRequestOriginator customerNumber(String customerNumber) {
    
    this.customerNumber = customerNumber;
    return this;
  }

   /**
   * Get customerNumber
   * @return customerNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCustomerNumber() {
    return customerNumber;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomerNumber(String customerNumber) {
    this.customerNumber = customerNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TravelRuleValidateFullTransactionRequestOriginator travelRuleValidateFullTransactionRequestOriginator = (TravelRuleValidateFullTransactionRequestOriginator) o;
    return Objects.equals(this.fullName, travelRuleValidateFullTransactionRequestOriginator.fullName) &&
        Objects.equals(this.dateOfBirth, travelRuleValidateFullTransactionRequestOriginator.dateOfBirth) &&
        Objects.equals(this.placeOfBirth, travelRuleValidateFullTransactionRequestOriginator.placeOfBirth) &&
        Objects.equals(this.address, travelRuleValidateFullTransactionRequestOriginator.address) &&
        Objects.equals(this.identificationNumber, travelRuleValidateFullTransactionRequestOriginator.identificationNumber) &&
        Objects.equals(this.nationality, travelRuleValidateFullTransactionRequestOriginator.nationality) &&
        Objects.equals(this.countryOfResidence, travelRuleValidateFullTransactionRequestOriginator.countryOfResidence) &&
        Objects.equals(this.taxIdentificationNumber, travelRuleValidateFullTransactionRequestOriginator.taxIdentificationNumber) &&
        Objects.equals(this.customerNumber, travelRuleValidateFullTransactionRequestOriginator.customerNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, dateOfBirth, placeOfBirth, address, identificationNumber, nationality, countryOfResidence, taxIdentificationNumber, customerNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TravelRuleValidateFullTransactionRequestOriginator {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    identificationNumber: ").append(toIndentedString(identificationNumber)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    countryOfResidence: ").append(toIndentedString(countryOfResidence)).append("\n");
    sb.append("    taxIdentificationNumber: ").append(toIndentedString(taxIdentificationNumber)).append("\n");
    sb.append("    customerNumber: ").append(toIndentedString(customerNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fullName` to the URL query string
    if (getFullName() != null) {
      try {
        joiner.add(String.format("%sfullName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFullName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `dateOfBirth` to the URL query string
    if (getDateOfBirth() != null) {
      try {
        joiner.add(String.format("%sdateOfBirth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDateOfBirth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `placeOfBirth` to the URL query string
    if (getPlaceOfBirth() != null) {
      try {
        joiner.add(String.format("%splaceOfBirth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlaceOfBirth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `address` to the URL query string
    if (getAddress() != null) {
      try {
        joiner.add(String.format("%saddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAddress()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `identificationNumber` to the URL query string
    if (getIdentificationNumber() != null) {
      try {
        joiner.add(String.format("%sidentificationNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentificationNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `nationality` to the URL query string
    if (getNationality() != null) {
      try {
        joiner.add(String.format("%snationality%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNationality()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `countryOfResidence` to the URL query string
    if (getCountryOfResidence() != null) {
      try {
        joiner.add(String.format("%scountryOfResidence%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCountryOfResidence()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taxIdentificationNumber` to the URL query string
    if (getTaxIdentificationNumber() != null) {
      try {
        joiner.add(String.format("%staxIdentificationNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaxIdentificationNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `customerNumber` to the URL query string
    if (getCustomerNumber() != null) {
      try {
        joiner.add(String.format("%scustomerNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomerNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

